<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\BuildAgent-03\work\nh\build\NHibernate-4.1.0.Alpha1-debug\bin\net-4.0\NHibernate.Test.dll" errors="59" failures="159" not-run="372" inconclusive="0" ignored="372" skipped="0" invalid="0">
  <environment nunit-version="2.6.1.12217" clr-version="2.0.50727.3662" os-version="Microsoft Windows NT 5.2.3790 Service Pack 2" platform="Win32NT" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="D:\BuildAgent-03\work\nh\build\NHibernate-4.1.0.Alpha1-debug\bin\net-4.0\NHibernate.Test.dll" executed="True" result="Failure" success="False" asserts="0">
    <results>
      <test-suite type="Namespace" name="NHibernate" executed="True" result="Failure" success="False" asserts="0">
        <results>
          <test-suite type="Namespace" name="Test" executed="True" result="Failure" success="False" asserts="0">
            <results>
              <test-suite type="Namespace" name="Ado" executed="True" result="Inconclusive" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BatcherFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.AbstractBatcherLog" description="Activating the AbstractBatcher's log the log stream:&#xA;-should not contains batch info &#xA;-should contain SQL log info only regarding batcher (SQL log should not be duplicated)&#xA;-the batcher should work." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.AbstractBatcherLogFormattedSql" description="Activating the AbstractBatcher's log the log stream:&#xA;-should contain well formatted SQL log info" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.BatchedoutputShouldBeFormatted" description="SqlClient: The batcher log output should be formatted" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripDelete" description="The batcher should run all DELETE queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripInserts" description="The batcher should run all INSERT queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.OneRoundTripUpdate" description="The batcher should run all UPDATE queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlClientOneRoundTripForUpdateAndInsert" description="SqlClient: The batcher should run all different INSERT queries in only one roundtrip." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlLog" description="Activating the SQL and turning off the batcher's log the log stream:&#xA;-should not contains adding to batch&#xA;-should contain batch command&#xA;-the batcher should work." executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Ado.BatcherFixture.SqlLogShouldGetBatchCommandNotification" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ado.BatcherFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Any" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AnyTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Any.AnyTypeTest.FlushProcessing" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="BulkManipulation" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="HqlBulkOperations" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.BulkManipulation.HqlBulkOperations.SimpleDelete" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLBulkOperations" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.BulkManipulation.NativeSQLBulkOperations.SimpleNativeSQLInsert" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Bytecode" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ActivatorObjectFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceDefCtor" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceOfValueType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceWithArguments" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Bytecode.ActivatorObjectFactoryFixture.CreateInstanceWithNoPublicCtor" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Lightweight" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BytecodeProviderFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.CantCreateProxyFactoryFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.CollectionTypeFactoryCantChangeAfterUsage" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.DoesNotImplementProxyFactoryFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.InvalidCollectionTypeFactoryCtor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.NotConfiguredCollectionTypeFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.NotConfiguredProxyFactoryFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.SetCollectionTypeFactoryClassByName" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.SetCollectionTypeFactoryClassByType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Bytecode.Lightweight.BytecodeProviderFixture.UnableToLoadProxyFactoryFactory" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CacheTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.CacheFixture.MinValueTimestamp" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CacheTest.CacheFixture.TestSimpleCache" executed="True" result="Success" success="True" asserts="24" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterKeyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.Equality" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.HashCode" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.NotEqualHashCode" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.NotEquality" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.FilterKeyFixture.ToStringIncludeAll" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryCacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.QueryCacheFixture.QueryCacheWithNullParameters" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryKeyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.EqualityWithFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.HashCodeWithFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.NotEqualHashCodeWithFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.NotEqualityWithFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.ToStringWithFilters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CacheTest.QueryKeyFixture.ToStringWithMoreFilters" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestamperFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Cascade" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Circle" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CascadeMergeToChildBeforeParentTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.Merge" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.MergeData3Nodes" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Cascade.Circle.CascadeMergeToChildBeforeParentTest.MergeTransientChildBeforeTransientParent" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MultiPathCircleCascadeTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeDeliveryNode" executed="True" result="Success" success="True" asserts="26" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeEntityWithNonNullableEntityNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeEntityWithNonNullableTransientEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergePickupNode" executed="True" result="Success" success="True" asserts="26" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeRoute" executed="True" result="Success" success="True" asserts="27" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeTour" executed="True" result="Success" success="True" asserts="26" />
                          <test-case name="NHibernate.Test.Cascade.Circle.MultiPathCircleCascadeTest.MergeTransport" executed="True" result="Success" success="True" asserts="26" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiPathCascadeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathGetAndModify" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeModifiedDetached" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeModifiedDetachedIntoProxy" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInCollection" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInManyToOne" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathMergeNonCascadedTransientEntityInOneToOne" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Cascade.MultiPathCascadeTest.MultiPathUpdateModifiedDetached" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="OneToOneCascadeDelete" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Fk" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Bidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Bidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Bidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Composite" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Composite.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Composite.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Reversed" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="Bidirectional" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Bidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Bidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="Unidirectional" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Unidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileDetached" executed="True" result="Success" success="True" asserts="6" />
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Unidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Unidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileDetached" executed="True" result="Success" success="True" asserts="6" />
                                      <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Fk.Reversed.Unidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Pk" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Bidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Pk.Bidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Pk.Bidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="6" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Unidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestByCode" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Pk.Unidirectional.DeleteOneToOneOrphansTestByCode.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="9" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DeleteOneToOneOrphansTestHbm" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.Cascade.OneToOneCascadeDelete.Pk.Unidirectional.DeleteOneToOneOrphansTestHbm.DeleteOneToOneOrphansTest.TestOrphanedWhileManaged" executed="True" result="Success" success="True" asserts="9" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RefreshFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshCascade" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshIgnoringTransient" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshIgnoringTransientInCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Cascade.RefreshFixture.RefreshNotIgnoringTransientByUnsavedValue" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CfgTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AccessorsSerializableTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="AllAccessorsAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.ChainedPropertyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.MapAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.NoSetterAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.ReadOnlyAccessor)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllAccessorsAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="AllGettersAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor+BackrefGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor+BasicGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor+EmbeddedGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor+FieldGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor+IndexGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.MapAccessor+MapGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor+NoopGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+XmlGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+AttributeGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementAttributeGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementGetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllGettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+TextGetter)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="AllSettersAreMarkedAsSerializable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.BackrefPropertyAccessor+BackrefSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.BasicPropertyAccessor+BasicSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.EmbeddedPropertyAccessor+EmbeddedSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.FieldAccessor+FieldSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.IndexPropertyAccessor+IndexSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.MapAccessor+MapSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.NoopAccessor+NoopSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.ReadOnlyAccessor+NoopSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+XmlSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+AttributeSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementAttributeSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+ElementSetter)" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.AccessorsSerializableTest.AllSettersAreMarkedAsSerializable(NHibernate.Properties.XmlAccessor+TextSetter)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationAddMappingEvents" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationAddMappingEvents.WhenSubscribedToAfterBindThenRaiseEventForEachMapping" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationAddMappingEvents.WhenSubscribedToBeforeBindThenRaiseEventForEachMapping" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.AddDocument" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfiguration" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfigurationForUnmappedClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.CacheConfigurationForUnmappedCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.DisabledProxyValidator" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.EmptyPropertyTag" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.InvalidXmlInCfgFile" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.InvalidXmlInHbmFile" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH1334" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH1348" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH2890Standard" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NH2890Xml" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.NoSessionFactoriesInConfiguration" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.PersisterWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ProxyValidator" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ProxyWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ReadCfgXmlFromAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.ReadCfgXmlFromDefaultFile" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationFixture.SetDefaultAssemblyAndNamespace" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationSchemaFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.ClassesCache" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.CollectionsCache" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.EmptyFactoryNotAllowed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Events" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.FactoryName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.FromAppConfigTest" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.IgnoreSystemOutOfAppConfig" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.InvalidConfig" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Listeners" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.MappingEquatable" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Mappings" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.NotAllowedMappings" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSchemaFixture.Properties" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConfigurationSerializationTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSerializationTests.Basic_CRUD_should_work" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.CfgTest.ConfigurationSerializationTests.Configuration_should_be_serializable" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CustomBytecodeProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenInvalidThenThrow" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoDefaultCtorThenThrow" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoShortCutUsedThenCanBuildBytecodeProvider" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.CustomBytecodeProviderTest.WhenNoShortCutUsedThenCanBuildInstanceOfConfiguredBytecodeProvider" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DefaultFlushModeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.DefaultFlushModeFixture.CanSetDefaultFlushModeThroughLoquaciousConfiguration" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultFlushModeFixture.CanSetDefaultFlushModeThroughStandardConfiguration" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultFlushModeFixture.CanSetDefaultFlushModeThroughXmlConfiguration" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DefaultNsAssmFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.BottomUpJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.MixedJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.MixedSubclass" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.DefaultNsAssmFixture.TopDownJoined" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EntityCacheUsageParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.EntityCacheUsageParserFixture.CovertToString" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CfgTest.EntityCacheUsageParserFixture.Parse" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HbmOrderingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.BottomUpJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.MixedJoined" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.MixedSubclass" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CfgTest.HbmOrderingFixture.TopDownJoined" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Loquacious" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.CompleteConfiguration" executed="True" result="Success" success="True" asserts="29" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.NH2890Loquacious" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.UseConnectionStringName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.ConfigurationFixture.UseDbConfigurationStringBuilder" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EntityCacheConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfCollection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.ConfigureCacheOfCollectionWithOutEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.EntityCacheConfigurationFixture.NotAllowRelatedCollections" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LambdaConfigurationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.LambdaConfigurationFixture.FullConfiguration" executed="True" result="Success" success="True" asserts="29" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NamedQueryTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.NamedQueryTests.AddSimpleNamedQuery" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.NamedQueryTests.WhenSetInvalidFetchSizeThenLeaveDefault" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.NamedQueryTests.WhenSetInvalidTimeoutThenLeaveDefault" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.NamedQueryTests.WhenSetValidFetchSizeThenSetValue" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.NamedQueryTests.WhenSetValidTimeoutThenSetValue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TypeDefinitionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.CfgTest.Loquacious.TypeDefinitionFixture.AddTypeDef" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MappingDocumentAggregatorTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CanAddDomainModelAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CanSerializeAndDeserializeDomainModelAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentAggregatorTests.CompareDeserializationTimes" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MappingDocumentParserTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.MappingDocumentParserTests.CanDeserializeHBM" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SchemaAutoActionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.SchemaAutoActionFixture.Equality" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SettingsFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CfgTest.SettingsFactoryFixture.DefaultValueForKeyWords" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Classic" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LifecycleFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Delete" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Merge" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Save" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Classic.LifecycleFixture.Update" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ValidatableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Delete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Merge" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Save" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Classic.ValidatableFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CollectionFilterTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CollectionFilterQueriesTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CollectionFilterTest.CollectionFilterQueriesTest.DeleteShouldBeDisallowed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CollectionFilterTest.CollectionFilterQueriesTest.InnerSubqueryMustHaveFromClause" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CollectionFilterTest.CollectionFilterQueriesTest.InnerSubqueryShouldNotBeFiltered" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.CollectionFilterTest.CollectionFilterQueriesTest.InsertShouldBeDisallowed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CollectionFilterTest.CollectionFilterQueriesTest.UpdateShouldBeDisallowed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CollectionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="IdBagFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CollectionTest.IdBagFixture.Simple" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullableValueTypeElementMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldAddAndRemoveNullElements" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldOverwriteElementValueWithNull" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.CollectionTest.NullableValueTypeElementMapFixture.ShouldOverwriteNullElementWithValue" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Component" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Basic" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ComponentTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponent" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentFormulaQuery" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentQueries" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Ported from Hibernate - failing in NH]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestComponentStateChangeAndDirtiness" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestCustomColumnReadAndWrite" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Ported from Hibernate. Read properties not supported in NH yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestMergeComponent" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Component.Basic.Employee#1][SQL: INSERT INTO T_EMP (HIRE_DATE, Name, Dob, Value1, Value2, ID) VALUES (?, ?, ?, ?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestNamedQuery" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Component.Basic.ComponentTest.TestUpdateFalse" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponentWithUniqueConstraintTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Component.Basic.ComponentWithUniqueConstraintTests.CanBePersistedWithUniqueValues" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Component.Basic.ComponentWithUniqueConstraintTests.CannotBePersistedWithNonUniqueValues" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="CompositeId" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ClassWithCompositeIdFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.Criteria" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.Hql" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.CompositeId.ClassWithCompositeIdFixture.TestSimpleCRUD" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CompositeIdFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.CompositeIds" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.MultipleCollectionFetch" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.NonLazyFetch" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.CompositeId.CompositeIdFixture.Query" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ConnectionStringTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NamedConnectionStringFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.CanGetNamedConnectionStringFromConfiguration" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.ConnectionStringInSettingsOverrideNamedConnectionSTring" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ConnectionStringTest.NamedConnectionStringFixture.InvalidNamedConnectedStringThrows" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ConnectionTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggressiveReleaseTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.ConnectionMaintanenceDuringFlush" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.QueryIteration" executed="True" result="Failure" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SerializationFailsOnAfterStatementAggressiveReleaseWithOpenResources" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SerializationOnAfterStatementAggressiveRelease" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ConnectionTest.AggressiveReleaseTest.SuppliedConnection" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThreadLocalCurrentSessionTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.ConnectionTest.ThreadLocalCurrentSessionTest.ContextCleanup" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ConnectionTest.ThreadLocalCurrentSessionTest.TransactionProtection" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not yet supported. Need AutoClosed feature.(TransactionContext)]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ConventionsTestCase" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.ConventionsTestCase.NHibernate_should_be_cls_compliant" executed="True" result="Success" success="True" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Criteria" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CriteriaQueryTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.AliasJoinCriterion" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.AllowToSetLimitOnSubqueries" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CacheDetachedCriteria" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CanSetLockModeOnDetachedCriteria" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ClassProperty" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningCriteria" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningCriteria_AddCount_RemoveOrdering" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningDetachedCriteriaTest" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectedId" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectionsTest" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningProjectionsUsingProperty" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CloningSubcriteriaJoinTypes" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.CriteriaInspection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DetachedCriteriaInspection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DetachedCriteriaTest" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.DistinctProjectionsOfComponents" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.EscapeCharacter" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.GroupByComponent" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.IgnoreCase" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.InsensitiveLikeProjectionUsingRestrictionsTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.LikeProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.LikeProjectionUsingRestrictionsTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.NH_1155_ShouldNotLoadAllChildrenInPagedSubSelect" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.OrderProjectionAliasedTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.OrderProjectionTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ParametersInCountExpression" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedComponent" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedCompositeId" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedCompositeIdWithAlias" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedEmbeddedCompositeId" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedId" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedListIncludesComponent" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectedListIncludesEmbeddedCompositeId" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionCache" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionsTest" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ProjectionsUsingProperty" executed="True" result="Success" success="True" asserts="53" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.PropertySubClassDiscriminator" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.PropertyWithFormulaAndPagingTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.RestrictionOnSubclassCollection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SameColumnAndAliasNames" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SameColumnAndAliasNamesResultTransformer" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.ScrollCriteria" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[ScrollableResults not implemented]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SimplePagination" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SimplePaginationOnlyWithFirst" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SqlExpressionWithParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubcriteriaJoinTypes" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubqueryPagination" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubqueryPaginationOnlyWithFirst" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.Subselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.SubselectWithComponent" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TestSubcriteriaBeingNull" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TransformToRowCountTest" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.CriteriaQueryTest.TypeMismatch" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedCriteriaSerializable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllCriterionAreSerializable" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllEmbeddedResultTransformersAreSerializable" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.AllProjectionAreSerializable" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.BasicCriterions" executed="True" result="Success" success="True" asserts="22" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.DetachedCriteriaItSelf" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ExecutableCriteria" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.Junctions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.LikeCriterions" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.LogicalCriterions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ProjectionsExpressions" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.ResultTransformes" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SQLCriterion" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SQLProjection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.DetachedCriteriaSerializable.SubqueriesExpressions" executed="True" result="Success" success="True" asserts="36" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Lambda" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CriteriaAssertFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentAliases" executed="True" result="Success" success="True" asserts="35" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentFetchMode" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentJoinType" executed="True" result="Success" success="True" asserts="42" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentLockMode" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentNestedCriterion" executed="True" result="Success" success="True" asserts="18" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentOperators" executed="True" result="Success" success="True" asserts="17" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentOrder" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentPaths" executed="True" result="Success" success="True" asserts="11" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentProjections" executed="True" result="Success" success="True" asserts="42" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentPropertyName" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentSubCriteria" executed="True" result="Success" success="True" asserts="17" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentSubquery" executed="True" result="Success" success="True" asserts="21" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentTypes" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.CriteriaAssertFixture.DifferentValues" executed="True" result="Success" success="True" asserts="13" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ExpressionProcessorFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateBooleanMemberExpression" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateEnumeration" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateMemberExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableBoolExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableEnumExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableEnumValueExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullableIntExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateNullPropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluatePropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateRestrictionExtension" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateStaticPropertyExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestEvaluateSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionClass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionClassAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionComponentAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionConstants" executed="True" result="Success" success="True" asserts="7" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionNullableValue" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionNullableValueAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionReference" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionReferenceAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionReferenceCast" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionReferenceCastAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionExtensionMethod" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionExtensionMethodAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionFirst" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionFirstAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionIndex" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionSubCollectionIndexAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionValue" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestFindMemberExpressionValueAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestSignatureGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestSignatureNonGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestSignatureQualifiedGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestUnaryConversionChecked" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ExpressionProcessorFixture.TestUnaryConversionUnchecked" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FunctionsIntegrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.Concat" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.FunctionsToLowerToUpper" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.MonthEqualsDay" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.MonthPartEqualsDayPart" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.OrderByYear" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.OrderByYearPart" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.RoundDecimalWithOneArgument" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.RoundDecimalWithTwoArguments" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.RoundDoubleWithOneArgument" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.RoundDoubleWithTwoArguments" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.SelectAvgYear" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.SelectAvgYearPart" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.SqrtSingleOrDefault" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearEqual" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearIsIn" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearPartEqual" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearPartIsIn" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearPartSingleOrDefault" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.FunctionsIntegrationFixture.YearSingleOrDefault" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntegrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.DetachedQuery_SimpleCriterion" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.FilterNullComponent" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.FunctionsOrder" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.IsType" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.MultiCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.OnClause" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.OverrideEagerJoin" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.RowCount" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.StatelessSession" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.IntegrationFixture.UniqueResult" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectIntegrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectIntegrationFixture.MultipleProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectIntegrationFixture.ProjectTransformToDto" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectIntegrationFixture.SingleProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectionsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.ArbitraryProjections" executed="True" result="Success" success="True" asserts="262" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.InlineProjectionList" executed="True" result="Success" success="True" asserts="259" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.SelectMultipleFunction" executed="True" result="Success" success="True" asserts="82" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.SelectMultipleFunctionOfDateTimeOffset" executed="True" result="Success" success="True" asserts="82" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.SelectSingleFunction" executed="True" result="Success" success="True" asserts="67" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.ProjectionsFixture.SelectSingleFunctionOfDateTimeOffset" executed="True" result="Success" success="True" asserts="67" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="QueryOverFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_Join" executed="True" result="Success" success="True" asserts="69" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_JoinAlias" executed="True" result="Success" success="True" asserts="69" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Alias_JoinCombinations" executed="True" result="Success" success="True" asserts="147" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.AllowSingleCallSyntax" executed="True" result="Success" success="True" asserts="69" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Cachable" executed="True" result="Success" success="True" asserts="45" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneIQueryOver" executed="True" result="Success" success="True" asserts="61" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneIQueryOverWithSubType" executed="True" result="Success" success="True" asserts="54" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CloneQueryOver" executed="True" result="Success" success="True" asserts="61" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.CustomMethodExpression" executed="True" result="Success" success="True" asserts="68" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.DetachedQueryOver" executed="True" result="Success" success="True" asserts="57" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Fetch" executed="True" result="Success" success="True" asserts="47" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.LockAlias" executed="True" result="Success" success="True" asserts="50" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.LockAll" executed="True" result="Success" success="True" asserts="50" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.MultipleCriterionExpression" executed="True" result="Success" success="True" asserts="77" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Negation" executed="True" result="Success" success="True" asserts="69" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OnClause_Alias" executed="True" result="Success" success="True" asserts="303" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OnClause_SubCriteria" executed="True" result="Success" success="True" asserts="303" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OnClauseDetached_Alias" executed="True" result="Success" success="True" asserts="305" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OnClauseDetached_SubCriteria" executed="True" result="Success" success="True" asserts="305" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OrderBy" executed="True" result="Success" success="True" asserts="103" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OrderByFunctionOfDateTimeOffset" executed="True" result="Success" success="True" asserts="76" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OrderByYearFunction" executed="True" result="Success" success="True" asserts="76" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.OrderByYearPartFunction" executed="True" result="Success" success="True" asserts="76" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Paging" executed="True" result="Success" success="True" asserts="43" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.PrivateProperties" executed="True" result="Success" success="True" asserts="85" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Project" executed="True" result="Success" success="True" asserts="65" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.PropertyCriterion_NoAlias" executed="True" result="Success" success="True" asserts="98" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Readonly" executed="True" result="Success" success="True" asserts="44" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.ResultTransformer" executed="True" result="Success" success="True" asserts="54" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntax" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntaxField" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntaxProperty" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntaxStaticField" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_AliasReferenceSyntaxStaticProperty" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_Char" executed="True" result="Success" success="True" asserts="68" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SimpleCriterion_NoAlias" executed="True" result="Success" success="True" asserts="140" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToMany" executed="True" result="Success" success="True" asserts="66" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToManyAlias" executed="True" result="Success" success="True" asserts="66" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToOne" executed="True" result="Success" success="True" asserts="66" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOver_ToOneAlias" executed="True" result="Success" success="True" asserts="66" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.SubCriteria_JoinQueryOverCombinations" executed="True" result="Success" success="True" asserts="137" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.TransformQueryOverToRowCount" executed="True" result="Success" success="True" asserts="78" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.TransformQueryOverToRowCount64" executed="True" result="Success" success="True" asserts="78" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.VisualBasicStringComparison" executed="True" result="Success" success="True" asserts="171" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.QueryOverFixture.Where_BehavesTheSameAs_And" executed="True" result="Success" success="True" asserts="93" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RestrictionsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.ArbitraryCriterion" executed="True" result="Success" success="True" asserts="93" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.DetachedRestrictions" executed="True" result="Success" success="True" asserts="93" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.FunctionExtensions" executed="True" result="Success" success="True" asserts="802" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.FunctionExtensionsProperty" executed="True" result="Success" success="True" asserts="85" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.Junction" executed="True" result="Success" success="True" asserts="93" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.NullRestriction" executed="True" result="Success" success="True" asserts="153" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.RestrictionsExtensions" executed="True" result="Success" success="True" asserts="151" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.SqlOperators" executed="True" result="Success" success="True" asserts="261" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.RestrictionsFixture.SqlOperatorsInline" executed="True" result="Success" success="True" asserts="229" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleIntegrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.SimpleIntegrationFixture.TestQueryOver" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SimpleIntegrationFixture.TestQueryOverAlias" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubqueryFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.DetachedSubquery" executed="True" result="Success" success="True" asserts="187" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.Property" executed="True" result="Success" success="True" asserts="611" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAlias" executed="True" result="Success" success="True" asserts="114" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAliasCriterion" executed="True" result="Success" success="True" asserts="114" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAll" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAllCriterion" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsAllSyntax" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsAllSyntaxCriterion" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSomeSyntax" executed="True" result="Success" success="True" asserts="331" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSomeSyntaxCrtierion" executed="True" result="Success" success="True" asserts="331" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntax" executed="True" result="Success" success="True" asserts="469" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxAlias" executed="True" result="Success" success="True" asserts="258" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxAliasCriterion" executed="True" result="Success" success="True" asserts="258" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyAsSyntaxCriterion" executed="True" result="Success" success="True" asserts="114" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertyCriterion" executed="True" result="Success" success="True" asserts="611" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertySome" executed="True" result="Success" success="True" asserts="331" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.PropertySomeCriterion" executed="True" result="Success" success="True" asserts="331" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.UntypedSubqueries" executed="True" result="Success" success="True" asserts="173" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.UntypedSubqueriesCriterion" executed="True" result="Success" success="True" asserts="173" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.Value" executed="True" result="Success" success="True" asserts="611" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueAll" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueAllCriterion" executed="True" result="Success" success="True" asserts="403" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueCriterion" executed="True" result="Success" success="True" asserts="611" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueSome" executed="True" result="Success" success="True" asserts="331" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubqueryFixture.ValueSomeCriterion" executed="True" result="Success" success="True" asserts="331" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubQueryIntegrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubQueryIntegrationFixture.JoinQueryOver" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubQueryIntegrationFixture.JoinQueryOverProjection" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubQueryIntegrationFixture.JoinQueryOverProjectionAlias" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Criteria.Lambda.SubQueryIntegrationFixture.SubQuery" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectionsTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.CanUseParametersWithProjections" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseBetweenWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseEqPropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseEqWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGePropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGeWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGtPropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseGtWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIdEqWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseInsensitiveLikeWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseInWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIsNotNullWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseIsNullWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLePropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLeWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLikeWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLtPropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseLtWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UseNotEqPropertyWithProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingConditionals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingSqlFunctions_Concat" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Criteria.ProjectionsTest.UsingSqlFunctions_Concat_WithCast" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Deletetransient" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DeleteTransientEntityTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeleteCascadingToCircularity" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToDetachedAssociation" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToPersistentAssociation" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionCascadingToTransientAssociation" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Deletetransient.DeleteTransientEntityTest.TransientEntityDeletionNoCascades" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DialectTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DB2DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.DB2DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.DB2DialectFixture.GetLimitString_NoOffsetSpecified_UsesFetchFirstOnly" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.CurrentTimestampSelection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.GetDialectUntrimmedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.IsQuotedFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.IsQuotedTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameAlreadyQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.QuoteTableNameNotNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteAlreadyQuoted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteArray" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.UnQuoteNeedingQuote" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.DialectFixture.WhenNullOrEmptyIsQuotedFalse" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FirebirdDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.FirebirdDialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.DialectTest.FirebirdDialectFixture.GetTypeName_DecimalWithoutPrecisionAndScale_ReturnsDecimalWithPrecisionOf18AndScaleOf5" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.FirebirdDialectFixture.GetTypeName_DecimalWithPrecisionAndScale_ReturnsPrecisedAndScaledDecimal" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.FirebirdDialectFixture.GetTypeName_DecimalWithPrecisionGreaterThanFbMaxPrecision_ReturnsDecimalWithFbMaxPrecision" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="FunctionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SequenceSupportFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="DialectSupportingSequencesMustFullfillSequenceContract" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.DB2Dialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.DB2400Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.FirebirdDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.GenericDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.InformixDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.InformixDialect0940)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.InformixDialect1000)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.IngresDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.Ingres9Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSql2000Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSql2005Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSql2008Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSql2012Dialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSql7Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSqlAzure2008Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSqlCeDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MsSqlCe40Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MySQLDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MySQL5Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MySQL55Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MySQL55InnoDBDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.MySQL5InnoDBDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.Oracle8iDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.Oracle9iDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.Oracle10gDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.Oracle12cDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.OracleLiteDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.PostgreSQLDialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.PostgreSQL81Dialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.PostgreSQL82Dialect)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SQLiteDialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SybaseASA9Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SybaseASE15Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SybaseSQLAnywhere10Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SybaseSQLAnywhere11Dialect)" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[This test applies only to dialects that support sequences.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SequenceSupportFixture.DialectSupportingSequencesMustFullfillSequenceContract(NHibernate.Dialect.SybaseSQLAnywhere12Dialect)" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SerializableTypesFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DialectTest.FunctionTests.SerializableTypesFixture.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubstringSupportFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="DialectShouldUseCorrectSubstringImplementation" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.DB2Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.DB2400Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.FirebirdDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.GenericDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.InformixDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.InformixDialect0940)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.InformixDialect1000)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.IngresDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.Ingres9Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSql2000Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSql2005Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSql2008Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSql2012Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSql7Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSqlAzure2008Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSqlCeDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MsSqlCe40Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MySQLDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MySQL5Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MySQL55Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MySQL55InnoDBDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.MySQL5InnoDBDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.Oracle8iDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.Oracle9iDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.Oracle10gDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.Oracle12cDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.OracleLiteDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.PostgreSQLDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.PostgreSQL81Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.PostgreSQL82Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SQLiteDialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SybaseASA9Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SybaseASE15Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SybaseSQLAnywhere10Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SybaseSQLAnywhere11Dialect)" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.DialectTest.FunctionTests.SubstringSupportFixture.DialectShouldUseCorrectSubstringImplementation(NHibernate.Dialect.SybaseSQLAnywhere12Dialect)" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Ingres9DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.Ingres9DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LockHintAppenderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.AppendHintToJoinedTableAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.AppendHintToSingleTableAlias" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.AppendHintToUnionTableAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleEscapingInSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleEscapingWithSquareBracketsInSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleEscapingWithWhitespacesInSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleExplicitDbNameWithoutSchemaName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleExplicitSchemas" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleExplicitSchemasAndDbNames" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleExplicitSchemasAndDbNamesWithSpacesBetweenNameParts" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldHandleMultilineQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.LockHintAppenderFixture.ShouldIgnoreCasing" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSql2005DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.DontReturnLimitStringForStoredProcedureCall" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetIfExistsDropConstraintTest_For_Schema_other_than_dbo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetIfExistsDropConstraintTest_without_schema" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetLimitStringWithSqlComments" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.GetLimitStringWithSqlCommonTableExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.NH1187" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.NH2809" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.OnlyOffsetLimit" description="should use only TOP clause if there is no offset" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedAndParenthesisStringTokenizerTests_WithComma_InQuotes" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedAndParenthesisStringTokenizerTests_WithFunctionCallContainingComma" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2005DialectFixture.QuotedStringTokenizerTests" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSql2012DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.DontReturnLimitStringForStoredProcedureCall" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.GetLimitStringWithInnerOrder" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.GetLimitStringWithSqlComments" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.GetLimitStringWithSqlCommonTableExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSql2012DialectFixture.OnlyOffsetLimit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSqlCe40DialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSqlCe40DialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlCe40DialectFixture.GetLimitStringWithDummyOrder" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsSqlDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.CurrentTimestampSelection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.GetDialectUntrimmedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.IsQuotedFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.IsQuotedTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameAlreadyQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.QuoteTableNameNotNeeded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteAlreadyQuoted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteArray" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.UnQuoteNeedingQuote" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.DialectFixture.WhenNullOrEmptyIsQuotedFalse" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.DialectTest.MsSqlDialectFixture.TimestampRounding" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="oracle12cDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.oracle12cDialectFixture.GetLimitString" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.DialectTest.oracle12cDialectFixture.GetLimitStringWithInnerOrder" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.oracle12cDialectFixture.GetLimitStringWithSqlComments" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.oracle12cDialectFixture.OnlyOffsetLimit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Oracle8iDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithOffsetAndLimitAndTableNotStartingWithSelectKeyword" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithOffsetAndLimitAndTableNotStartingWithSelectKeywordAndDifferentCasing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithOffsetAndLimitAndTableStartingWithSelectKeyword" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithOffsetAndLimitAndTableStartingWithSelectKeywordAndDifferentCasing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithTableNotStartingWithSelectKeyword" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithTableNotStartingWithSelectKeywordAndDifferentCasing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithTableStartingWithSelectKeyword" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.Oracle8iDialectFixture.GetLimitStringWithTableStartingWithSelectKeywordAndDifferentCasing" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SchemaTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ColumnMetaDataFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="SetColumnSizeAndNumericalPrecision" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.DialectTest.SchemaTests.ColumnMetaDataFixture.SetColumnSizeAndNumericalPrecision(null,null,0,0)" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.DialectTest.SchemaTests.ColumnMetaDataFixture.SetColumnSizeAndNumericalPrecision(&quot;13&quot;,&quot;7&quot;,13,7)" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.DialectTest.SchemaTests.ColumnMetaDataFixture.SetColumnSizeAndNumericalPrecision(&quot;5000000000&quot;,null,int.MaxValue,0)" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.DialectTest.SchemaTests.ColumnMetaDataFixture.SetColumnSizeAndNumericalPrecision(null,&quot;7&quot;,0,7)" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.DialectTest.SchemaTests.ColumnMetaDataFixture.SetColumnSizeAndNumericalPrecision(&quot;13&quot;,null,13,0)" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlCEDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.BinaryBlob_mapping_to_SqlCe_types" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedCatalogSchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedSchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedSchemaNameWithUnqoutedTableInSqlCE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedTableNameWithoutSchemaWithSqlCE" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.QuotedTableNameWithSqlCE" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SqlCEDialectFixture.SchemaNameWithSqlCE" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLiteDialectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedCatalogSchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedSchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedSchemaNameWithUnqoutedTableInSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedTableNameWithoutSchemaWithSqlLite" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.QuotedTableNameWithSqlLite" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.SchemaNameWithSqlLite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.SupportsSubSelect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DialectTest.SQLiteDialectFixture.UseLimit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DriverTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DbProviderFactoryDriveConnectionCommandProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.DbProviderFactoryDriveConnectionCommandProviderTest.WhenCreatedWithNullDbFactoryThenThrows" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FirebirdClientDriverFixture" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.AdjustCommand_InsertWithParamsInSelect_ParameterIsCasted" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.AdjustCommand_IntParametersWithinConditionalSelect_ThenParameterIsWrappedByAnIntCastStatement" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.AdjustCommand_ParameterWithinSelectAddFunction_ParameterIsCasted" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.AdjustCommand_ParameterWithinSelectConcat_ParameterIsCasted" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.AdjustCommand_StringParametersWithinConditionalSelect_ThenParameterIsWrappedByAVarcharCastStatement" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.ConnectionPooling_OpenThenCloseThenOpenAnotherOne_OnlyOneConnectionIsPooled" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.FirebirdClientDriverFixture.ConnectionPooling_OpenThenCloseTwoAtTheSameTime_TowConnectionsArePooled" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Applies only to Firebird]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullReferenceFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.NullReferenceFixture.NamedParameterAssignedNoError" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.DriverTest.NullReferenceFixture.NoParameterNameNullReference" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OracleClientDriverFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.OracleClientDriverFixture.CommandClassName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.OracleClientDriverFixture.ConnectionClassName" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OracleDataClientDriverFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="ReflectionBasedDriverTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedNoWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithDbFactoryThenCanReturnCommand" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithGoodDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNoDbFactoryThenCanReturnConnection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNoDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DriverTest.ReflectionBasedDriverTest.WhenCreatedWithNullAssemblyAndGoodDbProviderThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Sql2008DateTime2Test" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.Sql2008DateTime2Test.Crud" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.ArgumentException : No mapping exists from DbType DateTime2 to a known OdbcType.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlClientDriverFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.SqlClientDriverFixture.Crud" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.DriverTest.SqlClientDriverFixture.QueryPlansAreReused" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Test designed for SqlClientDriver only]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlServerCeDriverFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.DriverTest.SqlServerCeDriverFixture.Query" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.DriverTest.SqlServerCeDriverFixture.SaveLoad" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.DriverTest.SqlServerCeDriverFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DynamicEntity" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Interceptor" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InterceptorDynamicEntity" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicEntity.Interceptor.InterceptorDynamicEntity.It" executed="True" result="Success" success="True" asserts="9" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Tuplizer" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TuplizerDynamicEntity" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicEntity.Tuplizer.TuplizerDynamicEntity.It" executed="True" result="Success" success="True" asserts="12" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="DynamicProxyTests" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="GenericMethodsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GenericMethodShouldBeProxied" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxyBasicGenericMethod" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxyGenericMethodWithInterfaceConstraint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxyGenericMethodWithReferenceTypeAndInterfaceConstraint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxyMethodWithDefaultConstructorConstraint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxyMethodWithGenericBaseClassConstraint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethod" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaint2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaint3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaint4" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaint5" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaintBase" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaintBase2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaintBase3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaintBase4" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericConstaintBase5" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceBaseConstaint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceBaseConstaint2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceBaseConstaint3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceBaseConstaint4" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceBaseConstaint5" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceConstaint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceConstaint2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceConstaint3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceConstaint4" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.CanProxySelfCastingMethodWithGenericInterfaceConstaint5" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.GenericInterfaceConstraint" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.GenericMethodsTests.GenericMethodShouldBeProxied.GenericTypeConstraint" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="InterfaceProxySerializationTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProxyFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicProxyTests.InterfaceProxySerializationTests.ProxyFixture.ExceptionStackTrace" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.InterfaceProxySerializationTests.ProxyFixture.Proxy" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.InterfaceProxySerializationTests.ProxyFixture.ProxySerialize" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.DynamicProxyTests.InterfaceProxySerializationTests.ProxyFixture.SerializeNotFoundProxy" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InterfaceWithEqualsGethashcodeTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DynamicProxyTests.InterfaceWithEqualsGethashcodeTests.WhenProxyAnInterfaceShouldInterceptEquals" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LazyFieldInterceptorSerializable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DynamicProxyTests.LazyFieldInterceptorSerializable.LazyFieldInterceptorIsBinarySerializable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DynamicProxyTests.LazyFieldInterceptorSerializable.LazyFieldInterceptorMarkedAsSerializable" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PeVerifyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.DynamicProxyTests.PeVerifyFixture.VerifyClassWithInternalConstructor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DynamicProxyTests.PeVerifyFixture.VerifyClassWithNoDefaultConstructor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DynamicProxyTests.PeVerifyFixture.VerifyClassWithPrivateConstructor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DynamicProxyTests.PeVerifyFixture.VerifyClassWithProtectedConstructor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.DynamicProxyTests.PeVerifyFixture.VerifyClassWithPublicConstructor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ProxiedMembers" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicProxyTests.ProxiedMembers.Fixture.Proxy" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MetodWithRefDictionaryTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.DynamicProxyTests.ProxiedMembers.MetodWithRefDictionaryTest.Proxy" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EngineTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CallableParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineHasNoReturn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineHasReturn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineIsCallable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanDetermineIsNotCallable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallableFunctionName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallableFunctionNameWithoutParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.CallableParserFixture.CanFindCallablePackageFunctionName" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQueryNonScalarReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryCollectionReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryCollectionReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryJoinReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryJoinReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryRootReturnEqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryNonScalarReturnTest.NativeSQLQueryRootReturnHashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSqlQueryReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSqlQueryReturnTest.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQueryScalarReturnTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryScalarReturnTest.EqualsByAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQueryScalarReturnTest.HashCodeByAlias" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NativeSQLQuerySpecificationTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.Equality" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.HashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeReturns_NotEqual" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeReturns_NotEqualHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeSpace_NotEqual" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.NativeSQLQuerySpecificationTest.WhenChangeSpace_NotEqualHashCode" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParameterParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterAnyComment" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterComment" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.ParameterParserFixture.CanFindParameterAfterInlineComment" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypedValueFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.EqualsCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.ToStringWithNullValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.EngineTest.TypedValueFixture.WhenTheTypeIsAnArray_ChoseTheDefaultComparer" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="EntityModeTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Map" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Basic" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="DynamicClassFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Map.Basic.DynamicClassFixture.ShouldWorkWithCriteria" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.EntityModeTest.Map.Basic.DynamicClassFixture.ShouldWorkWithHQL" executed="True" result="Success" success="True" asserts="8" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Multi" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MultiRepresentationFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.PocoRetreival" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlHQL" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlRetreival" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.EntityModeTest.Multi.MultiRepresentationFixture.XmlSave" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Xml" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Accessors" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.CompanyElementGeneration" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.LongAttributeExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.LongElementAttributeExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.StringElementExtraction" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Accessors.XmlAccessorFixture.StringTextExtraction" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Basic" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Basic.XmlFixture.CompositeId" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Basic.XmlFixture.MapIndexEmision" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Many2One" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="XmlManyToOneFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Many2One.XmlManyToOneFixture.XmlManyToOne" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.EntityModeTest.Xml.Many2One.XmlManyToOneFixture.XmlOneToMany" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Not supported yet.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Events" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Collections" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Association" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="Bidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="ManyToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="BidirectionalManyToManyBagToSetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="72" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="117" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="22" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="29" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="53" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="43" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManyBagToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="33" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalManyToManySetToSetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="47" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="72" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="117" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="22" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="29" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="38" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="53" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="43" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="33" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.ManyToMany.BidirectionalManyToManySetToSetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="33" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="OneToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManyBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="27" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="27" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="42" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="77" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="14" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManyBagSubclassCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="27" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="27" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="42" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="77" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="14" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManyBagSubclassCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="BidirectionalOneToManySetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="42" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="77" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="28" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="13" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="8" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Bidirectional.OneToMany.BidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="Namespace" name="Unidirectional" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="Namespace" name="ManyToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="UnidirectionalManyToManyBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.ManyToMany.UnidirectionalManyToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                              <test-suite type="Namespace" name="OneToMany" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-suite type="TestFixture" name="UnidirectionalOneToManyBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManyBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                  <test-suite type="TestFixture" name="UnidirectionalOneToManySetCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                                    <results>
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractAssociationCollectionEventFixture.DeleteParentButNotChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="8" />
                                      <test-case name="NHibernate.Test.Events.Collections.Association.Unidirectional.OneToMany.UnidirectionalOneToManySetCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                                    </results>
                                  </test-suite>
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Values" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ValuesBagCollectionEventFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentAndChild" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNoChildren" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.DeleteParentWithNullChildren" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveAllChildrenToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveChildToDifferentParent" executed="True" result="Success" success="True" asserts="32" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParent" executed="True" result="Success" success="True" asserts="37" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.MoveCollectionToDifferentParentFlushMoveToDifferentParent" executed="True" result="Success" success="True" asserts="67" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentEmptyChildren" executed="True" result="Success" success="True" asserts="16" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.SaveParentOneChild" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChild" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNoneToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChild" executed="True" result="Success" success="True" asserts="19" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentNullToOneChildDiffCollection" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionDiffChild" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildDiffCollectionSameChild" executed="True" result="Success" success="True" asserts="23" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByClear" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneChildToNoneByRemove" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoChildren" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentOneToTwoSameChildren" executed="True" result="Success" success="True" asserts="18" />
                              <test-case name="NHibernate.Test.Events.Collections.Values.ValuesBagCollectionEventFixture.AbstractCollectionEventFixture.UpdateParentTwoChildrenToOne" executed="True" result="Success" success="True" asserts="18" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DisposableListenersTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Events.DisposableListenersTest.WhenCloseSessionFactoryThenCallDisposeOfListener" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="PostEvents" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PostUpdateFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.ExplicitUpdate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.ImplicitFlush" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.UpdateDetachedObject" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.UpdateDetachedObjectWithLock" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Events.PostEvents.PostUpdateFixture.WithDetachedObject" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ExceptionsTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NullQueryTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.NullQueryTest.BadGrammar" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyAccessExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.PropertyAccessExceptionFixture.MessageWithoutTypeCtor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLExceptionConversionTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExceptionsTest.SQLExceptionConversionTest.BadGrammar" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[  Bad conversion [ERROR [42S02] [Microsoft][SQL Native Client][SQL Server]Invalid object name 'tbl_no_there'.]
  Expected: <NHibernate.Exceptions.SQLGrammarException>
  But was:  <NHibernate.Exceptions.GenericADOException>

TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ExceptionsTest.SQLExceptionConversionTest.IntegrityViolation" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[  Bad conversion [ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Must declare the scalar variable "@p1".]
  Expected: <NHibernate.Exceptions.ConstraintViolationException>
  But was:  <NHibernate.Exceptions.GenericADOException>

TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ExpressionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BetweenExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.BetweenExpressionFixture.BetweenSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedCriteriaFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.DetachedCriteriaFixture.CanUseDetachedCriteriaToQuery" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.InExpressionFixture.InEmptyList" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.InExpressionFixture.InSqlFunctionTest" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.ExpressionTest.InExpressionFixture.InSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InsensitiveLikeExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.InsensitiveLikeExpressionFixture.InsentitiveLikeSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JunctionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.GetTypedValues" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.SqlString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.JunctionFixture.ToStringTest" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LogicalExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.LogicalExpressionFixture.LogicalSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NotExpressionFixture.NotSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotNullExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NotNullExpressionFixture.NotNullSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.NullExpressionFixture.NullSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OperatorOverloadingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseAndOperatorForExpressions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseNotOperatorForExpressions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.OperatorOverloadingFixture.CanUseOrOperatorForEpressions" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Projection" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProjectionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.AvgTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.CountDistinctTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.CountTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.DistinctTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.GroupPropertyTest" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.IdTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.MaxTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.MinTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.NvlTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.PropertyTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.RowCountTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SqlGroupProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SqlProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionFixture.SumTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ProjectionSqlFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.QueryTest1" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.QueryTestWithStrongTypeReturnValue" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.ExpressionTest.Projection.ProjectionSqlFixture.SelectSqlProjectionTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.PropertyExpressionFixture.SqlStringTest" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryByExampleTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeAnywhere" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeEnd" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestEnableLikeWithMatchmodeStart" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestExcludingQBE" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestJunctionNotExpressionQBE" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.QueryByExampleTest.TestSimpleQBE" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RestrictionsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.RestrictionsFixture.LikeShouldContainsMatch" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.MisspelledPropertyWithNormalizedEntityPersister" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.SimpleDateExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.SimpleSqlStringTest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ExpressionTest.SimpleExpressionFixture.TestQuoting" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLExpressionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.NoParamsSqlStringTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.StraightSqlTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ExpressionTest.SQLExpressionFixture.WithParameterTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SubQueries" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SubQueriesSqlFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.ExpressionTest.SubQueries.SubQueriesSqlFixture.CanQueryBlogByItsPosts" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.ExpressionTest.SubQueries.SubQueriesSqlFixture.ComplexSubQuery_QueryingByGrandChildren" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Extendshbm" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ExtendsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.AllInOne" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.AllSeparateInOne" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageFailureExpected" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageFailureExpectedDiffFiles" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.EntityNamesWithPackageWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.JoinedSubclassAndEntityNamesOnly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.JoinedSubclassAndEntityNamesOnlyWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.MissingSuper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.NwaitingForSuper" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.OutOfOrder" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Extendshbm.ExtendsFixture.UnionSubclass" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Extralazy" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ExtraLazyFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.ExtraLazyWithWhereClause" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.Get" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.Extralazy.User#gavin][SQL: SELECT user0_.Name as Name999_0_, user0_.Password as Password999_0_ FROM users user0_ WHERE user0_.Name=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.IndexFormulaMap" executed="True" result="Failure" success="False" asserts="3">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.Extralazy.User#gavin][SQL: SELECT user0_.Name as Name999_0_, user0_.Password as Password999_0_ FROM users user0_ WHERE user0_.Name=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.OrphanDelete" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.RemoveClear" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.Extralazy.User#gavin][SQL: SELECT user0_.Name as Name999_0_, user0_.Password as Password999_0_ FROM users user0_ WHERE user0_.Name=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Extralazy.ExtraLazyFixture.SQLQuery" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="FilterTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ConfigFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddClassWithFilters" description="Add a class with filters without condition should not Throw exceptions and add secondpass tasks." executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddClassWithFiltersWithoutFilterDef" description="Add a class with filters without condition should Throw exceptions at secondpass." executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.AddFilterDefToClassWithFilters" description="Add filters-def should change conditions of class filters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.ClassConditionInBothSides" description="Writing the condition in both sides should not change the condition defined in the class." executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.ClassNoSecondPass" description="Class filter with condition does not add secondpass and add an invalid filter-def" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.DuplicatedFilterDef" description="Filter-def duplication should Throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.FilterDefWithoutReference" description="Filter-def without reference to it should Throw exception" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.MissedFilterDef" description="Add a filtered class with condition but without a filter-def should Throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.WrongFilterDefInClass" description="Filter def without condition in both sides should throw exception" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.FilterTest.ConfigFixture.WrongFilterDefInClassSeconPass" description="Filter def without condition in both sides should throw exception even in secondpass" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DynamicFilterTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.CombinedClassAndCollectionFiltersEnabled" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.CriteriaQueryFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.FiltersWithQueryCache" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.GetFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.HqlFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.InStyleFilterParameter" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyBase" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyBaseThruCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnLoad" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyFilterOnQuery" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.ManyToManyOnCollectionLoadAfterHQL" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.OneToManyFilters" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.FilterTest.DynamicFilterTest.SecondLevelCachedCollectionsFiltering" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.FilterTest.Salesperson][SQL: INSERT INTO SALES_PERSON (NAME, REG, DEPT_ID, [hire dt]) VALUES (?, ?, ?, ?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterBinaryParameterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterBinaryParameterTest.NH882" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterConfig" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.FilterDefinitionsLoadedCorrectly" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.FiltersLoaded" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.FilterTest.FilterConfig.TestFilterThrowsWithNoParameterSet" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FilterSecondPassArgsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.FilterTest.FilterSecondPassArgsFixture.CtorProtection" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Generatedkeys" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ByTrigger" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GeneratedIdentityFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture.GetGeneratedKeysSupport" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Generatedkeys.ByTrigger.GeneratedIdentityFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Identity" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IdentityGeneratedKeysTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.IdentityColumnGeneratedIds" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransaction" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedFromManyToOne" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToInverseCollection" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToManyToOne" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.IdentityGeneratedKeysTest.PersistOutsideTransactionCascadedToNonInverseCollection" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SimpleIdentityGeneratedFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Identity.SimpleIdentityGeneratedFixture.SequenceIdentityGenerator" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Select" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SelectGeneratorTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Generatedkeys.Select.SelectGeneratorTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Select.SelectGeneratorTest.GetGeneratedKeysSupport" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Generatedkeys.Select.SelectGeneratorTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Seqidentity" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SequenceIdentityFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Generatedkeys.Seqidentity.SequenceIdentityFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Generatedkeys.Seqidentity.SequenceIdentityFixture.SequenceIdentityGenerator" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Generatedkeys.Seqidentity.SequenceIdentityFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GeneratedTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="PartiallyGeneratedComponentTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.PartiallyGeneratedComponentTest.PartialComponentGeneration" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestampGeneratedValuesWithCachingTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TimestampGeneratedValuesWithCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TriggerGeneratedValuesWithCachingTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TriggerGeneratedValuesWithoutCachingTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GeneratedTest.TriggerGeneratedValuesWithoutCachingTest.AbstractGeneratedPropertyTest.GeneratedProperty" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GenericTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="BagGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BagGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.BagGeneric.BagGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.BagGeneric.BagGenericFixture.Simple" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EnumGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EnumGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.EnumGeneric.EnumGenericFixture.MapsToEnum" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.EnumGeneric.EnumGenericFixture.Persists" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="IdBagGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IdBagGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.IdBagGeneric.IdBagGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.IdBagGeneric.IdBagGenericFixture.Simple" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ListGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ListGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.ListGeneric.ListGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.ListGeneric.ListGenericFixture.Simple" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="MapGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MapGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.Simple" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.SimpleTypes" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.SortedCollections" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.GenericTest.MapGeneric.MapGenericFixture.UpdatesToSimpleMap" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Methods" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.Criteria" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.Filter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.FilterEnumerable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.QueryEnumerable" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.GenericTest.Methods.Fixture.QueryList" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="OrderedSetGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="OrderedSetFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.OrderedSetGeneric.OrderedSetFixture.OrderedSetIsInOrder" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Overall" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.Overall.Fixture.CRUD" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.GenericTest.Overall.Fixture.CRUDAB" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SetGeneric" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SetGenericFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.GenericTest.SetGeneric.SetGenericFixture.Copy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.GenericTest.SetGeneric.SetGenericFixture.Simple" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="GhostProperty" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="GhostPropertyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.CanGetActualValueFromLazyManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.GhostPropertyMaintainIdentityMap" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.GhostPropertyMaintainIdentityMapUsingGet" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This shows an expected edge case]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.ShouldGenerateErrorForNonAutoPropGhostProp" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.WhenGetThenLoadOnlyNoLazyPlainProperties" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.WillLoadGhostAssociationOnAccess" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.GhostProperty.GhostPropertyFixture.WillNotLoadGhostPropertyByDefault" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Hql" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Ast" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BulkManipulation" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteNonExistentEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteOnDiscriminatorSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#5][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteOnJoinedSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#10][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteOnMappedJoin" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#15][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteRestrictedOnManyToOne" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#20][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteSyntaxWithCompositeId" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteUnionSubclassAbstractRoot" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#25][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteUnionSubclassConcreteSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#30][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteUnionSubclassLeafSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#35][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.DeleteWithSubquery" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.IncorrectSyntax" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.IncrementCounterVersion" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.IncrementTimestampVersion" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertAcrossMappedJoinFails" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#40][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertIntoSuperclassPropertiesFails" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#45][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertWithGeneratedTimestampVersion" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertWithGeneratedVersionAndId" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertWithManyToOne" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#50][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertWithMismatchedTypes" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#55][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.InsertWithSelectListUsingJoins" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.SimpleDeleteOnAnimal" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#60][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.SimpleInsert" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#65][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateMultiplePropertyOnAnimal" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#70][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateNonExistentEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnAnimal" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#75][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnComponent" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Human#76][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnDiscriminatorSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#81][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnImplicitJoinFails" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Human#82][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnMammal" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#87][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateOnManyToOne" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateSetNullOnDiscriminatorSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#92][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateSetNullOnJoinedSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#97][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateSetNullUnionSubclass" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Dog#102][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.UpdateWithWhereExistsSubquery" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Human#103][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.BulkManipulation.WrongPropertyNameThrowQueryException" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="HqlFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.CanParseMaxLong" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.CaseClauseInSelect" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.InsertIntoFromSelect_WithSelectClauseParameters" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.InvalidJoinOnProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.MultipleParametersInCaseStatement" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.OrderByPropertiesImplicitlySpecifiedInTheSelect" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.ParameterInCaseThenAndElseClausesWithCast" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.ParameterInCaseThenClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.ReturnMetadata" executed="True" result="Success" success="True" asserts="22" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.SubselectAddition" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.SumShouldReturnDouble" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.HqlFixture.UnaryMinusBeforeParenthesesHandledCorrectly" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LimitClauseFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.None" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.Skip" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.SkipTake" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.SkipTakeWithParameter" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.SkipTakeWithParameterList" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.SkipWithParameter" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.Take" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.TakeSkip" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.LimitClauseFixture.TakeWithParameter" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.Hql.Ast.LimitClauseFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OrderByTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderByAggregatedArgAliasRef" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#1][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderByComponentDescNoSelectAliasRefFailureExpected" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#2][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderByComponentDescSelectAliasRefFailureExpected" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#3][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderByEntityWithFetchJoinedCollection" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#4][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderByNoSelectAliasRef" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#5][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderBySelectAliasRef" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#6][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderBySelectNewArgAliasRef" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#7][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.OrderByTest.TestOrderBySelectNewMapArgAliasRef" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Mammal#8][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : NHibernate.StaleStateException : Unexpected row count: 0; expected: 1]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="QuerySubstitutionTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.QuerySubstitutionTest.WhenExecutedThroughSessionThenUseSubstitutions" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.QuerySubstitutionTest.WhenExecutedThroughSessionThenUseSubstitutionsWithString" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.QuerySubstitutionTest.WhenSubstitutionsConfiguredThenUseItInTranslation" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.QuerySubstitutionTest.WhenSubstitutionsWithStringConfiguredThenUseItInTranslation" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SqlTranslationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.SqlTranslationFixture.CaseClauseWithMath" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Hql.Ast.SqlTranslationFixture.ParseFloatConstant" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Hql.Ast.SqlTranslationFixture.Union" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WithClauseFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Hql.Ast.WithClauseFixture.InvalidWithSemantics" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Hql.Ast.WithClauseFixture.WithClause" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Human#1][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Hql.Ast.WithClauseFixture.WithClauseFailsWithFetch" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Hql.Ast.Human#2][SQL: INSERT INTO Mammal (pregnant, birthdate, animal) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HQLFunctions" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Abs" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateAvg" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateCount" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateMax" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateMin" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregatesAndMathNH959" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateSum" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.AggregateSumNH1100" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Bit_length" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Cast" executed="True" result="Error" success="False" asserts="20">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(?+animal0_.BodyWeight as INT) as col_0_0_ from Animal animal0_ group by cast(?+animal0_.BodyWeight as INT) having cast(?+animal0_.BodyWeight as INT)>0 ]
  Name:aParam - Value:10
[SQL: select cast(?+animal0_.BodyWeight as INT) as col_0_0_ from Animal animal0_ group by cast(?+animal0_.BodyWeight as INT) having cast(?+animal0_.BodyWeight as INT)>0]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Animal.BodyWeight' is invalid in the HAVING clause because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.CastNH1446" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.CastNH1979" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Coalesce" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Concat" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Current_TimeStamp" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Current_TimeStamp_Offset" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select sysdatetimeoffset() as col_0_0_ from Animal animal0_ ]
[SQL: select sysdatetimeoffset() as col_0_0_ from Animal animal0_]
  ----> System.FormatException : Input string '2016-01-29 02:19:44.6056250 -06:00' was not in the correct format.
  ----> System.InvalidCastException : Specified cast is not valid.]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.DayMonthYear" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Extract" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.HourMinuteSecond" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Iif" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Length" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Locate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Lower" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Mod" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.NH1725" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Nullif" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.ParameterLikeArgument" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet!]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Sqrt" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Str" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.SubString" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.SubStringTwoParameters" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Trim" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Hql.HQLFunctions.Upper" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleFunctionsTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.AnsiSubstring" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.CastFunc" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicAggregate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicAvg" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicCount" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.ClassicSum" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.NoArgFunction" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.Nvl" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.PositionSubstring" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.StandardFunction" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SimpleFunctionsTest.VarArgsFunction" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlCommentsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.SqlCommentsFixture.CommentsInQuery" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLFunctionTemplateTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.ArgsDiffParams" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.RepetedParams" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Hql.SQLFunctionTemplateTest.Simple" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="IdGen" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Enhanced" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Forcedtable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BasicForcedTableSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Forcedtable.BasicForcedTableSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="23" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="HiLoForcedTableSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Forcedtable.HiLoForcedTableSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="69" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PooledForcedTableSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Forcedtable.PooledForcedTableSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="58" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OptimizerTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestBasicHiLoOptimizerUsage" executed="True" result="Success" success="True" asserts="30" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestBasicNoOptimizerUsage" executed="True" result="Success" success="True" asserts="24" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestBasicPooledLoOptimizerUsage" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestBasicPooledOptimizerUsage" executed="True" result="Success" success="True" asserts="15" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestRecoveredPooledLoOptimizerUsage" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestRecoveredPooledOptimizerUsage" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestSubsequentPooledLoOptimizerUsage" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.OptimizerTests.TestSubsequentPooledOptimizerUsage" executed="True" result="Success" success="True" asserts="14" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Sequence" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BasicSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Sequence.BasicSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="21" />
                            </results>
                          </test-suite>
                          <test-suite type="ParameterizedFixture" name="DefaultOptimizedSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="DefaultOptimizedSequenceTest(False,NHibernate.Id.Enhanced.OptimizerFactory+PooledOptimizer)" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.IdGen.Enhanced.Sequence.DefaultOptimizedSequenceTest(False,NHibernate.Id.Enhanced.OptimizerFactory+PooledOptimizer).CorrectOptimizerChosenAsDefault" executed="True" result="Success" success="True" asserts="2" />
                                </results>
                              </test-suite>
                              <test-suite type="TestFixture" name="DefaultOptimizedSequenceTest(True,NHibernate.Id.Enhanced.OptimizerFactory+PooledLoOptimizer)" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.IdGen.Enhanced.Sequence.DefaultOptimizedSequenceTest(True,NHibernate.Id.Enhanced.OptimizerFactory+PooledLoOptimizer).CorrectOptimizerChosenAsDefault" executed="True" result="Success" success="True" asserts="2" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="HiLoSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Sequence.HiLoSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="57" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PooledSequenceTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Sequence.PooledSequenceTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="46" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SequenceStyleConfigUnitFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultedSequenceBackedConfiguration" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultedTableBackedConfiguration" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultOptimizerBasedOnIncrementBackedBySequence" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.DefaultOptimizerBasedOnIncrementBackedByTable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.ExplicitOptimizerWithExplicitIncrementSize" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.ForceTableUse" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.HiLoOptimizerUsedWithExplicitInitialValueUsesPooledSequenceGenerator" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.NonPoolOptimizerUsedWithExplicitInitialValueUsesPooledSequenceGenerator" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.PoolOptimizerUsedWithExplicitIncrementAndInitialValueOfOneUsesNonPooledSequenceGenerator" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.IdGen.Enhanced.SequenceStyleConfigUnitFixture.PreferPooledLoSettingHonored" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Table" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="BasicTableTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Table.BasicTableTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="22" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="HiLoTableTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Table.HiLoTableTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="57" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PooledLoTableTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Table.PooledLoTableTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="46" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="PooledTableTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.IdGen.Enhanced.Table.PooledTableTest.TestNormalBoundary" executed="True" result="Success" success="True" asserts="46" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NativeGuid" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NativeGuidFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.NativeGuid.NativeGuidFixture.Crd" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NativeGuidGeneratorFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.IdGen.NativeGuid.NativeGuidGeneratorFixture.ReturnedValueIsGuid" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="IdTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AssignedFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.InsertCascade" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.InsertCascadeNoWarning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveNoWarning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveOrUpdate_Save" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.SaveOrUpdate_Update" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.IdTest.AssignedFixture.UpdateNoWarning" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt16Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt16Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt32Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt32Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="HiLoTableGeneratorInt64Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.HiLoTableGeneratorInt64Fixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentifierGeneratorFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.IdentifierGeneratorFactoryFixture.NonCreatableStrategy" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleHiLoPerTableGeneratorTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not supported yet]]></message>
                    </reason>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableGeneratorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.IdTest.TableGeneratorFixture.SelectAndUpdateStringContainCustomWhere" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UseIdentifierRollbackTest" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not supported yet]]></message>
                    </reason>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Immutable" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="EntityWithMutableCollection" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Inverse" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="EntityWithInverseManyToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddExistingManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddNewManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.DeleteManyToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMergeBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdateBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithInverseOneToManyJoinTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.DeleteOneToManyElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.RemoveOneToManyElementByDelete" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.RemoveOneToManyElementUsingMerge" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyJoinTest.RemoveOneToManyElementUsingUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithInverseOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddExistingOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.EntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithInverseManyToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddExistingManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddNewManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.DeleteManyToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMergeBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdateBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseManyToManyTest.AbstractEntityWithManyToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithInverseOneToManyFailureExpectedTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with versioned entity with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with versioned entity with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with versioned entity with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.RemoveOneToManyElementUsingMerge" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with versioned entity with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyFailureExpectedTest.RemoveOneToManyElementUsingUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with versioned entity with inverse collection]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithInverseOneToManyJoinFailureExpectedTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.DeleteOneToManyElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.RemoveOneToManyElementByDelete" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.RemoveOneToManyElementUsingMerge" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinFailureExpectedTest.RemoveOneToManyElementUsingUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[known to fail with inverse collection]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithInverseOneToManyJoinTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.DeleteOneToManyElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyJoinTest.RemoveOneToManyElementByDelete" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithInverseOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddExistingOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.Inverse.VersionedEntityWithInverseOneToManyTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NonInverse" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="EntityWithNonInverseManyToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddExistingManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddNewManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.DeleteManyToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMergeBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdateBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithNonInverseManyToManyUnidirTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.AddExistingManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.AddNewManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.DeleteManyToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementByDelete" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMergeBothSides" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdateBothSides" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseManyToManyUnidirTest.AbstractEntityWithManyToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithNonInverseOneToManyJoinTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.DeleteOneToManyElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementByDelete" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementUsingMerge" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementUsingUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithNonInverseOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddExistingOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="EntityWithNonInverseOneToManyUnidirTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.AddExistingOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="8" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.EntityWithNonInverseOneToManyUnidirTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="10" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithNonInverseManyToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddExistingManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.AddNewManyToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithEmptyManyToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.CreateWithNonEmptyManyToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.DeleteManyToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.ManyToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="17" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.MoveManyToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingMergeBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.RemoveManyToManyElementUsingUpdateBothSides" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseManyToManyTest.AbstractEntityWithManyToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="12" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithNonInverseOneToManyJoinTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.AddExistingOneToManyElementToPersistentEntity" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.DeleteOneToManyElement" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementByDelete" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementUsingMerge" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyJoinTest.RemoveOneToManyElementUsingUpdate" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[Fails. Passes in Hibernate because nullability check on Contract.Party (with JOIN mapping) is skipped due to 'check_nullability' setting not implemented by NH.]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="VersionedEntityWithNonInverseOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddExistingOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.AddNewOneToManyElementToPersistentEntity" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionMergeWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithEmptyOneToManyCollectionUpdateWithExistingElement" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionMergeWithNewElement" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfExisting" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionOfNew" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.CreateWithNonEmptyOneToManyCollectionUpdateWithNewElement" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyElement" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.DeleteOneToManyOrphan" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToExistingEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.MoveOneToManyElementToNewEntityCollection" executed="True" result="Success" success="True" asserts="15" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithMerge" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.OneToManyCollectionOptimisticLockingWithUpdate" executed="True" result="Success" success="True" asserts="7" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementByDelete" executed="True" result="Success" success="True" asserts="11" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyElementUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingMerge" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.RemoveOneToManyOrphanUsingUpdate" executed="True" result="Success" success="True" asserts="12" />
                              <test-case name="NHibernate.Test.Immutable.EntityWithMutableCollection.NonInverse.VersionedEntityWithNonInverseOneToManyTest.AbstractEntityWithOneToManyTest.UpdateProperty" executed="True" result="Success" success="True" asserts="11" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ImmutableTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ChangeImmutableEntityProxyToModifiable" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ChangeImmutableEntityToModifiable" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.DeleteDetachedImmutable" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.DeleteDetachedModifiedImmutable" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.GetAndDeleteManagedImmutable" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.Immutable" executed="True" result="Success" success="True" asserts="24" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableChildEntityWithMerge" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableChildEntityWithUpdate" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableCollectionWithMerge" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableCollectionWithUpdate" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableEntityAddImmutableToInverseMutableCollection" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableEntityRemoveImmutableFromInverseMutableCollection" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableEntityRemoveImmutableFromInverseMutableCollectionByDelete" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableEntityRemoveImmutableFromInverseMutableCollectionByDeref" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableParentEntityWithMerge" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.ImmutableParentEntityWithUpdate" executed="True" result="Success" success="True" asserts="19" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.NewEntityViaImmutableEntityWithImmutableCollectionUsingMerge" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.NewEntityViaImmutableEntityWithImmutableCollectionUsingSaveOrUpdate" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.PersistAndUpdateImmutable" executed="True" result="Success" success="True" asserts="24" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.PersistImmutable" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.PersistUpdateImmutableInSameTransaction" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.RefreshImmutable" executed="True" result="Success" success="True" asserts="27" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.SaveImmutable" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.SaveOrUpdateImmutable" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.UnmodifiedImmutableParentEntityWithMerge" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.UpdateAndDeleteManagedImmutable" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.UpdatedEntityViaImmutableEntityWithImmutableCollectionUsingMerge" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Immutable.ImmutableTest.UpdatedEntityViaImmutableEntityWithImmutableCollectionUsingSaveOrUpdate" executed="True" result="Success" success="True" asserts="14" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Insertordering" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="InsertOrderingFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Insertordering.InsertOrderingFixture.BatchOrdering" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.InvalidCastException : Unable to cast object of type 'System.Data.Odbc.OdbcCommand' to type 'System.Data.SqlClient.SqlCommand'.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Interceptor" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="InterceptorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Interceptor.InterceptorFixture.CollectionIntercept" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Interceptor.InterceptorFixture.ComponentInterceptor" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Interceptor.InterceptorFixture.PropertyIntercept" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Interceptor.InterceptorFixture.PropertyIntercept2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Interceptor.InterceptorFixture.StatefulIntercept" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Join" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinCompositeKeyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.JoinCompositeKeyTest.SimpleSaveAndRetrieve" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedFilters" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.JoinedFilters.FilterOnJoinedTable" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinedFilters.FilterOnJoinedTableWithRepeatedColumn" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinedFilters.FilterOnPrimaryTable" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.JoinTest.Learn_SubclassBehavior" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.PolymorphicGetByTypeofSuperclass" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestDeleteUsingHql" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotDeleted" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotInserted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinNotUpdated" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestInverseJoinSelected" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestOptional" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingCriteriaInterface" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingGet" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestRetrieveUsingHql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSequentialSelects" executed="True" result="Error" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select person0_.person_id as person1_1850_, person0_.Name as Name1850_, person0_.Sex as Sex1850_, person0_1_.Address as Address1851_, person0_1_.Zip as Zip1851_, person0_1_.Country as Country1851_, person0_2_.HomePhone as HomePhone1852_, person0_2_.BusinessPhone as Business3_1852_, person0_3_.StuffName as StuffName1854_, person0_.person_type as person2_1850_ from person person0_ inner join address person0_1_ on person0_.person_id=person0_1_.address_id left outer join phone person0_2_ on person0_.person_id=person0_2_.phone_id left outer join inversed_stuff person0_3_ on person0_.person_id=person0_3_.stuff_id where (person0_.person_type is null or person0_.person_type in ('E', 'C', 'U')) ]
[SQL: select person0_.person_id as person1_1850_, person0_.Name as Name1850_, person0_.Sex as Sex1850_, person0_1_.Address as Address1851_, person0_1_.Zip as Zip1851_, person0_1_.Country as Country1851_, person0_2_.HomePhone as HomePhone1852_, person0_2_.BusinessPhone as Business3_1852_, person0_3_.StuffName as StuffName1854_, person0_.person_type as person2_1850_ from person person0_ inner join address person0_1_ on person0_.person_id=person0_1_.address_id left outer join phone person0_2_ on person0_.person_id=person0_2_.phone_id left outer join inversed_stuff person0_3_ on person0_.person_id=person0_3_.stuff_id where (person0_.person_type is null or person0_.person_type in ('E', 'C', 'U'))]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSequentialSelectsOptionalData" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestSimpleInsertAndRetrieveEmployee" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Join.JoinTest.TestUpdateEmployee" executed="True" result="Error" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not execute query
[ select person0_.person_id as person1_1850_, person0_.Name as Name1850_, person0_.Sex as Sex1850_, person0_1_.Address as Address1851_, person0_1_.Zip as Zip1851_, person0_1_.Country as Country1851_, person0_2_.HomePhone as HomePhone1852_, person0_2_.BusinessPhone as Business3_1852_, person0_3_.StuffName as StuffName1854_, person0_.person_type as person2_1850_ from person person0_ inner join address person0_1_ on person0_.person_id=person0_1_.address_id left outer join phone person0_2_ on person0_.person_id=person0_2_.phone_id left outer join inversed_stuff person0_3_ on person0_.person_id=person0_3_.stuff_id where (person0_.person_type is null or person0_.person_type in ('E', 'C', 'U')) ]
[SQL: select person0_.person_id as person1_1850_, person0_.Name as Name1850_, person0_.Sex as Sex1850_, person0_1_.Address as Address1851_, person0_1_.Zip as Zip1851_, person0_1_.Country as Country1851_, person0_2_.HomePhone as HomePhone1852_, person0_2_.BusinessPhone as Business3_1852_, person0_3_.StuffName as StuffName1854_, person0_.person_type as person2_1850_ from person person0_ inner join address person0_1_ on person0_.person_id=person0_1_.address_id left outer join phone person0_2_ on person0_.person_id=person0_2_.phone_id left outer join inversed_stuff person0_3_ on person0_.person_id=person0_3_.stuff_id where (person0_.person_type is null or person0_.person_type in ('E', 'C', 'U'))]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NH1059Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Join.NH1059Fixture.FetchJoin_ForNH1059" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Join.NH1059Fixture.FetchJoinWithCriteria_ForNH1059" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="JoinedSubclass" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinedSubclassExtendsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.SelectByClass" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestHql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassExtendsFixture.JoinedSubclassFixture.TestJoinedSubclass" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.SelectByClass" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestHql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.JoinedSubclass.JoinedSubclassFixture.TestJoinedSubclass" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="LazyComponentTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LazyComponentTestFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.LazyComponentTest.LazyComponentTestFixture.LazyDeleteTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.LazyComponentTest.LazyComponentTestFixture.LazyLoadTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.LazyComponentTest.LazyComponentTestFixture.LazyUpdateTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="LazyOneToOne" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LazyOneToOneTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.LazyOneToOne.LazyOneToOneTest.Lazy" executed="True" result="Success" success="True" asserts="10" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="LazyProperty" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LazyPropertyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanGetValueForLazyProperty" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanGetValueForNonLazyProperty" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanLoadAndSaveObjectInDifferentSessions" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.CanUpdateNonLazyWithoutLoadingLazyProperty" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.PropertyLoadedNotInitialized" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.PropertyLoadedNotInitializedWhenUsingGet" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.LazyProperty.LazyPropertyFixture.ShouldGenerateErrorForNonAutoPropLazyProp" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Legacy" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ABCProxyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OneToOne" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OnoToOneComparing" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[ANTLR parser : Not supported ]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.OptionalOneToOneInCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.SharedColumn" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.Subclassing" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Legacy.ABCProxyTest.SubclassMap" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ABCTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ABCTest.HigherLevelIndexDefinitionInColumnTag" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.HigherLevelIndexDefinitionInPropertyTag" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.Subclassing" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.ABCTest.Subselect" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CriteriaTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.Criteria_can_get_query_entity_type" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaCompositeProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaLeftOuterJoin" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaManyToOneEquals" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.CriteriaTypeMismatch" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.DetachedCriteria_can_get_query_entity_type" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.SimpleDateCriteria" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.CriteriaTest.SimpleSelectTest" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FooBarTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AddAll" executed="True" result="Failure" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#4df8df607b43438e889fa0e31d56bb44][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AfterDelete" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#3dd36c1a06fc453d8833cbeed84d236f][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Any" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#d4e46e141b304560aabf631f154ab3c5][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ArraysOfTimes" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#489a8a304abf4cdaa44fa6a1a741d79d][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AssociationId" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#72ca30c33d1044829b386eaf4ef05a78][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutoFlush" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#8191eef4892f4eaba3927c0df315df1b][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutoFlushCollections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#8454e479fcb340ada14695734d878176][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.AutosaveChildren" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#065e1abee07b44cbaff0c4367e2e7100][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BagMultipleElements" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BagOneToMany" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.BatchLoad" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#27dbe4ea6ca14c938e2bfc8ebd1ac546][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Cache" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CachedCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#16d7b44183424b2d9f31f2044bcf040b][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Callback" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#ae81ec40777a43e1add984b2e99911af][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CascadeDeleteDetached" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CascadeSave" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionCache" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#f67bb26fbde84a8aa9589ae9c6e9ca60][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionOfSelf" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#970fa4bae6834e8aae6aacfbe9735e36][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionsInSelect" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#ca59c9515f804a239a40f71b6b9d4b8c][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionVersioning" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CollectionWhere" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#4e5873e88f6e47deacfe1d55034b9d67][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ComplicatedQuery" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#38b89c22bf484f958deb98a48cb2f351][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ComponentParent" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#d95a791190b249819044fe41db8a09a5][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Components" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#f378936d5c9246c9969313a33e9cea09][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CompositeKeyPathExpressions" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Copy" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Create" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#0c58c7570e0b48a184ed43bc2fe05b6b][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CreateUpdate" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#17ecfc3032ae4a9499297ff38e76d59a][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.CriteriaCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Custom" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteRecursive" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#eaa0585329cb4238b09c4c45ed89b84f][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteTransient" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DeleteUpdatedTransient" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.DereferenceLazyCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#2c0c16a053824739960b97a1c6e759a5][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Disconnect" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#3c4c230d079f454ea144d517e06ccc41][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Dyna" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EmbeddedCompositeID" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EmptyCollection" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#88b6ecf26fd040419d5cc655294be0d4][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Enum" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#682fc879c3d145219a78cca9b437f8a5][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Enumerable" executed="True" result="Failure" success="False" asserts="20">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#f5d8b50bbdc34a26a92d5bd5d945fb9e][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.EnumerableDisposable" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchInitializedCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#999dd3e1cd884a2d8599d642a2649d1f][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchInitializedCollectionDupe" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#9bd9ea31b82b4c00bf790bdb05baca47][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FetchList" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#9a0308a21756462eb2fd8f63da27060a][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Find" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#fc5c46438f6a404f98c65bf7ff1aa729][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FindByCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#a276dc3bd5a445bdafc29c252989fa2d][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.FindLoad" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#5708d27476da456cbcd7407915141232][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForceOuterJoin" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForCertain" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ForeignKeys" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#af4a730aac214cbd8402e4d6c8df8d65][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Formula" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#d3ec6e0927ea495bb5d3f69aac78b369][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.IdBag" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#feea577a67ec4f6aadcae954520f6fc4][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LateCollectionAdd" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LazyCollections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#c3bdbc93be234c50b3a91203cb495572][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Limit" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#cb0a220ef53544d2a279fabbb5a655ee][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ListRemove" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Load" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#12ed81e67440441cba350ab6107da166][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.LoadAfterDelete" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#94226b195f0f424cba2b64c4310baab5][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ManyToManyBag" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#a457d1713e244cc3afc8cf2d47cedbdb][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.MoveLazyCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#99a3d3840ef8481e90aa06ecb7bbd2e9][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.MultiColumnQueries" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#61ed31479aae447f81e579b32694c143][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NamedParams" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#043ef3cfbd2f429fbc731a7a015ad29f][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NewFlushing" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#0d01033278104c57a0a2662ea85fa1c6][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NewSessionLifecycle" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#8469ba899c5c4d848463420170021970][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NoForeignKeyViolations" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.NonlazyCollections" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ObjectType" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#fb65f9dd3eb94eda8f286181f5e9c70e][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OneToOneGenerator" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OrderBy" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#cf71a092197b4f90a76dfdc0c7ed86b4][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.OrphanDelete" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ParameterInHavingClause" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ParameterInOrderByClause" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PersistCollections" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#09781b5a2fcd4aaea87e079b2a60c690][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PersistentLifecycle" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#0cb1c2959f8c41199a37294e1b392643][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Polymorphism" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#afd7c0fadec54dc8915e4a647c97bcaa][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PropertyRef" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#df9ddf94893a48aea49903a9d44f43bf][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ProxiesInCollections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#6a14253185e64d47912af9496c4abec9][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ProxyArray" executed="True" result="Failure" success="False" asserts="5">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not initialize a collection: [NHibernate.DomainModel.Glarch.FooComponents#0b2b2e24ddf24f19bb099f988c7eb924][SQL: SELECT foocompone0_.glarch_key as glarch1_3_, foocompone0_.name_ as name2_3_, foocompone0_.count_ as count3_3_, foocompone0_.x_ as x4_3_, foocompone0_.y_ as y5_3_, foocompone0_.Fee as Fee3_, foocompone0_.tha_indecks as tha7_3_, fee1_.id_ as id1_1962_0_, fee1_.Fi as Fi1962_0_, fee1_.TheFee as TheFee1962_0_, fee1_.AnotherFee as AnotherFee1962_0_, fee1_.Qux as Qux1962_0_, fee1_.count_ as count6_1962_0_, fee1_.Name as Name1962_0_, fee1_.null_prop as null8_1962_0_, fee2_.id_ as id1_1962_1_, fee2_.Fi as Fi1962_1_, fee2_.TheFee as TheFee1962_1_, fee2_.AnotherFee as AnotherFee1962_1_, fee2_.Qux as Qux1962_1_, fee2_.count_ as count6_1962_1_, fee2_.Name as Name1962_1_, fee2_.null_prop as null8_1962_1_, fee3_.id_ as id1_1962_2_, fee3_.Fi as Fi1962_2_, fee3_.TheFee as TheFee1962_2_, fee3_.AnotherFee as AnotherFee1962_2_, fee3_.Qux as Qux1962_2_, fee3_.count_ as count6_1962_2_, fee3_.Name as Name1962_2_, fee3_.null_prop as null8_1962_2_ FROM FooComponents foocompone0_ left outer join [the fees] fee1_ on foocompone0_.Fee=fee1_.id_ left outer join [the fees] fee2_ on fee1_.TheFee=fee2_.id_ left outer join [the fees] fee3_ on fee2_.AnotherFee=fee3_.id_ WHERE foocompone0_.glarch_key=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.PSCache" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#289d7d44970b4d0cb66e9a100a88f00f][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Query" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#e1e423a387ed4f58890b1f3b0c3fd175][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.QueryCollectionOfValues" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#f934569f1b354e06be7dbd244dec4bac][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.QueryLockMode" executed="True" result="Failure" success="False" asserts="2">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#e1483d79b39d41edb3d25509f4731356][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Reachability" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#5d912f97d36e47d7adbc58f8d3d0feb6][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RecursiveLoad" executed="True" result="Failure" success="False" asserts="9">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Bar#8ede8340fb6047ad92265a44c1d25c8d][SQL: INSERT INTO [foos] (Version, foo, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, null_cmpnt_, the_time, Baz, bar_String, name_name, bar_count, Name, clazz, [gen_id], [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'B', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Refresh" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#62a777e1d5f8480f9dedd0b62f43e81b][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RefreshTransient" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#7b35f5c48dcc4dc19c3206201921cbcd][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.RemoveContains" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#56715a392fda4d689f417da994eed998][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.ReuseDeletedCollection" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert collection: [NHibernate.DomainModel.Baz.TimeArray#301bfd9014b24a1e9831cdd994b9593d][SQL: INSERT INTO TimeArray (baz_id, j, the_time) VALUES (?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveAddDelete" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveDelete" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#ddc11d48a83d42d6bbed2161d31eaa0f][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SaveFlush" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.SerializableType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Sortables" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.TransientOrphanDelete" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#6fc2c114cc1f44109156c68db66e4fcd][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Update" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#0f844f4235654eb8bdc51b7d379111de][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateCollections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#2dba1fad01d2472fa5994e1282de0b5e][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateFromTransient" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#124955b2195f482fa84193b952af495c][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UpdateOrder" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.UserProvidedConnection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterNamedMissing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalInQuotes" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalInQuotes2" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalMissing" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VerifyParameterPositionalMissing2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.VersionedCollections" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Versioning" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.Veto" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FooBarTest.WierdSession" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#eb96e205f4e4425192ef0d9626a66cda][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FumTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeID" executed="True" result="Failure" success="False" asserts="4">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.DomainModel.Fum#component[String,Short,Date]{'String'='fi', 'Short'='12', 'Date'='4/29/2004 9:00:00 AM'}][SQL: SELECT fum0_.string_ as string1_2043_1_, fum0_.short_ as short2_2043_1_, fum0_.date_ as date3_2043_1_, fum0_.LastUpdated as LastUpda4_2043_1_, fum0_.FumString as FumString2043_1_, fum0_.fo_string as fo6_2043_1_, fum0_.fo_short as fo7_2043_1_, fum0_.fo_date as fo8_2043_1_, fum0_.count_ as count9_2043_1_, fum1_.string_ as string1_2043_0_, fum1_.short_ as short2_2043_0_, fum1_.date_ as date3_2043_0_, fum1_.LastUpdated as LastUpda4_2043_0_, fum1_.FumString as FumString2043_0_, fum1_.fo_string as fo6_2043_0_, fum1_.fo_short as fo7_2043_0_, fum1_.fo_date as fo8_2043_0_, fum1_.count_ as count9_2043_0_, stringmap2_.fum_str_ as fum1_3_, stringmap2_.fum_sho_ as fum2_3_, stringmap2_.fum_dat_ as fum3_3_, stringmap2_.mapelement as mapelement3_, stringmap2_.mapindex as mapindex3_ FROM Fum fum0_ left outer join Fum fum1_ on fum0_.fo_string=fum1_.string_ and fum0_.fo_short=fum1_.short_ and fum0_.fo_date=fum1_.date_ left outer join Stringmap stringmap2_ on fum1_.string_=stringmap2_.fum_str_ and fum1_.short_=stringmap2_.fum_sho_ and fum1_.date_=stringmap2_.fum_dat_ WHERE fum0_.string_=? and fum0_.short_=? and fum0_.date_=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDCollections" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#800d9c31474a4dad9221c4655b1fcfa9][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDOneToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDQuery" executed="True" result="Failure" success="False" asserts="6">
                        <failure>
                          <message><![CDATA[System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeIDs" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CompositeKeyPathExpressions" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.Criteria" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.CriteriaCollection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.DeleteOwner" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#114982258e574a5d8414bf25a29fbba0][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.KeyManyToOne" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.DomainModel.Inner#component[AKey,BKey]{'AKey'='a', 'BKey'='b'}][SQL: SELECT inner0_.AKEY as AKEY2068_0_, inner0_.BKEY as BKEY2068_0_, inner0_.DUDU as DUDU2068_0_ FROM CID_IN inner0_ WHERE inner0_.AKEY=? and inner0_.BKEY=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.FumTest.ListIdentifiers" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.FumTest.UnflushedSessionSerialization" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MasterDetailTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CachedCollectionRefresh" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Cascading" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Categories" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionRefresh" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplace" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplace2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CollectionReplaceOnUpdate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Copy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CopyCascade" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.CustomPersister" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ExampleTest" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.IncomingOutgoing" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Interface" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MasterDetail" executed="True" result="Failure" success="False" asserts="30">
                        <failure>
                          <message><![CDATA[System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Meta" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MixNativeAssigned" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.MultiLevelCascade" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NamedQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NH741" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NonLazyBidirectional" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NotNullDiscriminator" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.NoUpdatedManyToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.OuterJoin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ParentChildren" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.PolymorphicCriteria" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.QueuedBagAdds" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.SelfManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.Serialization" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.ToStringWithNoIdentifier" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MasterDetailTest.UpdateLazyCollections" executed="True" result="Failure" success="False" asserts="3">
                        <failure>
                          <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.DomainModel.Master#7]
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiTableTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Collection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.CollectionOnly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.CollectionPointer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Constraints" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.DynamicUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.FetchManyToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.JoinOpenBug" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Joins" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTable" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableCollections" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableGeneratedId" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableManyToOne" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.MultiTableNativeId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.OneToOne" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.Queries" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not delete: [NHibernate.DomainModel.TrivialClass#22][SQL: DELETE FROM TrivialClass WHERE tcid = ?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.MultiTableTest.SubclassCollection" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParentChildTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Bag" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CascadeCompositeElements" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CircularCascade" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ClassWhere" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.CollectionQuery" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ComplexCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#521eec83d817472db4a44c8be2c542b9][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Container" executed="True" result="Success" success="True" asserts="22" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.DeleteEmpty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Locking" executed="True" result="Success" success="True" asserts="25" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ManyToMany" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ObjectType" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#c7435cdaf259460987760e5a74f9425d][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ParentChild" executed="True" result="Failure" success="False" asserts="5">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select parent0_.Id as Id2195_, parent0_.X as X2195_, parent0_.count_ as count3_2195_, parent0_.any_id as any4_2195_, parent0_.any_class as any5_2195_ from Parent parent0_ where parent0_.count_=? ]
Positional parameters:  #0>66
[SQL: select parent0_.Id as Id2195_, parent0_.X as X2195_, parent0_.count_ as count3_2195_, parent0_.any_id as any4_2195_, parent0_.any_class as any5_2195_ from Parent parent0_ where parent0_.count_=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ParentNullChild" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[  Expected: null
  But was:  <NHibernate.DomainModel.Child>

TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.ProxyReuse" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.DomainModel.Foo#6ea17f0f191449ce855d1d7bbbc6bbc2][SQL: INSERT INTO [foos] (Version, long_, [@@##integer_  *], float_, X, date_, timestamp_, boolean_, bool_, null_, short_, char_, zero_, int_, string_, byte_, YesNo, [status_@###], [localeayzabc123!@#$], first_name, surname, Dependent, count_, name_, g__, cmpnt_null_, subcount, subname, fee_sub, [$foo_subclass^], [foo_id]) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'F', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.QueryOneToOne" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.ParentChildTest.Replicate" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SimpleTest.SetPropertiesOnQuery" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SimpleTest.TestCRUD" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLFunctionsTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.Broken" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQuery" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQueryOnInsert" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.CachedQueryRegion" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.DialectSQLFunctions" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.NothingToUpdate" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SetProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SQLFunctionAsAlias" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLFunctionsTest.SQLFunctions" executed="True" result="Failure" success="False" asserts="14">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select TOP (?) simple0_.id_ as id1_2240_, simple0_.Name as Name2240_, simple0_.address as address2240_, simple0_.count_ as count4_2240_, simple0_.date_ as date5_2240_, simple0_.Pay as Pay2240_, simple0_.Other as Other2240_ from Simple simple0_ ]
[SQL: select TOP (?) simple0_.id_ as id1_2240_, simple0_.Name as Name2240_, simple0_.address as address2240_, simple0_.count_ as count4_2240_, simple0_.date_ as date5_2240_, simple0_.Pay as Pay2240_, simple0_.Other as Other2240_ from Simple simple0_]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SQLLoaderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.ComponentNoStar" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.ComponentStar" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.DoubleAliasing" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.EmbeddedCompositeProperties" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.EscapedODBC" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Escaping not implemented. Need to test with ODBC/OLEDB when implemented.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLAssociatedObject" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLDiscriminatedDiffSessions" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLDiscriminatorSameSession" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLMultipleObject" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLParameters" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLProperties" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLSimpleByDiffSessions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindBySQLStar" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.FindSimpleBySQL" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.NamedSQLQuery" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.TS" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Legacy.SQLLoaderTest.TSNamed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="SetUpFixture" name="Linq" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggregateTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithBeforeYearFunction" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithCustomFunction" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[TODO: Custom functions]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithEndsWith" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithMonthFunction" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithNotStartsWith" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithOnOrAfterYearFunction" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithStartsWith" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.AggregateTests.AggregateWithUpperAndLowerFunctions" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinaryBooleanExpressionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.BooleanPropertyAlone" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.BooleanPropertyComparison" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.MammalsViaDynamicInvokedExpression" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithEqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithEqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithNotEqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.NegativeTimesheetsWithNotEqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithEqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithEqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithNotEqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryBooleanExpressionTests.TimesheetsWithNotEqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinaryExpressionOrdererTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.EqualsSwapsToEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.GreaterThanOrEqualToSwapsToLessThanOrEqualTo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.GreaterThanSwapsToLessThan" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.LessThanOrEqualToSwapsToGreaterThanOrEqualTo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.LessThanSwapsToGreaterThan" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.NotEqualsSwapsToNotEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.PropertyPropertyDoesntSwap" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.PropertyValueDoesntSwaps" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValueUsingEqualsFromConstant" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.BinaryExpressionOrdererTests.ValuePropertySwapsToPropertyValueUsingEqualsToConstant" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BooleanMethodExtensionExample" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.BooleanMethodExtensionExample.CanUseMyCustomExtension" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[It work only with full-text indexes enabled.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ByMethod" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AnyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.AnySublist" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.AnyWithCount" description="NH-2654" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.AnyWithFetch" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.ManyToManyAny" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.AnyTests.NestedAny" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AverageTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.AverageTests.CanGetAverageOfIntegersAsDouble" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CastTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.CastTests.CastCount" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CastTests.CastDowncast" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CastTests.CastDowncastUsingOfType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet. The method OfType does not work as expected.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.CastTests.CastWithWhere" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CastTests.OrderByAfterCast" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CountTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.Count_ReturnsNumberOfRecords" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.CountDistinctProperty_ReturnsNumberOfDistinctEntriesForThatProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.CountOnJoinedGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.CountProperty_ReturnsNumberOfNonNullEntriesForThatProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.LongCount_ReturnsNumberOfRecords" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.LongCountDistinctProperty_ReturnsNumberOfDistinctEntriesForThatProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.CountTests.LongCountProperty_ReturnsNumberOfNonNullEntriesForThatProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DistinctTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnAnonymousTypeProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnComplexAnonymousTypeProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnTypeProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnTypeProjectionTwoProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnTypeProjectionWithCustomProjectionMethodsIsBlocked1" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnTypeProjectionWithCustomProjectionMethodsIsBlocked2" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.DistinctTests.DistinctOnTypeProjectionWithHqlMethodIsOk" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetValueOrDefaultTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GetValueOrDefaultTests.CoalesceInWhere" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GetValueOrDefaultTests.GetValueOrDefaultInWhere" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GetValueOrDefaultTests.GetValueOrDefaultWithSingleArgumentInWhere" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GroupByHavingTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.ComplexQuery" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectCount" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectCountWithInnerWhere" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectKey" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectKeyWithInnerWhere" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectTupleKeyCount" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectTupleKeyCountOfOrderLines" description="I suspect that this case isn't executed correctly - the sql doesn't mention the orderlines. /Oskar 2012-01-22" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.HavingCountSelectTupleKeyCountOfOrders" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByHavingTests.SingleKeyGroupAndCountWithHavingClause" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GroupByTests" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.FetchBeforeGroupBy" description="NH-3743" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.FilteredByAndProjectingSumWithPredicate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.FilteredByCountFromSubQuery" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.FilteredByCountWithPredicate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.FilteredByKeyAndProjectedWithAggregatePredicates" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByAndAll" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByAndAny" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByAndTake" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByAndTake2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValue" description="NH-3797" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInAnonymousType" description="NH-3797" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInAnonymousTypeWithJoinOnId" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInAnonymousTypeWithJoinOnObject" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInObjectArray" description="NH-3797" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order0_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from Orders order0_ group by cast(case when order0_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInObjectArrayWithJoinInRightSideOfCase" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else customer2_.CompanyName end as NVARCHAR(255)) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId left outer join Customers customer2_ on order1_.CustomerId=customer2_.CustomerId group by cast(case when order1_.CustomerId is null then ? else customer2_.CompanyName end as NVARCHAR(255)) ]
  Name:p1 - Value:unknown
[SQL: select cast(case when order1_.CustomerId is null then ? else customer2_.CompanyName end as NVARCHAR(255)) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId left outer join Customers customer2_ on order1_.CustomerId=customer2_.CustomerId group by cast(case when order1_.CustomerId is null then ? else customer2_.CompanyName end as NVARCHAR(255))]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.
ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Customers.CompanyName' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInObjectArrayWithJoinOnId" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueInObjectArrayWithJoinOnObject" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueWithJoinOnId" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByComputedValueWithJoinOnObject" description="NH-3801" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT) ]
  Name:p2 - Value:0  Name:p1 - Value:1
[SQL: select cast(case when order1_.CustomerId is null then ? else ? end as INT) as col_0_0_, cast(count(*) as INT) as col_1_0_ from OrderLines orderline0_ left outer join Orders order1_ on orderline0_.OrderId=order1_.OrderId group by cast(case when order1_.CustomerId is null then ? else ? end as INT)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Orders.CustomerId' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByConstant" description="NH-3474" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByConstantAnonymousType" description="NH-3474" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByConstantArray" description="NH-3474" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByKeyWithConstantFromVariable" description="NH-3474" executed="True" result="Success" success="True" asserts="30" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByKeyWithConstantInAnonymousType" description="NH-3474" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByKeyWithConstantInArray" description="NH-3474" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByOrderByKeySelectToClass" description="NH-3446" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupBySelectKeyShouldUseServerSideGrouping" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByTwoFieldsWhereOneOfThemIsTooDeep" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByWithAndAlsoContainsInWhereClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.GroupByWithContainsInWhereClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.MultipleKeyGroupAndCount" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.MultipleKeyGrouping" executed="True" result="Success" success="True" asserts="2126" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.ProjectingCountWithPredicate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.ProjectingWithSubQueriesFilteredByTheAggregateKey" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectFirstElementFromProductsGroupedByUnitPrice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectFirstOrDefaultElementFromProductsGroupedByUnitPrice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectManyGroupByAggregateProjection" description="NH-3681" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectSingleElementFromProductsGroupedByUnitPrice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectSingleOrDefaultElementFromProductsGroupedByUnitPrice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SelectTupleKeyCountOfOrderLines" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndCount" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndOrderByKey" executed="True" result="Success" success="True" asserts="62" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndOrderByKeyAggregateProjection" executed="True" result="Success" success="True" asserts="62" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndOrderByKeyProjection" executed="True" result="Success" success="True" asserts="62" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGroupAndOrderByNonKeyAggregateProjection" executed="True" result="Success" success="True" asserts="62" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyGrouping" executed="True" result="Success" success="True" asserts="921" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyPropertyGroupAndOrderByCountBeforeProjection" executed="True" result="Success" success="True" asserts="88" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyPropertyGroupAndOrderByProjectedCount" executed="True" result="Success" success="True" asserts="88" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyPropertyGroupByEntityAndSelectEntity" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Known bug NH-3027, discovered as part of NH-2560.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.Linq.ByMethod.GroupByTests.SingleKeyPropertyGroupWithOrderByCount" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Known bug NH-3027, discovered as part of NH-2560.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OrderByTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AggregateAscendingOrderByClause" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AggregateDescendingOrderByClause" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.AscendingOrderByClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexAscendingDescendingOrderByClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexAscendingOrderByClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.ComplexDescendingOrderByClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.DescendingOrderByClause" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.GroupByThenOrderBy" executed="True" result="Success" success="True" asserts="21" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByCalculatedAggregatedSubselectProperty" executed="True" result="Success" success="True" asserts="830" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByDoesNotFilterResultsOnJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByNullCompareAndSkipAndTake" description="NH-3217" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByWithSelectDistinctAndTake" description="NH-3445" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByWithSelfReferencedSubquery1" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.OrderByTests.OrderByWithSelfReferencedSubquery2" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SumTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumCastNullableDecimal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumDecimal" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.EmptySumNullableDecimal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.SumDecimal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.SumNullableDecimal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Linq.ByMethod.SumTests.SumSingle" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CasingTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.CasingTest.ToLower" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.CasingTest.ToLowerInvariant" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.CasingTest.ToUpper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.CasingTest.ToUpperInvariant" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CharEqualityTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralGreaterThanCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralGreaterThanOrEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralLessThanCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralLessThanOrEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharLiteralNotEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyEqualToCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyEqualToCharVariable" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyGreaterThanCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyGreaterThanOrEqualToCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyLessThanCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyLessThanOrEqualToCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyNotEqualToCharLiteral" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharPropertyNotEqualToCharVariable" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharVariableEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.CharEqualityTests.CharVariableNotEqualToCharProperty" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CustomExtensionsExample" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.CustomExtensionsExample.CanUseMyCustomExtension" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CustomQueryModelRewriterTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.CustomQueryModelRewriterTests.RewriteNullComparison" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTimeTests" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDate" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select order0_.OrderId as OrderId3186_, order0_.CustomerId as CustomerId3186_, order0_.EmployeeId as EmployeeId3186_, order0_.OrderDate as OrderDate3186_, order0_.RequiredDate as Required5_3186_, order0_.ShippedDate as ShippedD6_3186_, order0_.ShipVia as ShipVia3186_, order0_.Freight as Freight3186_, order0_.ShipName as ShipName3186_, order0_.ShipAddress as ShipAdd10_3186_, order0_.ShipCity as ShipCity3186_, order0_.ShipRegion as ShipRegion3186_, order0_.ShipPostalCode as ShipPos13_3186_, order0_.ShipCountry as ShipCou14_3186_ from Orders order0_ where dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate))=? ]
  Name:p1 - Value:2/26/1998 12:00:00 AM
[SQL: select order0_.OrderId as OrderId3186_, order0_.CustomerId as CustomerId3186_, order0_.EmployeeId as EmployeeId3186_, order0_.OrderDate as OrderDate3186_, order0_.RequiredDate as Required5_3186_, order0_.ShippedDate as ShippedD6_3186_, order0_.ShipVia as ShipVia3186_, order0_.Freight as Freight3186_, order0_.ShipName as ShipName3186_, order0_.ShipAddress as ShipAdd10_3186_, order0_.ShipCity as ShipCity3186_, order0_.ShipRegion as ShipRegion3186_, order0_.ShipPostalCode as ShipPos13_3186_, order0_.ShipCountry as ShipCou14_3186_ from Orders order0_ where dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate))=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDateTime" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByDateTime2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanQueryByYear" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanSelectDate" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate)) as col_0_0_ from Orders order0_ where dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate))=? ]
  Name:p1 - Value:2/26/1998 12:00:00 AM
[SQL: select dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate)) as col_0_0_ from Orders order0_ where dateadd(dd, 0, datediff(dd, 0, order0_.OrderDate))=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanSelectDateTime" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanSelectDateTime2" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.DateTimeTests.CanSelectYear" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DynamicQueryTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.DynamicQueryTests.CanCahceDynamicLinq" description="NH-3239" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.DynamicQueryTests.CanQueryWithDynamicOrderBy" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EagerLoadTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.CanSelectAndFetch" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.CanSelectAndFetchHql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchAndThenFetchManyWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchAndThenFetchWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyAndThenFetchManyWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyAndThenFetchWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchManyWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.FetchWithWhere" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.MultipleRelationshipsCanBeEagerLoaded" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.NestedRelationshipsCanBeEagerLoaded" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.RelationshipsAreLazyLoadedByDefault" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.RelationshipsCanBeEagerLoaded" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhenFetchSuperclassCollectionThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereAfterFetchAndSingleOrDefault" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchAndOrderBy" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchAndSelect" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchAndWhere" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyAndOrderBy" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyAndSelect" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyAndWhere" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyThenFetchAndOrderBy" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyThenFetchAndSelect" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.EagerLoadTests.WhereBeforeFetchManyThenFetchAndWhere" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EnumTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsInt32_High_1" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsInt32_Unspecified_2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsString_Meduim_2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.EnumTests.CanQueryOnEnumStoredAsString_Small_1" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExpressionSessionLeakTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.ExpressionSessionLeakTest.SessionGetsCollected" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FunctionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.FunctionTests.CharIndexFunction" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.Coalesce" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.IndexOfFunctionExpression" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.IndexOfFunctionProjection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.LeftFunction" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.LikeFunction" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.LikeFunctionUserDefined" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.ReplaceFunction" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.SubstringFunction1" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.SubstringFunction2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.ToStringFunction" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.ToStringWithContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.Trim" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.TrimTrailingWhitespace" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.FunctionTests.TwoFunctionExpression" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereBoolConstantEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereBoolFuncEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereBoolParameterEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereByteEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereCharEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereDateTimeEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereDecimalEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereDoubleEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereFloatEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereGuidEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereIntEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereLongEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereShortEqual" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereStaticStringEqual" description="NH-3367" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.FunctionTests.WhereStringEqual" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByCustomerCompanyNameAndSelectCustomerIdShouldJoinOrdersOnlyOnce" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByCustomerIdSelectCustomerIdShouldNotContainJoinWithCustomer" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByCustomerIdSelectCustomerShouldContainJoinWithCustomer" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByCustomerIdSelectLineShouldNotContainJoinWithCustomer" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByOrderDateAndSelectOrderId" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByOrderIdAndSelectOrder" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesFilterByOrderIdAndSelectOrderDate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWith2ImpliedJoinByIdShouldNotContainImpliedJoin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWith2ImpliedJoinShouldProduce2JoinsInSql" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithFilterByOrderIdAndDateShouldProduceOneJoin" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithFilterByOrderIdShouldNotProduceJoins" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithOrderByOrderIdAndDateShouldProduceOneJoin" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithOrderByOrderIdShouldNotProduceJoins" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithOrderByOrderShouldNotProduceJoins" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingCustomerIdInCaseShouldProduceOneJoin" description="NH-3801" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingCustomerInCaseShouldProduceOneJoin" description="NH-3801" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This is an ideal case, but not possible without better join detection]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingCustomerNameInCaseShouldProduceTwoJoins" description="NH-3801" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingCustomerNameInCaseShouldProduceTwoJoinsAlternate" description="NH-3801" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This is an ideal case, but not possible without better join detection]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingOrderIdAndDateShouldProduceOneJoin" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.JoinTests.OrderLinesWithSelectingOrderIdShouldNotProduceJoins" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LinqQuerySamples" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq1" description="This sample uses WHERE to filter for Customers in London." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq10" description="This sample uses SELECT and anonymous types to return a sequence of just the Customers' contact names and phone numbers." executed="True" result="Success" success="True" asserts="183">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq11" description="This sample uses SELECT and anonymous types to return a sequence of just the Employees' names and phone numbers, with the FirstName and LastName fields combined into a single field, 'Name', and the HomePhone field renamed to Phone in the resulting sequence." executed="True" result="Success" success="True" asserts="19">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12" description="This sample uses SELECT and anonymous types to return a sequence of all Products' IDs and a calculated value called HalfPrice which is set to the Product's UnitPrice divided by 2." executed="True" result="Success" success="True" asserts="77">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12b" executed="True" result="Success" success="True" asserts="77">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12c" executed="True" result="Success" success="True" asserts="77">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq12d" executed="True" result="Success" success="True" asserts="77">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq13" description="This sample uses SELECT and a conditional statment to return a sequence of product  name and product availability." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq14" description="This sample uses SELECT and a known type to return a sequence of employees' names." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq15" description="This sample uses SELECT and WHERE to return a sequence of just the London Customers' contact names." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq16" description="This sample uses SELECT and anonymous types to return a shaped subset of the data about Customers." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="False" result="Ignored">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO - nested select]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17b" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq17c" description="This sample uses nested queries to return a sequence of all orders containing their OrderId, a subsequence of the items in the order where there is a discount, and the money saved if shipping is not included." executed="False" result="Ignored">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO - nested select]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq18" description="This sample uses Distinct to select a sequence of the unique cities that have Customers." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq19" description="This sample uses Count to find the number of Customers in the database." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq1b" description="This sample uses WHERE to filter for Customers in London and then Madrid to ensure that the parameterization is working." executed="True" result="Success" success="True" asserts="2">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2" description="This sample uses WHERE to filter for Employees hired during or after 1994." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq20" description="This sample uses Count to find the number of Products in the database that are not discontinued." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq21" description="This sample uses Sum to find the total freight over all Orders." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq22" description="This sample uses Sum to find the total number of units on order over all Products." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq23" description="This sample uses Min to find the lowest unit price of any Product." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq24" description="This sample uses Min to find the lowest freight of any Order." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq25" description="This sample uses Min to find the Products that have the lowest unit price in each category." executed="False" result="Ignored">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO nested aggregating group by]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq26" description="This sample uses Max to find the latest hire date of any Employee." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq27" description="This sample uses Max to find the most units in stock of any Product." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq28" description="This sample uses Max to find the Products that have the highest unit price in each category." executed="False" result="Ignored">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO nested aggregating group by]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq29" description="This sample uses Average to find the average freight of all Orders." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2B" description="This sample uses WHERE to filter for orders with shipping date equals to null." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq2C" description="This sample uses WHERE to filter for orders with shipping date not equals to null." executed="True" result="Success" success="True" asserts="2">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq3" description="This sample uses WHERE to filter for Products that have stock below their reorder level and are not discontinued." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq30" description="This sample uses Average to find the average unit price of all Products." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq31" description="This sample uses Average to find the Products that have unit price higher than the average unit price of the category for each category." executed="False" result="Ignored">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO nested aggregating group by]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq36" description="This sample uses orderby to sort Employees by hire date." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq37" description="This sample uses where and orderby to sort Orders shipped to London by freight." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq38" description="This sample uses orderby to sort Products by unit price from highest to lowest." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq39" description="This sample uses a compound orderby to sort Customers by city and then contact name." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq3b" description="This sample uses WHERE to filter for Products that have stock below their reorder level and are not discontinued." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq4" description="This sample uses WHERE to filter out Products that are either UnitPrice is greater than 10 or is discontinued." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq40" description="This sample uses orderby to sort Orders from EmployeeId 1 by ship-to country, and then by freight from highest to lowest." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq41" description="This sample uses Orderby, Max and Group By to find the Products that have the highest unit price in each category, and sorts the group by category id." executed="False" result="Ignored">
                        <categories>
                          <category name="ORDER BY" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO nested aggregating group by]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq42" description="This sample uses group by to partition Products by CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq43" description="This sample uses group by and Max to find the maximum unit price for each CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq44" description="This sample uses group by and Min to find the minimum unit price for each CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq45" description="This sample uses group by and Average to find the average UnitPrice for each CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq46" description="This sample uses group by and Sum to find the total UnitPrice for each CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq47" description="This sample uses group by and Count to find the number of Products in each CategoryId." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq48" description="This sample uses group by and Count to find the number of Products in each CategoryId that are discontinued." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq48b" description="This sample uses group by and Count to find the number of Products in each CategoryId that are not discontinued." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq49" description="This sample uses a where clause after a group by clause to find all categories that have at least 10 products." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq5" description="This sample calls WHERE twice to filter out Products that UnitPrice is greater than 10 and is discontinued." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq50" description="This sample uses Group By to group products by CategoryId and SupplierId." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq51" description="This sample uses Group By to return two sequences of products. The first sequence contains products with unit price greater than 10. The second sequence contains products with unit price less than or equal to 10." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="GROUP BY/HAVING" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq52" description="This sample uses Any to return only Customers that have no Orders." executed="True" result="Success" success="True" asserts="2">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq52b" description="This sample uses Any to return only Customers that have Orders." executed="True" result="Success" success="True" asserts="89">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53" description="This sample uses Any to return only Categories that have at least one Discontinued product." executed="True" result="Success" success="True" asserts="5">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53b" description="This sample uses Any to return only Categories that have zero Discontinued products." executed="True" result="Success" success="True" asserts="8">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53c" description="This sample uses Any to return only Categories that does not have at least one Discontinued product." executed="True" result="Success" success="True" asserts="3">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq53d" description="This sample uses Any to return only Categories that does not have any Discontinued products." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq54" description="This sample uses All to return Customers whom all of their orders have been shipped to their own city or whom have no orders." executed="True" result="Success" success="True" asserts="90">
                        <categories>
                          <category name="EXISTS/IN/ANY/ALL" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq55" description="This sample uses Concat to return a sequence of all Customer and Employee phone/fax numbers." executed="False" result="Ignored">
                        <categories>
                          <category name="UNION ALL/UNION/INTERSECT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO set operations]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq56" description="This sample uses Concat to return a sequence of all Customer and Employee name and phone number mappings." executed="False" result="Ignored">
                        <categories>
                          <category name="UNION ALL/UNION/INTERSECT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO set operations]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq57" description="This sample uses Union to return a sequence of all countries that either Customers or Employees are in." executed="False" result="Ignored">
                        <categories>
                          <category name="UNION ALL/UNION/INTERSECT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO set operations]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq58" description="This sample uses Intersect to return a sequence of all countries that both Customers and Employees live in." executed="False" result="Ignored">
                        <categories>
                          <category name="UNION ALL/UNION/INTERSECT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO set operations]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq59" description="This sample uses Except to return a sequence of all countries that Customers live in but no Employees live in." executed="False" result="Ignored">
                        <categories>
                          <category name="UNION ALL/UNION/INTERSECT" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO set operations]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq6" description="This sample uses First to select the first Shipper in the table." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq60" description="This sample uses Take to select the first 5 Employees hired." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="TOP/BOTTOM" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq61" description="This sample uses Skip to select all but the 10 most expensive Products." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="TOP/BOTTOM" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq62" description="This sample uses the Skip and Take operators to do paging by skipping the first 50 records and then returning the next 10, thereby providing the data for page 6 of the Products table." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="Paging" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq63" description="This sample uses a where clause and the Take operator to do paging by, first filtering to get only the ProductIds above 50 (the last ProductId from page 5), then ordering by ProductId, and finally taking the first 10 results, thereby providing the data for page 6 of the Products table.  Note that this method only works when ordering by a unique key." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="Paging" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq7" description="This sample uses First to select the single Customer with CustomerId 'BONAP'." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq8" description="This sample uses First to select an Order with freight greater than 10.00." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinq9" description="This sample uses SELECT to return a sequence of just the Customers' contact names." executed="True" result="Success" success="True" asserts="92">
                        <categories>
                          <category name="SELECT/DISTINCT" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin10" description="This sample shows how to construct a join where one side is nullable and the other isn't." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1a" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1b" description="This sample uses foreign key navigation in the from clause to select all orders for customers in London." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1c" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1d" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin1e" description="This sample uses foreign key navigation in the from clause to select all orders for customers." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin2" description="This sample uses foreign key navigation in the where clause to filter for Products whose Supplier is in the USA that are out of stock." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin3" description="This sample uses foreign key navigation in the from clause to filter for employees in Seattle, and also list their territories." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin4" description="This sample uses foreign key navigation in the select clause to filter for pairs of employees where one employee reports to the other and where both employees are from the same City." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5" description="This sample explictly joins two tables and projects results from both tables using a group join." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5a" description="This sample explictly joins two tables and projects results from both tables." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5b" description="This sample explictly joins two tables and projects results from both tables using a group join." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin5c" description="This sample explictly joins two tables with a composite key and projects results from both tables." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin6" description="This sample explictly joins three tables and projects results from each of them." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin7" description="This sample shows how to get LEFT OUTER JOIN by using DefaultIfEmpty(). The DefaultIfEmpty() method returns null when there is no Order for the Employee." executed="False" result="Ignored">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                        <reason>
                          <message><![CDATA[TODO left outer join]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin8" description="This sample projects a 'let' expression resulting from a join." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin9" description="This sample shows a group join with a composite key." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.DLinqJoin9b" description="This sample shows a join which is then grouped" executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="JOIN" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.LinqQuerySamples.GroupTwoQueriesAndSum" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LinqToHqlGeneratorsRegistryFactoryTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.LinqToHqlGeneratorsRegistryFactoryTest.WhenDefinedThenReturnCustomtRegistry" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.LinqToHqlGeneratorsRegistryFactoryTest.WhenNotDefinedThenReturnDefaultRegistry" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LoggingTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.LoggingTests.CanLogLinqExpressionWithoutInitializingContainedProxy" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.LoggingTests.PageBetweenProjections" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MathTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.MathTests.AcosTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.AsinTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.Atan2Test" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Dialect NHibernate.Dialect.MsSql2008Dialect does not support 'atan2' function]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MathTests.AtanTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.CoshTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Dialect NHibernate.Dialect.MsSql2008Dialect does not support 'cosh' function]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MathTests.CosTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.PowTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.SignAllNegativeTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MathTests.SignAllPositiveTest" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MathTests.SinhTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Dialect NHibernate.Dialect.MsSql2008Dialect does not support 'sinh' function]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MathTests.SinTest" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Linq.MathTests.TanhTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Dialect NHibernate.Dialect.MsSql2008Dialect does not support 'tanh' function]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MathTests.TanTest" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MethodCallTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteAny" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteAnyWithArguments" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanExecuteCountWithOrderByArguments" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectComponentsIntoObjectArray" description="NH-2744" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectConstantsIntoObjectArray" description="NH-2744" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectEnumerationPropertiesIntoObjectArray" description="NH-2744" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectPropertiesFromAssociationsIntoObjectArray" description="NH-2744" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectPropertiesIntoNestedObjectArrays" description="NH-2744" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectPropertiesIntoObjectArray" description="NH-2744" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectPropertiesIntoObjectArrayInProperty" description="NH-2782" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.MethodCallTests.CanSelectPropertiesIntoPropertyListInProperty" description="NH-2782" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MiscellaneousTextFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.CountWithWhereClause" description="This sample uses Count to find the number of Orders placed before yesterday in the database." executed="True" result="Success" success="True" asserts="0">
                        <categories>
                          <category name="COUNT/SUM/MIN/MAX/AVG" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.PredicatedCountOnChildList" description="Predicated count on a child list" executed="True" result="Success" success="True" asserts="4">
                        <categories>
                          <category name="From NHUser list" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.ReferenceToOuter" description="Reference an outer object in a predicate" executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="From NHUser list" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.SelectFromObject" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.TelerikGridWhereClause" description="Telerik grid example, http://www.telerik.com/community/forums/aspnet-mvc/grid/grid-and-nhibernate-linq.aspx" executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="From NHUser list" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.TriplePageSelection" description="This sample uses a where clause and the Skip and Take operators to select the second, third and fourth pages of products" executed="True" result="Success" success="True" asserts="3">
                        <categories>
                          <category name="Paging" />
                        </categories>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.MiscellaneousTextFixture.WhereUsingGuidProperty" description="This sample uses WHERE to filter for Shippers using a Guid property." executed="True" result="Success" success="True" asserts="1">
                        <categories>
                          <category name="WHERE" />
                        </categories>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NestedSelectsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.EmployeesIdAndWithSubordinatesId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdAndDateWithOrderLinesIdAndDiscount" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdWithOrderLinesId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdWithOrderLinesIdAndDiscount" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdWithOrderLinesIdShouldBeNotLazy" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdWithOrderLinesIdToArray" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersIdWithOrderLinesNestedWhereId" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.OrdersOrderLinesId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetAndUsers" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetAndUsersAndEntries" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetAndUsersAndEntriesTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetAndUsersTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUserLastLoginDates" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUserLastLoginDatesAndEntriesIds" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUsers" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUsersAndEntries" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUsersAndEntriesTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetIdAndUsersTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetUsers" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetUsersAndEntries" description="NH-3333" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetUsersAndEntriesTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.NestedSelectsTests.TimesheetUsersTransparentProjection" description="NH-2986" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullComparisonTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullEquality" executed="True" result="Success" success="True" asserts="60" />
                      <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullEqualityInverted" executed="True" result="Success" success="True" asserts="81" />
                      <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullInequality" executed="True" result="Success" success="True" asserts="62" />
                      <test-case name="NHibernate.Test.Linq.NullComparisonTests.NullInequalityInverted" executed="True" result="Success" success="True" asserts="50" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OperatorTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.OperatorTests.Mod" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PagingTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.PagingTests.CountAfterTakeShouldReportTheCorrectNumber" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Count with Skip or Take is incorrect (Skip / Take done on the query not the HQL, so get applied at the wrong point]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.Customers11to20" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.Customers11to20And21to30ShouldNoCacheQuery" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.Customers1to5" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.CustomersChainedSkip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Multiple Takes (or Skips) not handled correctly]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.CustomersChainedTake" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Multiple Takes (or Skips) not handled correctly]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.DescendingOrderedPagedProductsWithInnerProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.DescendingOrderedPagedProductsWithOuterProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.OrderedPagedProductsWithInnerProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.OrderedPagedProductsWithOuterProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjections" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningNestedAnonymous" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningNestedClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningOrderedConstrainedNestedAnonymous" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningOrderedConstrainedNestedClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningOrderedNestedAnonymous" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PageBetweenProjectionsReturningOrderedNestedClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithInnerAndOuterWhereClauses" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClause" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseAndComplexProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseAndProjection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseEquivalent" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseOrderedNestedAnonymous" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseOrderedNestedAnonymousEquivalent" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseOrderedNestedClass" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseOrderedNestedClassEquivalent" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.PagingTests.PagedProductsWithOuterWhereClauseResort" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParameterisedQueries" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.CanSpecifyParameterTypeInfo" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Conditionals_Return_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Null_Returns_Different_Keys" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_OfType_Returns_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Member_Initialisation_Returns_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Properties_Return_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Select_Types_Return_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Unary_Operation_Returns_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Different_Where_Clauses_Return_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Expressions_Differing_Only_By_Constants_Return_The_Same_Key" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Linq.ParameterisedQueries.Identical_Expressions_Return_The_Same_Key" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PatientTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnManyToOneOfComponent" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnManyToOneOfManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfComponent" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOneOfComponent" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfManyToOneOfManyToOne" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.PatientTests.CanQueryOnPropertyOfOneToMany" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ProjectionsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanCallLocalMethodsInAnonymousTypeInSelect" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanCallLocalMethodsInSelect" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanPerformStringOperationsInSelect" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectCollections" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectCollectionsInsideAnonymousType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectComplexDictionaryIndexer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectComplexParameterDictionaryIndexer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectManyCollections" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectParameterArrayContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectParameterDictionaryContainsKey" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectParameterDictionaryIndexer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectParameterStringContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanProjectParameterSubstring" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.CanUseConstantStringInProjection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousType" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeAndConcatenateFields" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithAddition" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithCollection1" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithCollection2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithCollection3" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithDivision" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithMultiply" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithSubstraction" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectAnonymousTypeWithWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectConditionals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectKnownType" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectKnownTypeWithCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectKnownTypeWithCollection2" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectNestedAnonymousTypeWithCollection" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectNestedAnonymousTypeWithProjectedCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectNestedKnownTypeWithCollection" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.ProjectionsTests.ProjectUserNames" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyMethodMappingTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.PropertyMethodMappingTests.CanExecuteCountInSelectClause" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.PropertyMethodMappingTests.CanExecuteCountInWhereClause" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryCacheableTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.CacheableBeforeOtherClauses" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.CacheableRegionBeforeOtherClauses" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.GroupByQueryIsCacheable" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.GroupByQueryIsCacheable2" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable2" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheable3" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.QueryCacheableTests.QueryIsCacheableWithRegion" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryReuseTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterAggregate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterAverage" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterCount" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterCountWithPredicate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterFirst" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterFirstOrDefault" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterLongCount" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterLongCountWithPredicate" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterMax" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterMin" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSingle" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSingleOrDefault" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.QueryReuseTests.CanReuseAfterSum" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryTimeoutTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.QueryTimeoutTests.CanSetTimeoutBeforeSkipOnLinqOrderedPageQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.QueryTimeoutTests.CanSetTimeoutOnLinqGroupPageQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.QueryTimeoutTests.CanSetTimeoutOnLinqPagingQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.QueryTimeoutTests.CanSetTimeoutOnLinqQueries" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegresstionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.RegresstionTests.CanUseNullConstantAndRestriction" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.RegresstionTests.HierarchicalQueries_InlineConstant" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.RegresstionTests.HierarchicalQueries_Variable" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SelectionTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanAggregateWithAnonymousType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanGetCountOnQueryWithAnonymousType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanGetFirstWithAnonymousType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanProjectWithCast" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectAfterOrderByAndTake" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectBinaryExpressions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectConditionalEntity" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectConditionalKnownTypes" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectConditionalObject" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectFirstElementFromChildCollection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectManyWithCast" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousTypeWithComponentReference" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedAnonymousTypeWithMultipleReferences" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedMemberInitExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectNestedMemberInitWithinNewExpression" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectSingleProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectUsingMemberInitExpression" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithAggregateSubQuery" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithAnySubQuery" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithMultipleBinaryExpressions" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithMultipleBinaryExpressionsWithOr" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWithProxyInterface" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.SelectionTests.CanSelectWrappedType" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatelessSessionQueringTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.StatelessSessionQueringTest.AggregateWithStartsWith" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.StatelessSessionQueringTest.WhenQueryThroughStatelessSessionThenDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhereSubqueryTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.CategoriesSubQueryWithAsQueryableAndExternalPredicateWithClosure" description="NH-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.CategoriesWithDiscountedProducts" description="NH-2654" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.HqlOrderLinesWithImpliedJoinAndSubQuery" description="NH-3002" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.HqlOrderLinesWithInnerJoinAndSubQuery" description="NH-3002" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.NullComparedToMemberInitExpressionInWhereClause" description="NH-3423" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.NullComparedToNewExpressionInWhereClause" description="NH-3423" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrderLinesWithImpliedJoinAndSubQuery" description="NH-2999 and NH-2988" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery1" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery2" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery3" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery4" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery5" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery6" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery7" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubquery8" description="NH-2904" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.OrdersWithSubqueryWithJoin" description="NH-3147" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubquery" description="NH-2899" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubqueryAsIEnumerable" description="NH-2762" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubqueryAsIGrouping" description="NH-2762" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubqueryReturningBoolFirstOrDefaultEq" description="NH-3190" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubqueryReturningProjectionBoolFirstOrDefaultEq" description="NH-3190" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.ProductsWithSubqueryReturningStringFirstOrDefaultEq" description="NH-3190" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.SubqueryWhereFailingTest" description="NH-3111" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.SubqueryWhereFailingTest2" description="NH-3111" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.SubqueryWhereFailingTest3" description="NH-3111" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.SubqueryWithGroupBy" description="NH-3155" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.SubselectCanHaveBoolResult" description="NH-3190" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsSubQueryWithAsQueryableAndExternalPredicateWithArray" description="NH-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsSubQueryWithAsQueryableAndExternalPredicateWithSecondLevelClosure" description="NH-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsSubQueryWithAsQueryableWithArray" description="NH-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubquery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryComparedToProperty" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need to coalesce the subquery - timesheet with no entries should return average of 0, not null]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryComparedToPropertyReversed" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need to coalesce the subquery - timesheet with no entries should return average of 0, not null]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithAverageSubqueryReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubquery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryComparedToProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryComparedToPropertyReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithCountSubqueryReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubquery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryComparedToProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryComparedToPropertyReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMaxSubqueryReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubquery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryComparedToProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryComparedToPropertyReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithMinSubqueryReversed" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimesheetsWithNoEntries" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithStringContainsSubQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithStringContainsSubQueryWithAsQueryable" description="NG-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithStringContainsSubQueryWithAsQueryableAndExternalPredicate" description="NH-2998" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubquery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryComparedToProperty" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need to coalesce the subquery - timesheet with no entries should return sum of 0, not null]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryComparedToPropertyReversed" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need to coalesce the subquery - timesheet with no entries should return sum of 0, not null]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereSubqueryTests.TimeSheetsWithSumSubqueryReversed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WhereTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Linq.WhereTests.AndWithTrueReducesTo1Eq0Clause" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.AnimalsWithFathersSerialNumberListContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.AnimalsWithFathersSerialNumberListContainsWithLocalVariable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.BitwiseQuery3" executed="True" result="Success" success="True" asserts="1" />
                      <test-suite type="ParameterizedTest" name="CanUseCompareInQuery" description="NH-3366" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) &lt; 0),30,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) &lt;= 0),31,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) == 0),1,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) != 0),76,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) &gt;= 0),47,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.Name.ToLower().CompareTo(&quot;konbu&quot;) &gt; 0),46,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (0 &lt;= p.Name.ToLower().CompareTo(&quot;konbu&quot;)),47,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (0 == p.Name.ToLower().CompareTo(&quot;konbu&quot;)),1,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (0 &gt; p.Name.ToLower().CompareTo(&quot;konbu&quot;)),30,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.UnitsInStock.CompareTo(13) &lt; 0),15,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.UnitsInStock.CompareTo(13) &gt;= 0),62,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.ShippingWeight.CompareTo(4.98) &lt;= 0),17,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.ShippingWeight.CompareTo(4.98) &lt;= 0),17,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (p.UnitPrice.Value.CompareTo(14) &lt;= 0),24,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; (0 &gt;= p.UnitPrice.Value.CompareTo(14)),24,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; p.OrderLines.Any(o =&gt; (o.Order.ShippingDate.Value.CompareTo(DateTime.Now) &lt;= 0)),77,False)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQuery(p =&gt; p.OrderLines.Any(o =&gt; (0 &gt;= o.Order.ShippingDate.Value.CompareTo(DateTime.Now))),77,False)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="NHibernate.Test.Linq.WhereTests.CanUseCompareInQueryWithNonConstantZero" description="NH-3366" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.FirstElementWithQueryThatReturnsNoResults" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.FirstElementWithWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.FirstOrDefaultElementWithQueryThatReturnsNoResults" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.NoWhereClause" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.OfTypeWithWhere" description="NH-2375" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.OfTypeWithWhereAndProjection" description="NH-2375" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.OrWithTrueReducesTo1Eq1Clause" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.ProductWithDoubleStringContainsAndNotNull" description="NH-3337" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeCast" description="NH-2206" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeUpCastWithExtensionMethod" description="NH-2206" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeWithExtensionMethod" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SearchOnObjectTypeWithIsKeyword" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SingleElementWithQueryThatReturnsMultipleResults" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SingleElementWithQueryThatReturnsNoResults" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.SingleOrDefaultElementWithQueryThatReturnsNoResults" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.TestDataContext" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithCollectionContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithCollectionNotContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.TimesheetsWithEnumerableContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.TimeSheetsWithSamePredicateTwoTimes" description="NH-3009" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersByNameAndRegistrationDate" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAfterY2K" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrAfterY2K" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrAfterY2K_And_Before2001" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2K" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2KAndNamedNHibernate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredAtOrBeforeY2KOrNamedNHibernate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersRegisteredBeforeY2K" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithArrayContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithArrayNotContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithAssociatedEntityProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithComponentProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithDynamicInvokedExpression" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithEmptyEnumerable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithEmptyInlineEnumerable" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Inline empty list expression does not evaluate correctly]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithEmptyList_NH2400" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithEntityPropertiesThreeLevelsDeep" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithListContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithListContains_MutatingListDoesNotBreakOtherSessions" description="NH-3413" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithListNotContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNestedComponentProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNonNullLoginDate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithNullLoginDate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithoutRole" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithRole" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringContainsAndNotNullName" description="NH-3261" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringContainsAndNotNullNameComplicated" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringContainsAndNotNullNameHQL" description="NH-3261" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.UsersWithStringNotContains" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.WhenTheSourceOfConstantIsICollectionThenNoThrows" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.WhenTheSourceOfConstantIsIListThenNoThrows" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Linq.WhereTests.WhereWithConstantExpression" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ListIndex" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ListIndexFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ListIndex.ListIndexFixture.ListIndexBaseIsUsed" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ListIndex.SimpleOneToManyTest.ShouldIncludeTheListIdxInserting" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Logging" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Log4NetLoggerTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Logging.Log4NetLoggerTest.CallingMethods" executed="True" result="Success" success="True" asserts="19" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LoggerProviderTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Logging.LoggerProviderTest.LoggerProviderCanCreateLoggers" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Logging.LoggerProviderTest.WhenNotConfiguredAndLog4NetExistsThenUseLog4NetFactory" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MappingByCode" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="ConventionModelMapperTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ComponetsAccessorTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.ComponetsAccessorTests.WhenMapComoponetWithNestBidirectionalComponentThenMapParentAccessor" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponetsParentAccessorTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.ComponetsParentAccessorTests.WhenCollectionOfComoponetsWithNestBidirectionalComponentThenMapParentAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.ComponetsParentAccessorTests.WhenCollectionOfComoponetsWithParentThenMapParentAccessor" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[No fixed yet. When the parent is an entity it should be managed explicitly as explicitly is managed the relation (Parent instead many-to-one)]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.ComponetsParentAccessorTests.WhenMapComoponetWithNestBidirectionalComponentThenMapParentAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.ComponetsParentAccessorTests.WhenMapComoponetWithParentThenMapParentAccessor" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[No fixed yet. When the parent is an entity it should be managed explicitly as explicitly is managed the relation (Parent instead many-to-one)]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyToFieldAccessorTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenAutoPropertyNoAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenFieldAccessToField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenPropertyWithDifferentBackFieldMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenPropertyWithoutFieldNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenPropertyWithSameBackFieldNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenReadOnlyPropertyWithSameBackFieldNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.PropertyToFieldAccessorTest.WhenSetOnlyPropertyNoMatch" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SafePoidTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.SafePoidTests.WhenClassWithoutPoidNorGeeneratorThenApplyGuid" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.SafePoidTests.WhenClassWithoutPoidWithGeneratorThenApplyDefinedGenerator" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.SafePoidTests.WhenPoidNoSetterThenApplyNosetter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="VersionOnBaseClassIntegrationTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.VersionOnBaseClassIntegrationTest.WhenPropertyVersionFromBaseEntityThenFindItAsVersion" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ConventionModelMapperTests.VersionOnBaseClassIntegrationTest.WhenVersionFromBaseEntityThenShouldntMapVersionAsProperty" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CustomizerHolderMergeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeAnyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeBagPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeClassMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeCollectionPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeComponentAsIdAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeComponentAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeComponentAttributesMapperOnProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeDynamicComponentAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeElementMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeIdBagPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeJoinAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeJoinedSubclassAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeListPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeManyToAnyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeManyToManyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeManyToOneMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeMapKeyManyToManyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeMapKeyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeMapPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeOneToManyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeOneToOneMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergePropertyMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeSetPropertiesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeSubclassMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.MergeShouldMergeUnionSubclassAttributesMapper" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.CustomizerHolderMergeTest.WhenMergeWithNullThenNotThrow" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ExplicitlyDeclaredModelTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ComponentAsIdTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentAsIdTest.CanHaveSameComponentAsIdMultipleTimesWithDifferentColumnNamesForSameProperty" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponentMappingRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsComponentThenIsRegistered" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsComponetThenCantRegisterAsJoinedSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsComponetThenCantRegisterAsRootEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsComponetThenCantRegisterAsSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsComponetThenCantRegisterAsUnionSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.ComponentMappingRegistrationTests.WhenRegisteredAsEntityThenCantRegisterAsComponent" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="JoinedSubclassMappingStrategyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.JoinedSubclassIsAbstract" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.WhenRegisteredAsDeppJoinedSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.WhenRegisteredAsJoinedSubclassThenCantRegisterAsSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.WhenRegisteredAsJoinedSubclassThenCantRegisterAsUnionSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.WhenRegisteredAsJoinedSubclassThenIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassMappingStrategyTests.WhenRegisteredAsJoinedSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="JoinedSubclassSequenceRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassSequenceRegistrationTests.WhenRegisterJoinedSubclassBeforeRootThenIsRegistered" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassSequenceRegistrationTests.WhenRegisterJoinedSubclassWithNoRootThenCanAskForIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.JoinedSubclassSequenceRegistrationTests.WhenRegisterJoinedSubclassWithNoRootThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RootClassMappingStrategyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenMultipleRootRegisteredThenThrowsMappingException" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredAsRootThenCantRegisterAsJoinedSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredAsRootThenCantRegisterAsSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredAsRootThenCantRegisterAsUnionSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredAsRootThenDoesNotRegisterTheStrategy" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredAsRootThenIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredConcreteClassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredDeepConcreteClassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredDeepSubclassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredJoinedDeepSubclassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredJoinedSubclassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.RootClassMappingStrategyTests.WhenRegisteredSubclassThenTheStrategyIsDefinedEvenForRoot" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SplitPropertiesRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SplitPropertiesRegistrationTests.WhenRegisterPropertySplitMoreThanOnceThenIgnore" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SplitPropertiesRegistrationTests.WhenRegisterPropertySplitsThenTypeHasSplitGroups" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassMappingStrategyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.SubclassIsAbstract" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.WhenRegisteredAsDeepSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.WhenRegisteredAsSubclassThenCantRegisterAsJoinedSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.WhenRegisteredAsSubclassThenCantRegisterAsUnionSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.WhenRegisteredAsSubclassThenIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassMappingStrategyTests.WhenRegisteredAsSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassSequenceRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassSequenceRegistrationTests.WhenRegisterSubclassBeforeRootThenIsRegistered" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.SubclassSequenceRegistrationTests.WhenRegisterSubclassWithNoRootThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UnionSubclassMappingStrategyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.UnionSubclassIsAbstract" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.WhenRegisteredAsDeepUnionSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.WhenRegisteredAsUnionSubclassThenCantRegisterAsJoinedSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.WhenRegisteredAsUnionSubclassThenCantRegisterAsSubclass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.WhenRegisteredAsUnionSubclassThenIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassMappingStrategyTests.WhenRegisteredAsUnionSubclassThenIsRegistered" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UnionSubclassSequenceRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassSequenceRegistrationTests.WhenRegisterUnionSubclassBeforeRootThenIsRegistered" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitlyDeclaredModelTests.UnionSubclassSequenceRegistrationTests.WhenRegisterUnionSubclassWithNoRootThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ExplicitMappingTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BasicMappingOfSimpleClass" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.AbstractClass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.MapClassWithIdAndProperty" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.MapClassWithIdAndPropertyWithParamsDictionary" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.WhenDuplicateClassDoesNotDuplicateMapping" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.WhenDuplicatePropertiesDoesNotDuplicateMapping" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.WhenMapClassWithoutIdAndWithoutGeneratorThenTypeShouldHaveValue" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.BasicMappingOfSimpleClass.WhenMapClassWithoutIdThenApplyTypeOfGeneratorDef" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="JoinDynamicComponentTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenDynamicComponentIsMappedOnRootThenItBelongsToRootTable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenJoinedDynamicComponentIsMappedOnJoinThenItBelongsToJoinTable" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenJoinedPropertyIsMappedOnJoinThenItBelongsToJoinTable" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenJoinedRelationIsMappedOnJoinThenItBelongsToJoinTable" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenPropertyIsMappedOnRootThenItBelongsToRootTable" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.JoinDynamicComponentTests.WhenRelationIsMappedOnRootThenItBelongsToRootTable" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MappingOfInternalMembersOnRootEntity" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.MappingOfInternalMembersOnRootEntity.MapClassWithInternalIdAndProperty" executed="True" result="Success" success="True" asserts="13" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OptimisticLockModeTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExplicitMappingTests.OptimisticLockModeTests.OptimisticLockModeTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ExpliticMappingTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AllPropertiesRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapAnyWithWrongTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapBagWithWrongElementTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapComponentWithWrongElementTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapDictionaryWithWrongKeyTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapDictionaryWithWrongValueTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapIdBagWithWrongElementTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapListWithWrongElementTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapManyToOneWithWrongTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapOneToOneWithWrongTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapPropertiesInTheBaseJumpedClassThenMapInInherited" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapPropertiesInTheBaseJumpedClassUsingMemberNameThenMapInInherited" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.AllPropertiesRegistrationTests.WhenMapSetWithWrongElementTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BagOfNestedComponentsWithParentTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.BagOfNestedComponentsWithParentTest.WhenMapClasByClassThenAutodiscoverParent" executed="True" result="Success" success="True" asserts="10" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.BagOfNestedComponentsWithParentTest.WhenMapClassElementsThenMapParent" executed="True" result="Success" success="True" asserts="11" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.BagOfNestedComponentsWithParentTest.WhenMapClassWithWrongElementsThenAutodiscoverParent" executed="True" result="Success" success="True" asserts="10" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ClassWithComponentsTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ClassWithComponentsTest.ComponentMappingJustOnceDemo" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ClassWithoutNamespaceTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ClassWithoutNamespaceTests.ShouldBeAbleToMapClassWithoutNamespace" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ColumnsNamingConvetions" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ColumnsNamingConvetions.MapClassWithConventions" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ColumnsNamingConvetions.MapClassWithHardConventions" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponentAsIdTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.CanSpecifyUnsavedValue" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapAttributesOfCustomizedComponentUsedAsComponentAsIdWithCustomizationOverrideThenUseComponentAsIdCustomization" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapAttributesOfCustomizedComponentUsedAsComponentAsIdWithCustomizationThenUseInComponentAsIdCustomization" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapComponentAsIdAttributesThenMapAttributes" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapComponentAsIdThenMapItAndItsProperties" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapComponentUsedAsComponentAsIdThenMapItAndItsProperties" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenMapCustomizedComponentUsedAsComponentAsIdWithCustomizationThenUseComponentAsIdCustomization" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComponentAsIdTests.WhenPropertyUsedAsComposedIdThenRegister" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComposedIdTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComposedIdTests.WhenPropertyUsedAsComposedIdAndPropertiesAndNaturalIdThenMapOnlyAsComposedId" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComposedIdTests.WhenPropertyUsedAsComposedIdAndPropertiesThenNotUsedAsSimpleProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComposedIdTests.WhenPropertyUsedAsComposedIdThenNotUsedAsSimpleProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComposedIdTests.WhenPropertyUsedAsComposedIdThenRegister" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ComposedIdTests.WhenSuperclassPropertyUsedAsComposedIdThenRegister" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="ConformistMappingRegistrationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ClassMappingRegistrationTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ClassMappingRegistrationTest.WhenRegisterClassMappingThenMapTheClass" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ClassMappingRegistrationTest.WhenRegisterClassMappingThroughCollectionOfTypeThenFilterValidMappings" executed="True" result="Success" success="True" asserts="10" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ClassMappingRegistrationTest.WhenRegisterClassMappingThroughCollectionOfTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ClassMappingRegistrationTest.WhenRegisterClassMappingThroughTypeThenGetMapping" executed="True" result="Success" success="True" asserts="9" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ClassMappingRegistrationTest.WhenRegisterClassMappingThroughTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="9" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ComponentMappingRegistrationTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ComponentMappingRegistrationTest.WhenRegisterClassMappingThenMapTheClass" executed="True" result="Success" success="True" asserts="6" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ComponentMappingRegistrationTest.WhenRegisterClassMappingThroughTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="6" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="JoinedSubclassMappingRegistration" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.JoinedSubclassMappingRegistration.WhenRegisterClassMappingThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.JoinedSubclassMappingRegistration.WhenRegisterClassMappingThroughTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ModelMapperAddMappingByTypeTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ModelMapperAddMappingByTypeTests.WhenRegisterClassMappingThroughTypeThenCheckIConformistHoldersProvider" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.ModelMapperAddMappingByTypeTests.WhenRegisterClassMappingThroughTypeThenCheckParameterLessCtor" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SubclassMappingRegistration" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.SubclassMappingRegistration.WhenRegisterClassMappingThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.SubclassMappingRegistration.WhenRegisterClassMappingThroughTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="UnionSubclassMappingRegistrationTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.UnionSubclassMappingRegistrationTest.WhenRegisterClassMappingThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                              <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.ConformistMappingRegistrationTests.UnionSubclassMappingRegistrationTest.WhenRegisterClassMappingThroughTypeThenMapTheClass" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DynamicComponentMappingTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.DynamicComponentMappingTests.WhenMapDynCompoAttributesThenMapAttributes" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.DynamicComponentMappingTests.WhenMapDynCompoPropertiesThenShouldAssignPropertyType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.DynamicComponentMappingTests.WhenMapDynCompoThenMapItAndItsProperties" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IdBagMappingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.IdBagMappingTest.WhenIdBagWithManyToManyThenMapIt" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.IdBagMappingTest.WhenIdBagWithOneToManyThenThrow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MappingOfPrivateMembersOnRootEntity" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.MappingOfPrivateMembersOnRootEntity.MapClassWithIdAndProperty" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.MappingOfPrivateMembersOnRootEntity.WhenPrivateMemberDoesNotExistsThenThrow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NaturalIdTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NaturalIdTests.WhenDefineEmptyNaturalIdThenNoMapIt" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NaturalIdTests.WhenDefineNaturalIdThenRegister" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NestedComponetsTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenCollectionOfComoponetsWithManyToOneThenMapManyToOne" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenCollectionOfComoponetsWithNestBidirectionalComponentThenMapParent" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenCollectionOfComoponetsWithParentThenMapParent" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenMapComoponetWithManyToOneThenMapManyToOne" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenMapComoponetWithNestBidirectionalComponentThenMapParent" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.NestedComponetsTests.WhenMapComoponetWithParentThenMapParent" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PoidTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.PoidTests.WhenPropertyUsedAsPoidThenRegister" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RootClassPropertiesSplitsTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.RootClassPropertiesSplitsTests.WhenMapSplittedPropertiesThenEachPropertyIsInItsSplitGroup" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.RootClassPropertiesSplitsTests.WhenSplittedPropertiesThenRegister" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.RootClassPropertiesSplitsTests.WhenSplittedPropertiesThenRegisterSplitGroupIds" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassPropertiesSplitsTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.SubclassPropertiesSplitsTests.WhenMapSplittedPropertiesThenEachPropertyIsInItsSplitGroup" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.SubclassPropertiesSplitsTests.WhenSplittedPropertiesThenRegister" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.SubclassPropertiesSplitsTests.WhenSplittedPropertiesThenRegisterSplitGroupIds" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="VersionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.VersionTests.WhenPropertyUsedAsVersionThenRegister" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.ExpliticMappingTests.VersionTests.WhenPropertyVersionFromBaseEntityThenFindItAsVersion" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GeneratorTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingByCode.GeneratorTests.TestGenerators" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.MappingByCode.GeneratorTests.TestUUIDHexWithParameters" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ImportTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingByCode.ImportTest.ImportClass" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="IntegrationTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="NH2728" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2728.SampleTest.ShouldBeAbleToGetFromToyToAnimals" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH2738" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2738.Fixture.DefaultOfWierdEnumIsZero" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2738.Fixture.WhenMapEmptyEnumThenDoesNotThrowExplicitException" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH2825" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2825.Fixture.VerifyManyEndOfManyToOneMappingUsingPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2825.Fixture.VerifyOneEndOfManyToOneMappingUsingPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2825.FixtureByCode.Fixture.VerifyManyEndOfManyToOneMappingUsingPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH2825.FixtureByCode.Fixture.VerifyOneEndOfManyToOneMappingUsingPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3041" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="OneToOneToPropertyReference" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3041.OneToOneToPropertyReference.ShouldConfigureSessionCorrectly" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3105" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3105.Fixture.CanMapComponentAsIdWhenComponentIsDeclaredInBaseClass" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3105.Fixture.CanMapComponentAsIdWhenComponentIsDeclaredInClass" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3105.Fixture.CanMapIdWhenIdIsDeclaredInBaseClass" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3110" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3110.Fixture.CanSetPolymorphism" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3135" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MappingByCodeTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3135.MappingByCodeTest.Bag_InBaseEntity_WithDifferentTables_ShouldBeMappedAccordingly" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3135.MappingByCodeTest.IdBag_InBaseEntity_WithDifferentTables_ShouldBeMappedAccordingly" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3135.MappingByCodeTest.List_InBaseEntity_WithDifferentTables_ShouldBeMappedAccordingly" executed="True" result="Success" success="True" asserts="13" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3135.MappingByCodeTest.Set_InBaseEntity_WithDifferentTables_ShouldBeMappedAccordingly" executed="True" result="Success" success="True" asserts="13" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3140" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="ParameterizedTest" name="ExplicitColumnNameIsAlwaysMapped" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3140.Fixture.ExplicitColumnNameIsAlwaysMapped(&quot;DifferentFromBar&quot;)" executed="True" result="Success" success="True" asserts="1" />
                                  <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3140.Fixture.ExplicitColumnNameIsAlwaysMapped(&quot;Bar&quot;)" executed="True" result="Success" success="True" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3269" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="FixtureNonPublicProperty" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3269.FixtureNonPublicProperty.ShouldNotThrowExceptionWhenTryingToSaveInherited2WithDuplicateName" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3269.FixtureNonPublicProperty.ShouldThrowExceptionWhenTryingToSaveInherited1WithDuplicateName" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="FixturePublicProperty" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3269.FixturePublicProperty.ShouldNotThrowExceptionWhenTryingToSaveInherited2WithDuplicateName" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3269.FixturePublicProperty.ShouldThrowExceptionWhenTryingToSaveInherited1WithDuplicateName" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3280" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="OneToOneToInheritedProperty" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3280.OneToOneToInheritedProperty.ShouldConfigureSessionCorrectly" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3657" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="OneToOneToPropertyReferenceWithExplicitClassSet" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3657.OneToOneToPropertyReferenceWithExplicitClassSet.ShouldConfigureSessionCorrectly" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3667" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MapFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapComponentComponent" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapComponentElement" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapComponentEntity" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapElementComponent" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapElementElement" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapElementEntity" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapEntityComponent" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapEntityElement" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3667.MapFixture.TestMapEntityEntity" executed="True" result="Success" success="True" asserts="3" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="NH3741" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MapFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3741.MapFixture.TestMapManyToManyGenericCollectionBasedOnEntity" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3741.MapFixture.TestMapManyToManyGenericCollectionBasedOnInterface" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.IntegrationTests.NH3741.MapFixture.TestMapManyToManyGenericCollectionBasedOnItem" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="MappersTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AbstractPropertyContainerMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.AddDynamicComponentProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CallAnyMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CallDictionaryMappers" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CallDynamicComponentMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CallPropertyMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CanAddPropertyOfInheritedType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CanAddSimpleProperty" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CantAddPropertyOfNotInheritedType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CantCreateWithoutContainerType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AbstractPropertyContainerMapperTest.CantCreateWithoutHbmMapping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AnyMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.AtCreationSetColumnsUsingMemberName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.AtCreationSetIdType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.AtCreationSetTheTwoRequiredColumnsNodes" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.AutoCleanInvalidCascade" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetCascade" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetIdTypeThroughGenericMethod" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetIdTypeThroughIType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetIdTypeThroughType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetIndex" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetInsert" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetLazy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetMetaTypeThroughGenericMethod" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetMetaTypeThroughIType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetMetaTypeThroughType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.CanSetUpdate" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.IdMetaTypeShouldBeImmutableAfterAddMetaValues" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.MetaTypeShouldBeImmutable" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenDuplicatedMetaValueThenRegisterOne" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenDuplicatedMetaValueWithDifferentTypeThenThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenNullParameterThenThrow" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetFirstMetaValueThenSetMetaTypeIfNotClass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetIdColumnPropertiesThenWorkOnSameHbmColumnCreatedAtCtor" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetMetaColumnPropertiesThenWorkOnSameHbmColumnCreatedAtCtor" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetMetaValueWithClassThenThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetSecondMetaValueThenCheckCompatibility" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.AnyMapperTest.WhenSetTwoMetaValueThenHasTwoMetaValues" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="ClassMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="CheckMixingPoidStrategiesTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixComponentAsIdWithComposedIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixComponentAsIdWithSimpleIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixComposedIdWithComponentAsIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixComposedIdWithSimpleIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixSimpleIdWithComponentAsIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.CheckMixingPoidStrategiesTests.WhenMixSimpleIdWithComposedIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ClassMapperWithJoinPropertiesTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ClassMapperWithJoinPropertiesTest.WhenDefineJoinThenAddJoinWithTableNameAndKey" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ClassMapperWithJoinPropertiesTest.WhenDefineJoinThenCallJoinMapper" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ClassMapperWithJoinPropertiesTest.WhenDefineMoreJoinsThenTableNameShouldBeUnique" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ClassMapperWithJoinPropertiesTest.WhenDefineMoreJoinsWithSameIdThenUseSameJoinMapperInstance" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ComponetAsIdTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ComponetAsIdTests.WhenClassWithComponentIdThenTheIdIsConpositeId" executed="True" result="Success" success="True" asserts="5" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ComponetAsIdTests.WhenComponentIdCustomizedMoreThanOnceThenMerge" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ComponetAsIdTests.WhenMapExternalMemberAsComponentIdThenThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ComposedIdTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ComposedIdTests.WhenClassWithComposedIdThenTheIdIsConpositeId" executed="True" result="Success" success="True" asserts="5" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.ComposedIdTests.WhenComposedIdCustomizedMoreThanOnceThenMerge" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SetPersisterTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.SetPersisterTests.CanSetPersister" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TablesSincronizationTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.TablesSincronizationTests.WhenSetMoreSyncThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenDoesNotDuplicate" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.TablesSincronizationTests.WhenSetSyncMixedWithNullAndEmptyThenAddOnlyValid" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.ClassMapperTests.TablesSincronizationTests.WhenSetSyncWithNullThenDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CollectionIdMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetColumnName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGenerator" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGeneratorGuid" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGeneratorGuidComb" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGeneratorIdentity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGeneratorSequence" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetGeneratorWithParameters" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CanSetLength" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.CantSetGeneratorAssigned" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.WhenCreateThenHasDefaultTypeAndGenerator" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.WhenForceTypeThenNotChangeType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.CollectionIdMapperTests.WhenSetGeneratorThenChangeType" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponentAsIdTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComponentAsIdTests.CallMapManyToOneMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComponentAsIdTests.CallPropertyMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComponentAsIdTests.CanMapManyToOne" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComponentAsIdTests.CanMapProperty" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComponentAsIdTests.WhenCreatedThenSetTheComponentClass" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComposedIdMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComposedIdMapperTests.CallMapManyToOneMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComposedIdMapperTests.CallPropertyMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComposedIdMapperTests.CanMapManyToOne" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ComposedIdMapperTests.CanMapProperty" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="DynamicComponentMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AnyPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.AnyPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.AnyPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.AnyPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="BagPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.BagPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.BagPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.BagPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ComponentPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ComponentPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ComponentPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ComponentPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="DynCompAttributesSettingTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynCompAttributesSettingTest.CanAddSimpleProperty" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynCompAttributesSettingTest.CanSetAccessor" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynCompAttributesSettingTest.CanSetInsert" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynCompAttributesSettingTest.CanSetOptimisticLock" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynCompAttributesSettingTest.CanSetUpdate" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="DynComponentPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynComponentPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynComponentPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.DynComponentPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="IdBagPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.IdBagPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.IdBagPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.IdBagPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ListPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ListPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ListPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ListPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ManyToOnePropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ManyToOnePropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ManyToOnePropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.ManyToOnePropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="MapPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.MapPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.MapPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.MapPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="OneToOnePropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.OneToOnePropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.OneToOnePropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.OneToOnePropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SetPropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SetPropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SetPropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SetPropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SimplePropertyOnDynamicCompoTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SimplePropertyOnDynamicCompoTests.WhenAddThenHas" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SimplePropertyOnDynamicCompoTests.WhenCustomizeAccessorThenIgnore" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.DynamicComponentMapperTests.SimplePropertyOnDynamicCompoTests.WhenCustomizeThenCallCustomizer" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IdBagMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.CallKeyMapper" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.CanChangeAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.CanSetAFilterThroughAction" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.CanSetCache" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.CanSetMoreFiltersThroughAction" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetBatchSize" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetCollectionTypeByGenericType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetCollectionTypeByType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetCollectionTypeByWrongTypeShouldThrow" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetFetchMode" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetInverse" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetLazy" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetMutable" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.SetWhere" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenActionIsNullThenAddFilterName" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenConfigureIdMoreThanOnceThenUseSameMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenConfigureIdThenCallMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenCreatedHasId" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenSameNameThenOverrideCondition" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdBagMapperTest.WhenSetTwoCachePropertiesInTwoActionsThenSetTheTwoValuesWithoutLostTheFirst" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IdMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetColumnName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGenerator" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorAssigned" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorEnhancedSequence" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorEnhancedTable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorForeign" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorGuid" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorGuidComb" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorIdentity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorSequence" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetGeneratorWithParameters" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetLength" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetPrecision" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetScale" executed="True" result="Success" success="True" asserts="1" />
                          <test-suite type="ParameterizedTest" name="CanSetUnsavedValue" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetUnsavedValue(null,&quot;null&quot;)" description="CanSetExplicitNull" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSetUnsavedValue(-1,&quot;-1&quot;)" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.CanSqlType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.UnsavedValueUnsetWhenNotSet" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.IdMapperTest.WhenHasMemberCanSetAccessor" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="JoinedSubclassMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SetPersisterTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.SetPersisterTests.CanSetPersister" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TablesSincronizationTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.TablesSincronizationTests.WhenSetMoreSyncThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenDoesNotDuplicate" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.TablesSincronizationTests.WhenSetSyncMixedWithNullAndEmptyThenAddOnlyValid" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinedSubclassMapperTests.TablesSincronizationTests.WhenSetSyncWithNullThenDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="JoinMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CallKeyMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetCatalog" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetFetch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetInverse" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetOptional" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetSchema" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetSqlInsert" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetSqlSubselect" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.CanSetTable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.SetSqlDelete" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.SetSqlUpdate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenAddPropertyThenAddItem" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenCallKeyMapperMoreThanOnceThenKeyMapperIsTheSame" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenCallKeyMapperThenKeyMapperIsNotNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenCreateThenSetDefaultTableName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenCreateWithEmptySplitGroupThenThrows" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenCreateWithNullHbmJoinThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenSetTableNameEmptyThenThrows" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.JoinMapperTests.WhenTableNameChangesValueThenNotify" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ManyToOneMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.AfterSetMultiColumnsCantSetSimpleColumn" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.AssignCascadeStyle" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanForceClassRelation" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetFk" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetInsert" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetLazyness" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetNotFoundWithExceptionMode" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetNotFoundWithIgnoreMode" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetPropertyRefName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.CanSetUpdate" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.SetUniqueToMultiColumn" description="NH-3618" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenForceClassRelationToIncompatibleTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetBasicColumnValuesMoreThanOnesThenMergeColumn" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetBasicColumnValuesThenSetPlainValues" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetBasicColumnValuesThroughShortCutThenMergeColumn" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetColumnValuesThenAddColumnTag" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetDefaultColumnNameThenDoesNotSetTheName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetDifferentColumnNameThenSetTheName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetFetchModeToJoinThenSetFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetFetchModeToSelectThenResetFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetMultiColumnsValuesThenAddColumns" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.ManyToOneMapperTest.WhenSetMultiColumnsValuesThenAutoassignColumnNames" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="NaturalIdMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.NaturalIdMapperTest.CanSetMutable" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OneToOneMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.AssignCascadeStyle" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.CanSetAccessor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.CanSetConstrained" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.CanSetForeignKeyName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.CanSetFormula" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.CanSetLazyness" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenForeignKeyIsNullForeignKeyMappingIsNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenMemberPropertyRefAcceptOnlyMemberOfExpectedType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenNoMemberPropertyRefAcceptAnything" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenNullMemberPropertyRefNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenSetFormulaWithMultipleLinesThenSetFormulaNode" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.OneToOneMapperTest.WhenSetFormulaWithNullThenSetFormulaWithNull" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertyMapperTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.AfterSetMultiColumnsCantSetSimpleColumn" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenCreateWithGivenAccessorMapperThenUseTheGivenAccessoMapper" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetBasicColumnValuesMoreThanOnesThenMergeColumn" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetBasicColumnValuesThenSetPlainValues" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetBasicColumnValuesThroughShortCutThenMergeColumn" executed="True" result="Success" success="True" asserts="9" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetColumnValuesThenAddColumnTag" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetDefaultColumnNameThenDoesNotSetTheName" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetDifferentColumnNameThenSetTheName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetInsertThenSetAttributes" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetInvalidTypeThenThrow" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetLazyThenSetAttributes" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetMultiColumnsValuesThenAddColumns" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetMultiColumnsValuesThenAutoassignColumnNames" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSettingByTypeThenCheckCompatibility" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByICompositeUserTypeThenSetTypeName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByITypeThenSetTypeName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByITypeTypeThenSetType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByIUserTypeThenSetTypeName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByIUserTypeWithNullParamsThenSetTypeName" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetTypeByIUserTypeWithParamsThenSetType" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.PropertyMapperTest.WhenSetUpdateThenSetAttributes" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SubclassMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SetPersisterTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.SetPersisterTests.CanSetPersister" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TablesSincronizationTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.TablesSincronizationTests.WhenSetMoreSyncThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenDoesNotDuplicate" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.TablesSincronizationTests.WhenSetSyncMixedWithNullAndEmptyThenAddOnlyValid" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperTests.TablesSincronizationTests.WhenSetSyncWithNullThenDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassMapperWithJoinPropertiesTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperWithJoinPropertiesTest.WhenDefineJoinThenAddJoinWithTableNameAndKey" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperWithJoinPropertiesTest.WhenDefineJoinThenCallJoinMapper" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperWithJoinPropertiesTest.WhenDefineMoreJoinsThenTableNameShouldBeUnique" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MappersTests.SubclassMapperWithJoinPropertiesTest.WhenDefineMoreJoinsWithSameIdThenUseSameJoinMapperInstance" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="UnionSubclassMapperTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AbstractAttributeTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.AbstractAttributeTests.CanSetAbstractAttributeOnAbstractClass" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.AbstractAttributeTests.CanSetAbstractAttributeOnConcreteClass" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="SetPersisterTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.SetPersisterTests.CanSetPersister" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="TablesSincronizationTests" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.TablesSincronizationTests.WhenSetMoreSyncThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenAddAll" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.TablesSincronizationTests.WhenSetMoreThenOnceThenDoesNotDuplicate" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.TablesSincronizationTests.WhenSetSyncMixedWithNullAndEmptyThenAddOnlyValid" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.MappingByCode.MappersTests.UnionSubclassMapperTests.TablesSincronizationTests.WhenSetSyncWithNullThenDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="MixAutomapping" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ArrayCollectionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.MatchWithArrayField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.MatchWithArrayProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.MatchWithCollectionPropertyAndArrayField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.NotMatchWithByteArrayProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.NotMatchWithCollectionField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.NotMatchWithCollectionProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.NotMatchWithNoArrayCollectionProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ArrayCollectionTests.NotMatchWithStringProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="BagCollectionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.MatchWithEnumerableField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.MatchWithEnumerableProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.MatchWithObjectPropertyAndEnumerableField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.NotMatchWithByteArrayProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.NotMatchWithStringProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.BagCollectionTests.WhenSetKeyThroughEventThenUseEvent" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="CallCustomConditions" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.CallCustomConditions.WhenCustomizeConditionsThenUseCustomConditionsToRecognizeRootEntities" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ComponentsTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.ClassWithoutPoidIsComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.ClassWithPoidFieldIsNotComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.ClassWithPoidIsNotComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.EnumIsNotComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.StringIsNotComponent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ComponentsTests.WhenAClassIsExplicitlyDeclaredAsComponentThenIsComponent" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DefaultClassHierarchyRepresentationTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DefaultClassHierarchyRepresentationTests.WhenExplicitlyDeclaredAsSubclassThenIsNotTablePerClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DefaultClassHierarchyRepresentationTests.WhenExplicitlyDeclaredAsUnionSubclassThenIsNotTablePerClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DefaultClassHierarchyRepresentationTests.WhenNotExplicitlyDeclaredThenIsTablePerClass" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DictionaryCollectionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DictionaryCollectionTests.MatchWithCollectionPropertyAndDictionaryField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DictionaryCollectionTests.MatchWithDictionaryField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DictionaryCollectionTests.MatchWithDictionaryProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DictionaryCollectionTests.NotMatchWithCollectionField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.DictionaryCollectionTests.NotMatchWithCollectionProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="EntityTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.ClassWithoutPoidIsNotEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.ClassWithPoidFieldIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.ClassWithPoidIsEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.EnumIsNotEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.StringIsNotEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.EntityTests.WhenAClassIsExplicitlyDeclaredAsEntityThenIsEntity" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="InheritedVersionTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.InheritedVersionTest.WhenPropertyVersionFromBaseEntityThenFindItAsVersion" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ManyToOneTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ManyToOneTest.WhenRelatedDeclaredAsOneToOneThenIsNotManyToOne" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ManyToOneTest.WhenRelatedMatchComponentThenIsNotManyToOne" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ManyToOneTest.WhenRelationWithTwoEntityThenIsManyToOne" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.ManyToOneTest.WhenSimplePropertyThenIsNotManyToOne" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OneToManyTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenCollectionBidirectionalThenMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenCollectionOfComponentsThenNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenCollectionOfElementsThenNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenCollectionUnidirectionalDeclaredManyToManyThenNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenCollectionUnidirectionalThenMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenDictionaryBidirectionalThenMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenDictionaryUnidirectionalDeclaredManyToManyThenNoMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenDictionaryUnidirectionalThenMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.OneToManyTests.WhenNoCollectionPropertyThenNoMatch" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PoidTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PoidTests.WhenExplicitDeclaredThenMatch" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PoidTests.WhenNotExplicitlyDeclaredMatchDefaultDelegate" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PoidTests.WhenNotExplicitlyDeclaredThenNoMatchPropertiesOutOfDefaultDelegate" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PolymorphicPropertiesMapping" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PolymorphicPropertiesMapping.WhenMapIdThroughBaseInterfaceThenFindIt" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PolymorphicPropertiesMapping.WhenMapPropertyThroughBaseAbstractClassThenFindIt" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PolymorphicPropertiesMapping.WhenMapPropertyThroughBaseConcreteClassThenFindIt" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PolymorphicPropertiesMapping.WhenMapPropertyThroughBaseInterfaceThenFindIt" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PolymorphicPropertiesMapping.WhenMapPropertyThroughClassThenFindIt" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="PropertiesExclusionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.DoesNotIncludesFieldsByDefault" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.IncludesAutoprop" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.IncludesFieldsWhenExplicitDeclared" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.IncludesNoReadOnly" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.IncludesReadOnlyWithField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.WhenReadonlyDeclaredThenIsPersistentProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.PropertiesExclusionTests.WhenReadonlyNotDeclaredThenIsNotPersistentProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="RootEntityTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.RootEntityTests.ByDefaultInheritedFromObject" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.RootEntityTests.WhenCustomizedThenUseCustomizedPredicate" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SetCollectionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.MatchWithCollectionPropertyAndSetField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.MatchWithSetField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.MatchWithSetProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.NotMatchWithCollectionField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.NotMatchWithCollectionProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.MixAutomapping.SetCollectionTests.WhenExplicitDeclaredThenMatchWithCollectionProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ModelExplicitDeclarationsHolderMergeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeAny" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeArrays" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeBags" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeComponents" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeComposedId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeDictionaries" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeDynamicComponents" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeIdBags" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeLists" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeManyToAnyRelations" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeManyToManyRelations" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeManyToOneRelations" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeNaturalIds" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeOneToManyRelations" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeOneToOneRelations" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergePersistentMembers" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergePoids" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeRootEntities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeSets" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeShouldGetAllPropertiesOfPatternsAppliersHolderOfBothSide" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeSplitDefinitions" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeTablePerClassEntities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeTablePerClassHierarchyEntities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeTablePerConcreteClassEntities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.MergeVersionProperties" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.ModelExplicitDeclarationsHolderMergeTest.WhenMergeNullsThenNotThrows" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NatureDemo" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ShowXmlDemo" executed="True" result="Inconclusive" success="False" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="TypeExtensionsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CompatibilityWithCandidatePersistentMembers" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.CompatibilityWithCandidatePersistentMembers.GetFirstPropertyOfTypeShouldUseSameConceptsOfCandidatePersistentMembersProvider" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetFirstImplementorConcreteClassesTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorConcreteClassesTest.WhenImplIsAtDifferentLevelThenReturnImplementor" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorConcreteClassesTest.WhenImplIsAtSameLevelThenReturnImplementor" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorConcreteClassesTest.WhenImplIsAtUpLevelThenReturnNull" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetFirstImplementorTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorTest.WhenImplAsNoInterfaceThenNoImplementor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorTest.WhenImplIsAtDifferentLevelThenReturnImplementor" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorTest.WhenImplIsAtSameLevelThenReturnImplementor" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorTest.WhenInvalidThenThrows" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetFirstImplementorTest.WhenIsInterfaceThenNoImplementor" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetMemberFromInterfacesTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenFieldThenEmptyList" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenNoInterfaceThenEmptyList" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenNullArgumentThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenOneInterfaceThenReturnMemberInfoOfInterface" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenPropertyOfInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromInterfacesTest.WhenTwoInterfacesThenReturnMemberInfoOfEachInterface" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetMemberFromReflectedTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenAccessiblePropertyThenReflected" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenNotAccessibleFieldThenOriginal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenNotAccessiblePropertyThenOriginal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenNotExistentThenOriginal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenNullMemberThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenNullTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenPrivateFieldOnInheritedThenFindItOnInherited" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenPropertyOfExplicitInterfaceThenFindItOnClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenPropertyOfInterfaceThenFindItOnClass" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetMemberFromReflectedTest.WhenPublicPropertyOfBaseOnInheritedThenFindItOnInherited" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="GetPropertyOrFieldMatchingNameTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskMethodThenNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskNotExistentThenNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskNullThenNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivateFieldOnInheritedThenFindItOnInherited" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivateFieldThenFindIt" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivateFieldWithBlanksThenFindIt" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivatePropertyOfBaseOnInheritedThenFindItOnBase" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivatePropertyOnInheritedThenFindItOnInherited" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPrivatePropertyThenFindIt" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPropertyOfExplicitInterfaceThenFindItOnInterface" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPropertyOfImplementedInterfaceThenFindItOnType" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskPropertyOfInterfaceThenFindIt" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenAskProtectedPropertyThenFindIt" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.GetPropertyOrFieldMatchingNameTest.WhenNullTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TypeExtensionsTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.CanDetermineDictionaryKeyType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.CanDetermineDictionaryValueType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DecodeMemberAccessExpressionOfShouldReturnMemberOfRequiredClass" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DecodeMemberAccessExpressionOfWithGenericShouldReturnMemberOfRequiredClass" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DecodeMemberAccessExpressionShouldReturnMemberOfDeclaringClass" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DetermineCollectionElementTypeShouldDetermineElementTypeWhenCollectionTypeIsGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DetermineCollectionElementTypeShouldDetermineElementTypeWhenCollectionTypeIsNonGeneric" description="NH-3054" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.DetermineCollectionElementTypeShouldNotDetermineElementTypeWhenTypeIsNotACollection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GenericDecodeMemberAccessExpressionOfShouldReturnMemberOfRequiredClass" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GenericDecodeMemberAccessExpressionShouldReturnMemberOfDeclaringClass" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetBaseTypesIncludesInterfaces" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetFirstPropertyOfType_WhenAsDelegateThenUseDelegateToFilterProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetFirstPropertyOfType_WhenDelegateIsNullThenThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetFirstPropertyOfType_WhenPropertyExistThenFindProperty" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetFirstPropertyOfType_WhenPropertyNotExistThenNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetFirstPropertyOfTypeWithNulls" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetMemberFromDeclaringClasses_WhenFieldThenFindAbstract" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.GetMemberFromDeclaringClasses_WhenPropertyThenFindAbstract" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.HasPublicPropertyOf_WhenAsDelegateThenUseDelegateToFilterProperties" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.TheSequenceOfGetHierarchyFromBaseShouldStartFromBaseClassUpToGivenClass" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.WhenBaseIsAbstractGenericGetMemberFromDeclaringType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.WhenBaseIsAbstractGetMemberFromDeclaringType" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.WhenDecodeMemberAccessExpressionOfOnInheritedEntityInterfaceThenDecodeMember" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.WhenNoGenericDictionaryThenDetermineNullDictionaryKeyType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.MappingByCode.TypeExtensionsTests.TypeExtensionsTest.WhenNoGenericDictionaryThenDetermineNullDictionaryValueType" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeNameUtilTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocDefaultsDoesNotMatchsThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocDoesNotHaveDefaultsThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocHaveDefaultAssemblyNameThenFullName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocHaveDefaultAssemblyThenFullName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocHaveDefaultsThenName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMapDocNullThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenMatchNamespaceButNotAssemblyThenOnlyNameAndAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WhenTypeNullThenNull" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocDefaultsDoesNotMatchsThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocDoesNotHaveDefaultsThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocHaveDefaultAssemblyNameThenFullName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocHaveDefaultAssemblyThenFullName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocHaveDefaultsThenName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMapDocNullThenAssemblyQualifiedName" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingByCode.TypeNameUtilTests.WithGenericWhenMatchNamespaceButNotAssemblyThenOnlyNameAndAssembly" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MappingExceptions" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AddClassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.AddClassFixture.AddClassNotFound" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddClassFixture.ClassMissingMappingFile" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AddResourceFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.AddDuplicateImport" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.AddInvalidXml" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingExceptions.AddResourceFixture.ResourceNotFound" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DuplicateMappingFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.DuplicateMappingFixture.MappingSameCollectionTwiceShouldThrow" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.MappingExceptions.DuplicateMappingFixture.MappingTheSameClassTwiceShouldThrowException" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MissingDefCtorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.MissingDefCtorFixture.ClassMissingDefaultCtor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyNotFoundExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingExceptions.PropertyNotFoundExceptionFixture.ConstructWithNullType" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.MappingExceptions.PropertyNotFoundExceptionFixture.MisspelledPropertyName" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MappingTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ColumnFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.ColumnFixture.StringSqlType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingTest.ColumnFixture.YesNoSqlType" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ForeignKeyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.ForeignKeyFixture.ToStringDoesNotThrow" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.MappingTest.ForeignKeyFixture.UnmatchingColumns" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NonReflectiveBinderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.Comparator" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed, see the TODO of this test.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.MetaInheritance" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.NonMutatedInheritance" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.ReadSubClasses" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.MappingTest.NonReflectiveBinderFixture.XmlSerialization" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.SchemaNameQuoted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.TableNameNotQuoted" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.MappingTest.TableFixture.TableNameQuoted" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="MultipleCollectionFetchTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="MultipleBagFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleBagFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleBagFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleListFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleListFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleListFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleSetFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleSetFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsLinearJoinFetch" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.MultipleCollectionFetchTest.MultipleSetFetchFixture.AbstractMultipleCollectionFetchFixture.MultipleCollectionsNonLinearJoinFetch" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Naturalid" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Immutable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ImmutableNaturalIdFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.NaturalIdCache" executed="True" result="Success" success="True" asserts="10" />
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.NaturalIdCheck" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Naturalid.Immutable.ImmutableNaturalIdFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Mutable" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MutableNaturalIdFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.NaturalIdCache" executed="True" result="Success" success="True" asserts="10" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.NonexistentNaturalIdCache" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.Querying" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.Naturalid.Mutable.MutableNaturalIdFixture.ReattachmentNaturalIdCheck" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="NHibernateUtilTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfInt32ByType" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfInt32ByValue" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfNullableInt32ByType" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.NHibernateUtilTest.CanGuessTypeOfNullableInt32ByValue" executed="True" result="Success" success="True" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="NHSpecificTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="AccessAndCorrectPropertyName" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.AccessAndCorrectPropertyName.Fixture.WrongPropertyNameForCamelcaseShouldThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.AccessAndCorrectPropertyName.Fixture.WrongPropertyNameForCamelcaseUnderscoreShouldThrow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AliasFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.AliasFixture.NoLeadingUnderscores" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="BagWithLazyExtraAndFilter" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.BagWithLazyExtraAndFilter.Fixture.CanUseFilterForLazyExtra" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicClassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.BagRefresh" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.Caching" executed="True" result="Success" success="True" asserts="46" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestArrayCRUD" executed="True" result="Success" success="True" asserts="130" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestBagCRUD" executed="True" result="Success" success="True" asserts="172" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="605" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestHqlParameterizedDictionaryLookupProducesCorrectSqlParameterOrder" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestLinqWhereOnDictionaryProperty" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestListCRUD" executed="True" result="Success" success="True" asserts="170" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestMapCRUD" executed="True" result="Success" success="True" asserts="129" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestPrimitiveArrayCRUD" executed="True" result="Success" success="True" asserts="132" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestPrivateFieldAccess" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestSetCRUD" executed="True" result="Success" success="True" asserts="131" />
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicClassFixture.TestWrapArrayInListProperty" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicObjectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicObjectFixture.TestCRUD" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicSerializableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicSerializableFixture.TestCRUD" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicTimeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.Insert" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.TimeArray" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.NHSpecificTest.BasicTimeFixture.Update" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.CollectionFixture.TestLoadChildFirst" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.CollectionFixture.TestLoadParentFirst" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="CriteriaFromHql" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaFromHql.Fixture.UsingCriteriaAndHql" executed="True" result="Success" success="True" asserts="16" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="CriteriaQueryOnComponentCollection" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfCompositeElement" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfCompositeElement_UsingDetachedCriteria" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfElement" executed="True" result="Success" success="True" asserts="4" />
                          <test-suite type="ParameterizedTest" name="CanQueryByCriteriaOnSetOfElementByCreateAlias" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfElementByCreateAlias(LeftOuterJoin)" executed="True" result="Success" success="True" asserts="4" />
                              <test-case name="NHibernate.Test.NHSpecificTest.CriteriaQueryOnComponentCollection.Fixture.CanQueryByCriteriaOnSetOfElementByCreateAlias(InnerJoin)" executed="True" result="Success" success="True" asserts="4" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="DataReaderWrapperTest" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.DataReaderWrapperTest.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.DataReaderWrapperTest.Fixture.CanUseDatareadersGetValue" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.DataReaderWrapperTest.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Dates" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DateFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateFixture.SavingAndRetrievingTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.Dates.AllDates][SQL: INSERT INTO AllDates (Sql_date) VALUES (?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DateTime2Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture.SaveMillisecond" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.ArgumentException : No mapping exists from DbType DateTime2 to a known OdbcType.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTime2Fixture.SavingAndRetrievingTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.ArgumentException : No mapping exists from DbType DateTime2 to a known OdbcType.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DateTimeOffsetFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.HashCodeShouldHaveSameBehaviorOfNetType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.Next" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.SavingAndRetrievingTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.Seed" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.WhenEqualTicksThenShouldMatchIsEqual" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture.WhenNotEqualTicksThenShouldNotMatchIsEqual" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DateTimeOffsetQueryFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetQueryFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetQueryFixture.CanQueryWithAggregateInLinq" description="NH-3357" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetQueryFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetQueryFixture.CanQueryWithCastInHql" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.Dates.DateTimeOffsetQueryFixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TimeAsTimeSpanFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.TimeAsTimeSpanFixture.SavingAndRetrievingTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TimeFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Dates.TimeFixture.SavingAndRetrievingTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Docs" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Associations" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="Namespace" name="BiM21" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                                <results>
                                  <test-case name="NHibernate.Test.NHSpecificTest.Docs.Associations.BiM21.Fixture.TestCorrectUse" executed="True" result="Success" success="True" asserts="0" />
                                  <test-case name="NHibernate.Test.NHSpecificTest.Docs.Associations.BiM21.Fixture.TestErrorUsage" executed="True" result="Success" success="True" asserts="1" />
                                </results>
                              </test-suite>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="ExampleParentChild" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="UpdateFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.Docs.ExampleParentChild.UpdateFixture.Update" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="DtcFailures" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DtcFailuresFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.Can_roll_back_transaction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.CanDeleteItemInDtc" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.NH1744" description="Open/Close a session inside a TransactionScope fails." executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.RollbackOutsideNh" description="Another action inside the transaction do the rollBack outside nh-session-scope." executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.TransactionInsertLoadWithRollBackTask" description="Two session in two txscope &#xA;(without an explicit NH transaction and without an explicit flush) &#xA;and with a rollback in the second dtc and a ForceRollback outside nh-session-scope." executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.TransactionInsertWithRollBackTask" description="rollback inside nh-session-scope should not commit save and the transaction should be aborted." executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.DtcFailures.DtcFailuresFixture.WillNotCrashOnDtcPrepareFailure" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ElementsEnums" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IntEnumsBagFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntEnumsBagNoNameFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagNoNameFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="IntEnumsBagPartialNameFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ElementsEnums.IntEnumsBagPartialNameFixture.AbstractIntEnumsBagFixture.LoadEnums" description="Should load the list of enums (NH-1772)" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyMappingsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.BeginWithIsolationLevel" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.DisconnectShouldNotCloseUserSuppliedConnection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.InvalidQuery" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.NullInterceptor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.EmptyMappingsFixture.ReconnectAfterClose" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityModeToTuplizerPerf" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityModeToTuplizerPerf.Fixture.VerifyEntityModeFound" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityModeToTuplizerPerf.Fixture.VerifyEntityModeNotFound" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameAndCompositeId" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameAndCompositeId.Fixture.CanPersistAndRead" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameAndInheritance" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameAndInheritance.Fixture.DoesNotCrash" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EntityNameWithFullName" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameWithFullName.Fixture.CanPersistAndRead" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.EntityNameWithFullName.Fixture.OnlyOneSelect" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Evicting" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_entity_from_session" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_non_persistent_object" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Evicting.Fixture.Can_evict_when_trying_to_evict_entity_from_another_session" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="FileStreamSql2008" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="Futures" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FallbackFixture" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[SetUp : NHibernate.HibernateException : Keyword not supported: 'driver'.
  ----> System.ArgumentException : Keyword not supported: 'driver'.]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureOfCriteriaFallsBackToListImplementationWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureOfLinqFallsBackToListImplementationWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureOfQueryFallsBackToListImplementationWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfCriteriaCanGetScalarValueWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfCriteriaCanGetSingleEntityWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfLinqCanGetSingleEntityWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfQueryCanGetScalarValueWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FallbackFixture.FutureValueOfQueryCanGetSingleEntityWhenQueryBatchingIsNotSupported" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in FallbackFixture]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureCriteriaFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.CanUseFutureCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.DefaultReadOnlyTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureCriteriaFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureQueryFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanExecuteMultipleQueryWithSameParameterName" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.CanUseFutureQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.DefaultReadOnlyTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FutureQueryOverFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.CanUseFutureCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.DefaultReadOnlyTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.FutureQueryOverFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LinqFutureFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanCombineSingleFutureValueWithEnumerableFutures" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanCombineSingleFutureValueWithFetchMany" description="NH-2385" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanExecuteMultipleQueriesOnSameExpression" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseFutureFetchQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseFutureQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseFutureQueryWithAnonymousType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseSkipAndFetchManyWithToFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseToFutureWithContains" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CanUseToFutureWithContains2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.CoalesceShouldWorkForFutures" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.DefaultReadOnlyTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqFutureFixture.TwoFuturesRunInTwoRoundTrips" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="LinqToFutureValueFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqToFutureValueFixture.CanExecuteToFutureValueCount" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Futures.LinqToFutureValueFixture.CanExecuteToFutureValueCountWithPredicate" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GetSetHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.GetSetHelperFixture.TestDefaultValue" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GetTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetAfterLoad" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetAndModify" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.GetTest.GetVsLoad" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="HqlOnMapWithForumula" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.HqlOnMapWithForumula.Fixture.TestBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LazyLoadBugTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.LazyLoadBugTest.TestLazyLoad" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.LazyLoadBugTest.TestLazyLoadNoAdd" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ListsWithHoles" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ListsWithHoles.Fixture.CanHandleHolesInList" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="LoadingNullEntityInSet" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.LoadingNullEntityInSet.Fixture.CanHandleNullEntityInList" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Logs" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="LogsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Logs.LogsFixture.WillGetSessionIdFromSessionLogs" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ManyToOneFilters20Behaviour" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.ExplicitFiltersOnCollectionsShouldBeActive" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.ExplicitFiltersOnCollectionsShouldBeActiveWithEagerLoad" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyAlwaysFilter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyAlwaysFiltersOnPropertyRef" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyFilterActiveButNotUsedInManyToOne" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ManyToOneFilters20Behaviour.Fixture.VerifyQueryWithWhereClause" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestInsert" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestSelect" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.MapFixture.TestSort" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH0000" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH0000.ByCodeFixture.YourTestName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH0000.Fixture.YourTestName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1001" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1001.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[To be fixed]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1007" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1007.Fixture.ConfiguringIdGeneratorUsingAttributeAndElementIsEquivalent" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1007.Fixture.MappingIdGeneratorWithAttributeTakesPrecendenceOverMappingWithElement" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1007.Fixture.TestIdGeneratorAttributeMappingOnIdentifier" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1018" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1018Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1018.NH1018Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1027" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1027.Fixture.CanMakeCriteriaQueryAcrossBothAssociations" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1028" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1028.Fixture.CanLoadCollectionUsingLeftOuterJoin" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1033" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1033.Fixture.CanUseClassConstraint" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1039" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1039.Fixture.test" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1044" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1044.Fixture.Crud" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1054" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1054Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1054.NH1054Fixture.AdoNetWithDistributedTransactionFactoryIsDefaultTransactionFactory" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1054.NH1054Fixture.SettingsTransactionFactoryReturnsConfiguredTransactionFactory" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1061" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1061.Fixture.IncrementGeneratorShouldIncludeClassLevelSchemaWhenGettingNextId" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1064" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1064.Fixture.JoinFetch" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1069" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ImproveLazyExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1069.ImproveLazyExceptionFixture.LazyCollection" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1069.ImproveLazyExceptionFixture.LazyEntity" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1077" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1077.Fixture.Loking" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1080" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1080.Fixture.TestBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1082" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1082.Fixture.ExceptionsInBeforeTransactionCompletionAbortTransaction" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1082.Fixture.ExceptionsInSynchronizationBeforeTransactionCompletionAbortTransaction" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="OldBehaviorEnabledFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1082.OldBehaviorEnabledFixture.ExceptionsInBeforeTransactionCompletionAreIgnored" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1082.OldBehaviorEnabledFixture.ExceptionsInSynchronizationBeforeTransactionCompletionAreIgnored" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1092" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1092.Fixture.CountHasUniqueResult" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1093" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="1">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1093.Fixture.NoException" description="Without configured cache, shouldn't throw exception" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1097" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1097.Fixture.ThrowsExceptionWhenColumnNameIsUsedInQuery" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1098" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FilterParameterOrderFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.CriteriaParameterOrder" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryMapElements" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithMixedParameters" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithNamedParameters" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1098.FilterParameterOrderFixture.QueryWithPositionalParameter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1101" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1101.Fixture.Behavior" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1119" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1119.Fixture.SelectMinFromEmptyTable" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1136" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1136.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1144" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1144.Fixture.CanSaveInSingleBatch" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Only applicable for Oracle Data Client driver]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1159" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithAuto" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithCommit" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1159.Fixture.DoesNotFlushWithCriteriaWithNever" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1171" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1171.Fixture.ExecutedContainsComments" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1171.Fixture.SupportSQLQueryWithComments" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1178" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1178.Fixture.ExcludeNullsAndZeroes" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1179" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1179.Fixture.ApplyFilterExplicitJoin" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1182" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1182.Fixture.DeleteWithoutUpdateVersion" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1192" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1192.Fixture.BitwiseAndWorksCorrectly" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1192.Fixture.BitwiseOrWorksCorrectly" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1217" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1217.Fixture.NoExceptionMustBeThrown" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1230" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1230.Fixture.NoExceptionMustBeThrown1" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1230.Fixture.NoExceptionMustBeThrown2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[TODO(Dario)This test demostrate the need of eliminate the 'bool' on pre-insert eventlisteners.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1235" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1235.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1235.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1235.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1250" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PolymorphicJoinFetchFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture.FetchUsingICriteria" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1250.PolymorphicJoinFetchFixture.FetchUsingIQuery" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1252" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1252Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1252.NH1252Fixture.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1253" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.MultiQuerySingleInList" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersMultipleInList" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersSingleInList" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestParametersWithTrailingNumbersSingleInListReverse" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1253.Fixture.TestSamePartialName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1255" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1255.Fixture.CanLoadMappingWithNotNullIgnore" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1264" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1264.Fixture.EagerFetchAnomaly" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1270" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1270.Fixture.WhenMapCustomFkNamesThenUseIt" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1274ExportExclude" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1274ExportExcludeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Drop_CreatesDropScript" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Export_CreatesExportScript" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Update_CreatesUpdateScript" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1274ExportExclude.NH1274ExportExcludeFixture.SchemaExport_Validate_CausesValidateException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1275" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1275.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1275.Fixture.Loking" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1275.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1275.Fixture.Retrieving" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1275.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1280" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1280Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnEqProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnGtCount" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnLtAverage" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingOnNotExpressionCount" description="NH-2863" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.HavingUsingSqlFunctions_Concat" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.MultipleSubqueriesShouldStayInOrder" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NestedSubqueriesShouldStayInOrder" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NonHavingOnEqProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.NotExpressionShouldNotAddCriteriaTwice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1280.NH1280Fixture.SubstringShouldUseAllParameters" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1284" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1284.Fixture.EmptyValueTypeComponent" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1289" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1289.Fixture.ManyToOne_gets_implicit_polymorphism_correctly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1290" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1290.Fixture.ExposeBug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1291AnonExample" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1291AnonExampleFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanCreateAnonExampleForInt" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanCreateAnonExampleForStringLikeCompare" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanQueryUsingAnonRelations" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1291AnonExample.NH1291AnonExampleFixture.CanQueryUsingSavedRelations" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1293" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1293.Fixture.Criteria_Does_Not_Equal_To_HQL" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1297" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1297.Fixture.ItemsCanBeSavedAndUpdatedInTheSameSession" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1301" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1301.Fixture.Test" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1304" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1304.Fixture.WhenNoCustomAccessorIsDefinedThenSholdFindOnlyNoCustom" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1313" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1313.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1323" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="NH1324" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnNull_Criteria" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnNull_HQL" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnResult_Criteria" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1324.Fixture.CanUseUniqueResultWithNullableType_ReturnResult_HQL" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1326" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1326.Fixture.ShouldThrowIfCallingDisconnectInsideTransaction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1332" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1332.Fixture.Bug" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1343" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProductFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1343.ProductFixture.ProductQueryPassesAndExecutesRightIfPuttingAlias" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1343.ProductFixture.ProductQueryPassesParsingButFails" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1347" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1347.Fixture.Bug" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NH-1347 is sqlite specific]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1349" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1349.Fixture.Can_page_with_formula_property" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1355" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CustomVersionType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1355.CustomVersionType.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1355.CustomVersionType.BugSubTask" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1356" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureWithBag" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithBag.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithList" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithList.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithSet" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1356.FixtureWithSet.Fixture.CanLoadWithGenericCompositeElement" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1359" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanGetSelectSubqueryWithSpecifiedParameter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanOrderByNamedSubquery" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanPageAndSortResultsWithParametersAndFilters" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanPageAndSortWithMultipleColumnsOfSameName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanSetSubQueryProjectionFromDetachedCriteriaWithCountProjection" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1359.Fixture.CanSubqueryRelatedObjectsNotInMainQuery" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1362" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1362.Fixture.Test" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1388" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1388.Fixture.BagTest" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH1388.Subject#1][SQL: SELECT subject0_.SUBJECT_ID as SUBJECT1_5048_0_, subject0_.TITLE as TITLE5048_0_ FROM SUBJECT subject0_ WHERE subject0_.SUBJECT_ID=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH1388.Subject#1][SQL: SELECT subject0_.SUBJECT_ID as SUBJECT1_5048_0_, subject0_.TITLE as TITLE5048_0_ FROM SUBJECT subject0_ WHERE subject0_.SUBJECT_ID=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1391" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1391.Fixture.Can_discriminate_subclass_on_list_with_lazy_loading_when_used_get" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Fixture2" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1391.Fixture2.Can_discriminate_subclass_on_list_with_lazy_loading_when_used_and_person_had_multiple_list" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1393" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanAvgProjectionOnSqlFunction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanMaxProjectionOnIdentityProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanMinProjectionOnIdentityProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1393.Fixture.CanSumProjectionOnSqlFunction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1394" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderByPropertyProjection" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySqlProjectionAsc" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySqlProjectionDesc" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySubqueryProjection" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1394.Fixture.CanOrderBySubqueryProjectionDesc" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1399" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1399.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1399.Fixture.UsingTwoInstancesWithSameValuesTheFkNameIsTheSame" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1400" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1400.Fixture.DotInStringLiteralsConstant" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1403" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1403.Fixture.Bug" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1405" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1405.Fixture.Bug" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1408" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DetachedSubCriteriaTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1408.DetachedSubCriteriaTest.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1413" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="PagingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1413.PagingTest.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1419" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Tests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1419.Tests.Bug" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1419.Tests.WithEmptyCollection" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1421" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyArrayUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyCollectionUsingQueryThenTrowsArgumentException" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyGenericCollectionUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsEmptyUsingQueryThenDoesNotTrowsNullReferenceException" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1421.Fixture.WhenParameterListIsNullUsingQueryThenTrowsArgumentException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1427" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1427.Fixture.TestMappingWithJoinElementContainingXmlComments" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1443" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInConfiguration" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithDefaultValuesInMapping" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1443.Fixture.WithSpecificValuesInMapping" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1444" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1444.Fixture.Bug" executed="True" result="Failure" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: String containing "xchild0_.ParentId=xparent1_.Id and (p0=1 or xparent1_.A<p1)"
  But was:  "NHibernate.SQL select xchild0_.Id as Id5118_, xchild0_.B as B5118_, xchild0_.ParentId as ParentId5118_ from xchild xchild0_, xparent xparent1_ where xchild0_.ParentId=xparent1_.Id and (?=1 or xparent1_.A<?);p0 = True [Type: Boolean (0)], p1 = 0 [Type: Int64 (0)]
"
]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1447" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1447.Fixture.CanQueryByConstantProjectionWithType" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1452" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1452.Fixture.Delete_single_record" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1452.Fixture.Query_records" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1452.Fixture.Update_record" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1464" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1464.Fixture.NoExceptionForDispose" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1478" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1478.Fixture.TestIfColonInStringIsNotInterpretedAsParameterInHQL" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1478.Fixture.TestIfColonInStringIsNotInterpretedAsParameterInSQL" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1483" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1483.Fixture.LoadSubclassFromSecondLevelCache" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1483.Fixture.LoadSubclassFromSecondLevelCacheAsBaseClass" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1487" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaIndexOnId" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleIndex" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleIndexOnColumn" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaMultipleUniqueKeys" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1487.Fixture.GenerateSchemaUniqueOnId" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1488" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1488.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1488.Fixture.WorkBut" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1490" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Also_Works_With_Filter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Can_Translate_Correctly_Without_Filter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1490.Fixture.Incorrect_SQL_Translated_Params_Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1492" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1492.Fixture.RetrieveEntities" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1495" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1495.Fixture.CreateTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1499" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1499.Fixture.CheckIfDetachedCriteriaCanBeUsedOnPropertyRestriction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1502" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1502.Fixture.OrderProjectionTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1507" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1507.Fixture.ExplicitJoin" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1507.Fixture.ImplicitJoinFailingTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1508" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1508.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.DoesntThrowExceptionWhenHqlQueryIsGiven" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1508.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.DoesntThrowsExceptionWhenNamedSqlQueryIsGiven" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1508.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1508.Fixture.DoesntThrowsExceptionWhenSqlQueryIsGiven" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1508.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1515" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1515.Fixture.NoExceptionForMethod" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1515.Fixture.NoExceptionForProperty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1521" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.TestForClassWithDefaultSchema" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithDefaultValuesInMapping" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1521.Fixture.WithSpecificValuesInMapping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1531" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1531.SampleTest.DeleteParentDeleteChildInCascade" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1531.SampleTest.ReparentingShouldNotFail" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1533" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_altogether" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_with_firstresult_only" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1533.Fixture.Can_query_using_two_orderby_and_limit_with_maxresult_only" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1549" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1549.Fixture.CanLoadForEntitiesWithInheritedIds" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1549.Fixture.CanLoadForEntitiesWithTheirOwnIds" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1552" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_FirstResult" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_FirstResultMaxResult" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1552.Fixture.Paging_with_sql_works_as_expected_with_MaxResult" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1553" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SnapshotIsolationUpdateConflictTest" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest.UpdateConflictDetectedByNH" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.NHSpecificTest.NH1553.MsSQL.SnapshotIsolationUpdateConflictTest.UpdateConflictDetectedBySQLServer" executed="True" result="Error" success="False" asserts="1">
                                <failure>
                                  <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.NHSpecificTest.NH1553.MsSQL.Person#2][SQL: UPDATE Person SET Version = ?, IdentificationNumber = ? WHERE Id = ? AND Version = ?]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Snapshot isolation transaction aborted due to update conflict. You cannot use snapshot isolation to access table 'dbo.Person' directly or indirectly in database 'nhibernateOdbc' to update, delete, or insert the row that has been modified or deleted by another transaction. Retry the transaction or change the isolation level for the update/delete statement.]]></message>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1556" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1556.Fixture.CanOrderByAggregate" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1574" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="StatelessTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1574.StatelessTest.StatelessManyToOne" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1579" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1579Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1579.NH1579Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1584" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1584.TestFixture.Load_One_To_One_Composition_For_Joined_Subclass_Succeeds" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1587" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1587.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1593" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1593.Fixture.SchemaUpdateAddsIndexesThatWerentPresentYet" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1594" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1594.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1601" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture1" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestRefreshWithCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestRefreshWithoutCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestSaveAndLoadWithCount" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture1.TestSaveAndLoadWithoutCount" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="Fixture2" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestRefreshWithThreeCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestRefreshWithTwoCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestSaveAndLoadWithTwoCounts" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1601.Fixture2.TestTestSaveAndLoadWithThreeCounts" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1605" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1605.Fixture.SupportTypedefInReturnScalarElements" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1608" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1608.Fixture.AddDoesBoundsChecking" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1608.Fixture.IndexerDoesBoundsChecking" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1609" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1609.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1609.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1609.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1611OneToOneIdentity" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH1611OneToOneIdentityFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1611OneToOneIdentity.NH1611OneToOneIdentityFixture.CanQueryOneToOneWithCompositeId" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1612" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NativeSqlCollectionLoaderFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementCollectionWithCustomLoader" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithComplexHbmAliasInjection" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithCustomAliases" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadCompositeElementsWithWithSimpleHbmAliasInjection" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementCollectionWithCustomLoader" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementsWithExplicitColumnMappings" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadElementsWithWithSimpleHbmAliasInjection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithComplexHbmAliasInjection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithExplicitColumnMappings" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntitiesWithWithSimpleHbmAliasInjection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.LoadEntityCollectionWithCustomLoader" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeQueryWithUnresolvedHbmAliasInjection" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithDefinedResultset" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithoutResults" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeScalarQueryWithUndefinedResultset" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1612.NativeSqlCollectionLoaderFixture.NativeUpdateQueryWithoutResults" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1617" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1617.Fixture.CanUseDataTypeInFormulaWithCriteriaQuery" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1619" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1619.Fixture.SavingAndRetrieving" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1619.Fixture.UsingBooleanPostgreSQLType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1619.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1621" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1621.Fixture.QueryUsingReadonlyProperty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1632" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.Dispose_session_inside_transaction_scope" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_commiting_items_in_DTC_transaction_will_add_items_to_2nd_level_cache" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_committing_transaction_scope_will_commit_transaction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_DTC_HiLo_knows_to_create_isolated_DTC_transaction" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_two_sessions" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.When_using_two_sessions_with_explicit_flush" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1632.Fixture.Will_not_save_when_flush_mode_is_never" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1635" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="1">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1635.Fixture.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1640" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1640.Fixture.FetchJoinShouldNotReturnProxyTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1642" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TrafficRuleSetDAOTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1642.TrafficRuleSetDAOTest.AddRuleSet" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1643" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1643.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1654" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1654.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1665" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1665.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1665.Fixture.SupportsHibernateQuotingSequenceName" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1665.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1675" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1675.Fixture.ShouldWorkUsingDistinctAndLimits" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1677" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EntityModeMapCriteria" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1677.EntityModeMapCriteria.EntityModeMapFailsWithCriteria" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1679" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1679.Fixture.UsingExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1679.Fixture.UsingExpressionProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1688" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpression" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpressionFunctionProjection" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1688.Fixture.UsingExpressionProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1689" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1689.SampleTest.ShouldBeAbleToCallGenericMethod" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1691" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1691.Fixture.ComplexNest" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1691.Fixture.NestedComponentCollection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1693" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1693.Fixture.with_filter" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1693.Fixture.without_filter" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1694" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1694.Fixture.CanOrderByExpressionContainingACommaInAPagedQuery" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1700" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1700.Fixture.ShouldNotThrowDuplicateMapping" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1706" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="KeyPropertyRefFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1706.KeyPropertyRefFixture.PropertyRefUsesOtherColumn" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1710" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureWithColumnNode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithColumnNode.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithExplicitDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithExplicitDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithHeuristicDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithHeuristicDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithInLineDefinedType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1710.FixtureWithInLineDefinedType.BaseFixture.NotIgnorePrecisionScaleInSchemaExport" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1713" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Should be fixed in some way.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1713.Fixture.Can_Save_Money_Column" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Should be fixed in some way.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1713.Fixture.Can_Update_Money_Column" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Should be fixed in some way.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1714" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SimpleReproductionFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1714.SimpleReproductionFixture.DbCommandsFromEventListenerShouldBeEnlistedInRunningTransaction" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UseCaseDemonstrationFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1714.UseCaseDemonstrationFixture.DbCommandsFromEventListenerShouldBeEnlistedInRunningTransaction" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1715" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1715.Fixture.TimeSpanLargerThan2h" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1715.Fixture.VerifyDaysShouldBeZeroInSmallTimeSpan" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1716" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanLargerThan24h" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanLargerThan2h" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.TimeSpanNegative" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1716.Fixture.VerifyDaysShouldBeZeroInSmallTimeSpan" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1727" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1727.Fixture.VerifyFilterAndInAndProperty_DoesNotWorkToday" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1727.Fixture.VerifyFilterAndInAndProperty_WorksToday" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1734" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1734.Fixture.ReturnsApropriateTypeWhenSumUsedWithSomeFormula" executed="True" result="Success" success="True" asserts="8" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1741" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1741.Fixture.Bug" description="DetachedNamedQuery should read all mapped parameters when not explicitly set." executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1741.Fixture.Override" description="DetachedNamedQuery should override all mapped parameters when explicitly set." executed="True" result="Success" success="True" asserts="8" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1742" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1742.Fixture.BugTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1742.Fixture.NH2213" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1742.Fixture.WorkingTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1747" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="JoinTraversalTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1747.JoinTraversalTest.PaymentTableNotContainsFk" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1747.JoinTraversalTest.TraversingBagToJoinChildElementShouldWork" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1756" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update" description="Work with AutoFlush on commit" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.NHSpecificTest.NH1756.Book#1]]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update_Bug" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.NHSpecificTest.NH1756.Book#2]]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1756.Fixture.SaveTransient_Then_Update_Ok" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1757" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1757.Fixture.MayBeABug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1760" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1760.SampleTest.CanUseCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1760.SampleTest.TheJoinShouldBeOptional" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1763" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1763.SampleTest.CanUseConditionalOnCompositeType" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1773" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1773.Fixture.CustomHQLFunctionsShouldBeRecognizedByTheParser" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1775" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1775.Fixture.BitwiseOperationsShouldBeSupported" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1776" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FilterQueryTwiceFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.Bug" description="Can Query using Session's filter Twice" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.FilterOnOffOn" description="Executing same query with and without filter and with different filter parameter value." executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1776.FilterQueryTwiceFixture.MultiFilterOnOffOn" description="Executing same query with different filters combinations." executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1783" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1783.SampleTest.DatePropertyShouldBeStoredWithoutTimePart" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.NHSpecificTest.NH1783.DomainClass#1][SQL: INSERT INTO DomainClass (BirthDate, Id) VALUES (?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1785" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1785.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1785.Fixture.ShouldNotContainJoinWhereNotRequired" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1788" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1788.Fixture.CanUseSqlTimestampWithDynamicInsert" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1789" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProxyEqualityProblemTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestProxyEqualityProblem" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestProxyEqualityWhereItDoesWork" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1789.ProxyEqualityProblemTest.TestTheProblemWithCollection" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1792" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1792.Fixture.PageWithDetachedCriteriaSubqueryWithOrderBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1792.Fixture.PageWithRawSqlSubqueryWithOrderBy" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1794" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1794.Fixture.CanQueryOnCollectionThatAppearsOnlyInTheMapping" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1794.Fixture.CanQueryOnPropertyThatOnlyShowsUpInMapping_AsAccessNone" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1796" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1796.Fixture.Merge" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1796.Fixture.SaveOrUpdate" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1801" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1801.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1810" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1810.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1812" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AstBug" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1812.AstBug.AstBugBase.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="AstBugBase" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1812.AstBugBase.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1813" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1813.Fixture.ContainSQLInInsert" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1813.Fixture.ContainSQLInUpdate" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1818" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture1818" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1818.Fixture1818 does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1818.Fixture1818.ComputedPropertyShouldRetrieveDataCorrectly" description="Test HQL query on a property mapped with a formula." executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1818.Fixture1818 does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1821" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1821.Fixture.ShouldNotRemoveLineBreaksFromSqlQueries" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1831" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1831.Fixture.CorrectPrecedenceForBitwiseOperators" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1834" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1834.Fixture.OneToManyPropertyWithFormulaNodeShouldWorkLikeFormulaAttrib" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1835" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1835.Fixture.ColumnTypeBinaryBlob" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1836" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1836.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1836.Fixture.AliasToBeanTransformerShouldApplyCorrectlyToMultiQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1836.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1837" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithChildCriteriaGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithChildCriteriaNonGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithCriteriaGeneric" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1837.Fixture.ExecutesOneQueryWithUniqueResultWithCriteriaNonGeneric" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1845" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1845.Fixture.LazyLoad_Initialize_AndEvict" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1849" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1849.Fixture.ExecutesCustomSqlFunctionContains" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1850" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForBatch" executed="True" result="Failure" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: 3
  But was:  1
]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForDelete" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1850.Fixture.CanGetQueryDurationForSelect" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1857" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FullJoinTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1857.FullJoinTest.TestFullJoin" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1859" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1859.SampleTest.NativeQueryWithTwoComments" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1863" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1863.Fixture.CanGetCustomerWithCategoryWhenFilterIsDisabled" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1863.Fixture.CanGetCustomerWithCategoryWhenFilterIsEnabled" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1863.Fixture.CanGetCustomerWithNoCategoryWhenFilterIsDisabled" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1863.Fixture.CanGetCustomerWithNoCategoryWhenFilterIsEnabled" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1864" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.FilterOnOffOn" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1864.Fixture.FilterQueryTwice" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1867" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AddMappingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1867.AddMappingTest.NestedWithinGeneric" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1867.AddMappingTest.NestedWithinNonGeneric" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1868" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterOnOffOn" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterQuery3" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1868.Fixture.FilterQueryTwice" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1869" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1869.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1869.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1869.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1877" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1877.Fixture.CanGroupByWithPropertyName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1877.Fixture.CanGroupByWithSqlFunctionProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1882" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TestCollectionInitializingDuringFlush" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1882.TestCollectionInitializingDuringFlush.TestInitializationDuringFlush" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1891" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1891.Fixture.FormulaEscaping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1895" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1895.SampleTest.SaveTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1898" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1898.SampleTest.TypeOfParametersShouldBeSetCorrectly" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1899" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1899.SampleTest.ShouldNotThrowOnMerge" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1904" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1904.Fixture.ExecuteQuery" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1905" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1905.Fixture.Query" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1907" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1907.Fixture.CanSetParameterQueryByName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1907.Fixture.CanSetParameterQueryByPosition" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1908" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908.Fixture.QueryPropertyInBothFilterAndQuery" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908.Fixture.QueryPropertyInBothFilterAndQueryUsingWith" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1908ThreadSafety" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1908ThreadSafety.Fixture.UsingFiltersIsThreadSafe" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1911" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1911.Fixture.ConditionalAggregateProjection" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1914" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1914.Fixture.CascadeInsertAssigned" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1920" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1920.Fixture.Can_Query_With_Collection_Size_Condition" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1920.Fixture.Can_Query_Without_Collection_Size_Condition" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1922" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1922.Fixture.CanExecuteQueryOnStatelessSessionUsingDetachedCriteria" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1925" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1925.Fixture.Query1" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1925.Fixture.Query2" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1927" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.CriteriaWithEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.CriteriaWithoutEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.HqlWithEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1927.Fixture.HqlWithoutEagerFetch" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1928" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAfterBeginningOfLine" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAtBeginningOfLastLine" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1928.Fixture.SqlCommentAtBeginningOfLine" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1938" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1938.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1938.Fixture.Can_Query_By_Example_Case_Insensitive" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1938.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1939" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1939.Fixture.Can_Parameterise_Auxiliary_Database_Objects" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1941" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1941.Fixture.ReadCanOverrideStringEnumGetValue" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1941.Fixture.SaveCanOverrideStringEnumGetValue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1948" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1948.Fixture.CanUseDecimalScaleZero" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1959" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1959.Fixture.StartWithEmptyDoAddAndRemove" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1959.Fixture.StartWithEmptyDoAddAndRemoveAt" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1963" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CacheableQueryOnByteArray" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray.Should_be_able_to_do_cacheable_query_on_byte_array_field" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1963.CacheableQueryOnByteArray.Should_work_when_query_is_not_cachable" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1965" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ReattachWithCollectionTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1965.ReattachWithCollectionTest.WhenReattachThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1969" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestMappedTypeCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestMappedTypeHQL" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestNonMappedTypeCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1969.Fixture.TestNonMappedTypeHQL" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1978" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AliasTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1978.AliasTest.ShouldReturnPlanFromEmployee" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1981" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1981.Fixture.CanGroupWithParameter" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ select article0_.Longitude/? as col_0_0_ from Article article0_ group by article0_.Longitude/? order by 1 ]
  Name:divisor - Value:30
[SQL: select article0_.Longitude/? as col_0_0_ from Article article0_ group by article0_.Longitude/? order by 1]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Article.Longitude' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1985" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1985.SampleTest.AllowDeletionOfImmutableObject" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1985.SampleTest.AttemptToDeleteImmutableObjectShouldThrow" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[It is valid to be delete immutable entities]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1989" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithDifferentRegionsFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithMixedCacheableAndNonCacheableFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithMixedCacheRegionsFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithSingleCacheableFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1989.Fixture.SecondLevelCacheWithSingleCacheableQueryFuture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH1989.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH1990" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParameters" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParametersAndPositionalParameters" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH1990.Fixture.FetchingBySubqueryFilterParametersAndPositionalParametersAndNamedParameters" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2000" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2000.SampleTest.TestSessionGetEnableFilter" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2003" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2003.Fixture.ShouldCreateNotNullIdColumn" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2009" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2009.Fixture.PropertyRefToJoinedTable" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2011" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2011.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2020" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2020.Fixture.ISQLExceptionConverter_gets_called_if_batch_size_enabled" executed="True" result="Failure" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: <NHibernate.Exceptions.ConstraintViolationException>
  But was:  <NHibernate.Exceptions.GenericADOException>
]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2030" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2030.Fixture.GetTypeWithLenShouldBeThreadSafe" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2031" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="HqlModFuctionForMsSqlTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2031.HqlModFuctionForMsSqlTest.TheModuleOperationShouldAddParenthesisToAvoidWrongSentence" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2033" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2033.Fixture.CreateCriteriaOnKeyManyToOneShouldGenerateInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2033.Fixture.HqlJoinOnKeyManyToOneShouldGenerateInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2033.Fixture.LinqJoinOnKeyManyToOneShouldGenerateInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2033.Fixture.QueryOverJoinAliasOnKeyManyToOneShouldGenerateInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2033.Fixture.QueryOverJoinAliasOnManyToOneShouldGenerateInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2037" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2037.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2041" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2041.Fixture.WhenJoinTableContainComponentsThenColumnsShouldBeInJoinedTable" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2042" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2042.Fixture.TestPropertyOfOwnerShouldBeOne" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2043" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2043.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2044" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2044.SampleTest.IgnoreCaseShouldWorkWithCharCorrectly" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2049" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture2049" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2049.Fixture2049.CanCriteriaQueryWithFilterOnJoinClassBaseClassProperty" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2049.Fixture2049.CanHqlQueryWithFilterOnJoinClassBaseClassProperty" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2053" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2053.Fixture.JoinedSubClass_Filter" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2055" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2055.Fixture.CanCreateAndDropSchema" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2056" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2056.Fixture.CanUpdateInheritedClass" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2057" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2057.Fixture.WillCloseWhenUsingDTC" description="This test fails intermittently on SQL Server ODBC. Not sure why." executed="True" result="Failure" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[  Expected: True
  But was:  False

TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2061" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2061.Fixture.merge_with_many_to_many_inside_component_that_is_null" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2065" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2065.Fixture.GetGoodErrorForDirtyReassociatedCollection" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2069" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2069.Fixture.ProxyRemainsUninitializedWhenReferencingIdProperty" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2074" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2074.Fixture.CanQueryOnPropertyUsingUnicodeToken" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2077" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2077.Fixture.CanExecuteMultipleQueriesUsingNativeSQL" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2092" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2092.Fixture.ConstrainedLazyLoadedOneToOneUsingCastleProxy" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2093" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2093.Fixture.CanUseFieldInterceptingProxyAsHQLArgument" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2093.Fixture.NHibernateProxyHelperReturnsCorrectType" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2094" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.CanAccessInitializedPropertiesOutsideOfSession" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.WhenAccessLazyPropertiesOutsideOfSessionThenThrows" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2094.Fixture.WhenAccessNoLazyPropertiesOutsideOfSessionThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2100" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2100.Fixture.WhenTwoTransactionInSameSessionThenNotChangeVersion" executed="True" result="Success" success="True" asserts="12" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2102" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2102.Fixture.EntityWithConstrainedLazyLoadedOneToOneShouldNotGenerateFieldInterceptingProxy" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2111" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2111.Fixture.SyncRootOnLazyLoad" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2112" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2112.Fixture.Test" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH2112.B#1][SQL: SELECT b0_.Id as Id5669_0_, b0_.Name as Name5669_0_ FROM TableB b0_ WHERE b0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2113" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2113.Fixture.ShouldNotEagerLoadKeyManyToOneWhenOverridingGetHashCode" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2118" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2118.Fixture.CanGroupByWithoutSelect" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2138" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2138.Fixture.AfterAddAppingShouldHaveAResultsetWithEntityName" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2147" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DefaultBatchSize" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenDefaultAndNoSpecificThenUseDefault" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenDefaultAndSpecificThenUseSpecific" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2147.DefaultBatchSize.WhenNoDefaultAndNoSpecificThenUse1" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2148" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BugFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2148.BugFixture.CanCallLazyPropertyEntityMethod" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2166" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2166.Fixture.WhenUniqueResultShouldCallConverter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2167" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2167.Fixture.GroupPropertyWithSqlFunctionDoesNotThrow" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not execute query
[ SELECT substring(this_.Name, ?, ?) as y0_ FROM Entity this_ GROUP BY substring(this_.Name, ?, ?) ]
  Name:cp0 - Value:0  Name:cp1 - Value:1
[SQL: SELECT substring(this_.Name, ?, ?) as y0_ FROM Entity this_ GROUP BY substring(this_.Name, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [42000] [Microsoft][SQL Native Client][SQL Server]Column 'Entity.Name' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2188" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AppDomainWithMultipleSearchPath" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2188.AppDomainWithMultipleSearchPath.WhenSerchInMultiplePathsThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2189" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureCriteriaEagerLoadUsesAlreadyLoadedEntity" executed="True" result="Success" success="True" asserts="7" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureCriteriaReturnsExistingProxy" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureQueryEagerLoadUsesAlreadyLoadedEntity" executed="True" result="Success" success="True" asserts="7" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2189.Fixture.FutureQueryReturnsExistingProxy" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2192" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2192.Fixture.HqlIsThreadsafe_UsingPool" executed="True" result="Success" success="True" asserts="150" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2192.Fixture.HqlIsThreadsafe_UsingThreads" executed="True" result="Success" success="True" asserts="150" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2195" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SQLiteMultiCriteriaTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.MultiCriteriaQueriesWithIntsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.MultiCriteriaQueriesWithStringsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.SingleCriteriaQueriesWithIntsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest.SingleCriteriaQueriesWithStringsShouldExecuteCorrectly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2195.SQLiteMultiCriteriaTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2201" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2201.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2201.Fixture.CanUseMutliCriteriaAndFetchSelect" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2201.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2202" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2202.Fixture.CanProjectEmployeeFromAddressUsingCriteria" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[TearDown : NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH2202.Employee#component[NationalId,EmployeeId]{'NationalId'='1000', 'EmployeeId'='1'}][SQL: SELECT employee0_.NationalId as NationalId5710_0_, employee0_.EmployeeId as EmployeeId5710_0_ FROM Employee employee0_ WHERE employee0_.NationalId=? and employee0_.EmployeeId=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2203" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2203.Fixture.QueryShouldWork" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2207" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Demostration of external issue]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2207.SampleTest.Dates_Before_1753_Should_Not_Insert_Null" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Demostration of external issue]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2207.SampleTest.WithoutUseNHSqlDataProviderWorkProperly" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Demostration of external issue]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2208" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Filter" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2208.Filter.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2214" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2214.Fixture.PagedLinqQueryWithDistinct" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2214.Fixture.PagedQueryWithDistinct" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2214.Fixture.PagedQueryWithDistinctAndOrderingByNonProjectedColumn" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2224" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2224.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2224.Fixture.CanQueryBasedOnYearWithInOperator" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2224.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2228" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2228.Fixture.WhenStaleObjectStateThenMessageContainsEntity" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2230" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2230.Fixture.CanCreacteRetrieveDeleteComponentsWithPrivateReferenceSetterToParent" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2234" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2234.Fixture.CanQueryViaLinq" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2242" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FormulaTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2242.FormulaTest.FormulaOfEscapedDomainClassShouldBeRetrievedCorrectly" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2242.FormulaTest.FormulaOfUnescapedDomainClassShouldBeRetrievedCorrectly" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2243" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2243.Fixture.ShouldCreateSchemaWithDefaultClause" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2244" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2244.Fixture.LinqComponentTypeEquality" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2245" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2245.Fixture.TestDelete_OptimisticLockNone" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2251" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.EnlistingFirstThePaginationAndThenTheRowCountDoesNotThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.FuturePagedHql" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.HqlWithOffsetAndLimit" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.MultiplePagingParametersInSingleQuery" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2251.Fixture.WhenUseFutureSkipTakeThenNotThrow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2257" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2257.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2257.Fixture.InformixUsingDuplicateParameters" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2257.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2266" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2266.Fixture.WhenBuildSessionFactoryThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2278" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2278.Fixture.CustomIdBag" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2279" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2279.Fixture.CartesianProduct" executed="True" result="Success" success="True" asserts="7" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2279.Fixture.IdBagIndexTracking" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2280" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InvalidSqlTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2280.InvalidSqlTest.CompositeKeyTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2287" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2287.Fixture.DotInStringLiteralsConstant" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2288" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.TestForClassWithDefaultSchema" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithDefaultValuesInConfigurationPriorityToMapping" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithDefaultValuesInMapping" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2288.Fixture.WithSpecificValuesInMapping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2293" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2293.Fixture.WhenQueryHasJustAfromThenThrowQuerySyntaxException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2294" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2294.Fixture.WhenQueryHasJustAWhereThenThrowQuerySyntaxException" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[External issue. The bug is inside RecognitionException of Antlr.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2296" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2296.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2297" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="ParameterizedTest" name="InvalidCustomCompositeUserTypeThrowsMeaningfulException" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH2297.Fixture.InvalidCustomCompositeUserTypeThrowsMeaningfulException(&quot;.MappingsNames.hbm.xml&quot;)" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.NHSpecificTest.NH2297.Fixture.InvalidCustomCompositeUserTypeThrowsMeaningfulException(&quot;.MappingsTypes.hbm.xml&quot;)" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2302" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobSqlType" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobWithLength" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.BlobWithoutLength" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.StringHugeLength" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.PropertyValueException : Error dehydrating property value for NHibernate.Test.NHSpecificTest.NH2302.StringLengthEntity.StringHugeLength
  ----> NHibernate.HibernateException : The length of the string value exceeds the length configured in the mapping/parameter.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2302.Fixture.StringSqlType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported without specify the string length.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2303" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2303.Fixture.IndependentSubclassElementCanExtendSubclass" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2313" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2313.Fixture.WhenLoadWorngMappingThenMessageShouldContaingWrongClassName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2317" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2317.Fixture.QueryShouldWork" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2318" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2318.Fixture.CriteriaTrimFunctionsWithParameters" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2318.Fixture.HqlTrimFunctionsWithParameters" executed="True" result="Success" success="True" asserts="22" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2318.Fixture.LinqTrimFunctionsWithParameters" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2322" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2322.Fixture.ShouldNotThrowWhenCommitingATransaction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2324" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BulkUpdateWithCustomCompositeType" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2324.BulkUpdateWithCustomCompositeType.ShouldAllowBulkupdateWithCompositeUserType" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2328" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_HqlWorksWithClassNameInTheLeft" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_HqlWorksWithClassNameInTheRight" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_Linq" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2328.Fixture.AnyIs_QueryOver" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2331" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Nh2331Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2331.Nh2331Test.DetachedCriteriaCorrelatedQueryExplodes" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2341" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2341.Fixture.WhenSaveInstanceOfConcreteInheritedThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2344" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2344.Fixture.CoalesceShouldWork" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2347" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2347.Fixture.CanSumIntegersAsLongIntegers" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2361" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2361.Fixture.WhenDeleteMultiTableHierarchyThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2362" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2362.Fixture.CanParseMultipleGroupBy" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2362.Fixture.CanParseMultipleGroupByAndSelect" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2366" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2366.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2374" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH2374Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2374.NH2374Fixture.OneToOne_with_EntityMode_Map" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2374.NH2374Fixture.OneToOne_with_EntityMode_Poco" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2378" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2378.Fixture.ShortEntityCanBeQueryCorrectlyUsingLinqProvider" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2379" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.InnerJoin" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.InnerJoinWithOutermostRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.InnerJoinWithRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.LeftOuterJoin" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.LeftOuterJoinWithInnerRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.LeftOuterJoinWithOutermostRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2379.Fixture.LeftOuterJoinWithOuterRestriction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2386" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2386.Test.TheTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2390" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2390.Fixture.Test" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2392" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2392.Fixture.CompositeUserTypeSettability" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2394" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2394.Fixture.LinqUserTypeEquality" executed="True" result="Success" success="True" asserts="21" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2404" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2404.Fixture.ProjectionsShouldWorkWithHqlAndFutures" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2404.Fixture.ProjectionsShouldWorkWithLinqProviderAndFutures" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2408" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2408.Fixture.ShouldGenerateCorrectSqlStatement" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2409" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2409.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2412" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2412.Fixture.OrderByUsesLeftJoin" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2420" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2420.Fixture.ShouldBeAbleToReleaseSuppliedConnectionAfterDistributedTransaction" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2439" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH2439Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2439.NH2439Fixture.TheTest" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2441" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2441.Fixture.LinqQueryBooleanSQLite" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2459" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2459.Test.IsTypeOperator" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2467" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH2467Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnFuturePaging" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnFuturePagingUsingHql" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnReversedFuturePaging" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2467.NH2467Test.ShouldNotThrowOnReversedFuturePagingUsingHql" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2469" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2469.Fixture.ShouldNotThrowSqlException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH247" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.CommonLiteralFunctions" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[This test is specific for FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.FirebirdLiteralFunctions" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[This test is specific for FirebirdDialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH247.Fixture.InsensitiveLikeCriteria" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2470" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Class1_Class2_Tests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test0" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test1" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test2" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test3" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test4" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2470.Class1_Class2_Tests.Test5" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2477" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2477.Fixture.WhenTakeBeforeCountShouldApplyTake" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2484" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2484.Fixture.TestPersistenceOfClassWithSerializableType" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.PropertyValueException : Error dehydrating property value for NHibernate.Test.NHSpecificTest.NH2484.ClassWithSerializableType.Image
  ----> NHibernate.HibernateException : The length of the byte[] value exceeds the length configured in the mapping/parameter.]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2484.Fixture.TestPersistenceOfClassWithUnknownSerializableType" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.PropertyValueException : Error dehydrating property value for NHibernate.Test.NHSpecificTest.NH2484.ClassWithImage.Image
  ----> NHibernate.HibernateException : The length of the byte[] value exceeds the length configured in the mapping/parameter.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2488" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2488.Fixture.ShouldNotQueryLazyProperties_FetchJoin" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2488.Fixture.ShouldNotQueryLazyProperties_FetchSelect" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2488.Fixture.ShouldNotQueryLazyProperties_Joinedsubclass" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2489" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.List_InvalidIndex" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.List_NullChild" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.Map_Item" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.Map_NullChild" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.Map_NullChild_TryGetValue" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2489.Fixture.Map_TryGetValue_Invalid" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2490" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2490.Fixture.BadSqlFromJoinLogicError" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2491" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2491.Fixture.InheritanceSameColumnName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2500" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2500.Fixture.TestLinqProjectionExpressionDoesntCacheParameters" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2505" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryComplexEqualToComplexThentUseTheCaseConstructorForBoth" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryConstantEqualToMemberThenDoesNotUseTheCaseConstructor" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryConstantEqualToNullableMemberThenUseTheCaseConstructorForMember" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryConstantEqualToNullableMemberValueThenDoesNotUseTheCaseConstructorForMember" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryConstantNotEqualToMemberThenDoesNotUseTheCaseConstructor" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2505.Fixture.WhenQueryConstantNotEqualToNullableMemberThenUseTheCaseConstructorForMember" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2507" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2507.Fixture.QueryEnumerationWithCheckedArithmeticOverflowTest" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2507.Fixture.QueryEnumerationWithUncheckedArithmeticOverflowTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH251" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CustomAccessFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH251.CustomAccessFixture.ConfigurationIsOK" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2510" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2510.Fixture.WhenReadFromCacheThenDoesNotThrow" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2530" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2530.Fixture.WhenTryToGetHighThenExceptionShouldContainWhereClause" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2546" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SetCommandParameterSizesFalseFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2546.SetCommandParameterSizesFalseFixture.LikeExpressionExceedsDefinedTypeSize" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2546.SetCommandParameterSizesFalseFixture.LikeExpressionWithinDefinedTypeSize" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2554" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2554.Fixture.TestHqlStatementsContainingSqlServerDataTypeKeywords" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2554.Fixture.TestMappedFormulasContainingSqlServerDataTypeKeywords" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2565" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2565.Fixture.WhenUseGetThenCanUsePersistToModify" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2565.Fixture.WhenUseLoadThenCanUsePersistToModify" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2568" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="UsageOfCustomCollectionPersisterTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2568.UsageOfCustomCollectionPersisterTests.BuildingSessionFactoryShouldNotThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2569" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2569.Fixture.WhenMapHiloToDifferentSchemaThanClassThenIdHasTheMappedSchema" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH257" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH257.Fixture.ManyToManyTableCreationScript" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2580" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2580.Fixture.WhenPersisterNotFoundShouldThrowAMoreExplicitException" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2583" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InnerJoinFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.InnerJoinFixture.AndShouldBeInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.InnerJoinFixture.ComparisonToConstantShouldBeInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.InnerJoinFixture.EqualsNullShouldBeOuterJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.InnerJoinFixture.NotEqualsNullShouldBeInnerJoin" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.InnerJoinFixture.OrShouldBeOuterJoin" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ManualTestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.ManualTestFixture.OrAndNavigationsShouldUseOuterJoins" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.ManualTestFixture.OrShouldBeCompatibleWithAdditionForNonNullReferences" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.ManualTestFixture.OrShouldBeCompatibleWithAdditionForNullReferences" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.ManualTestFixture.OrWithTrueShouldBeEqualToTrue" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.ManualTestFixture.ProjectionDoesNotChangeResult" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Pure Outer Join semantics has projection anomaly!]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingMoreOperatorsFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlus" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNot" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotAnd" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotAndNav" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotAndNav2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotAndNav3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotNav" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotOr" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotOrNav" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotOrNav2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindNotOrNav3" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindOrNav" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindOrNav2" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingMoreOperatorsFixture.TestNestedPlusBehindOrNav3" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingNotAndDeMorganFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingNotAndDeMorganFixture.Test_DeMorganNotAnd" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingNotAndDeMorganFixture.Test_DeMorganNotOr" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingNotAndDeMorganFixture.Test_NotEqualIsTheSameAsNotequal" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingNotAndDeMorganFixture.Test_NotNotCanBeEliminated" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingNotAndDeMorganFixture.Test_NotUnequalIsTheSameAsEqual" executed="True" result="Success" success="True" asserts="8" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingOneOrTreeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_wxQ_in_A_wxyP_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_wxQ_in_C__wxyP_in_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_wxvP_in_A__wxyP_in_D____IJ_wx_IJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_wxvP_in_C__wxyP_in_D____IJ_wx_OJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_wxyP_in_A_C____IJ_wx_IJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_A_C____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_A_C__rsQ_in_C____xy_IJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_A_C__rsQ_in_C_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_A_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_C____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_C__rsQ_in_C____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_C__rsQ_in_D____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOneOrTreeFixture.Test_xyP_in_C_D__rsQ_in_C_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingOrderByFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xy_in_A__xyP_in_F____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_A__xyP_in_F____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_A_C_D_F____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_A_C_F____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_C_D_F____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_C_F____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingOrderByFixture.Test_xyP_in_F____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingSelectFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xy_in_A__xyP_in_E____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_A__xyP_in_E____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_A_C_D_E____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_A_C_E____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_C_D_E____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_C_E____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingSelectFixture.Test_xyP_in_E____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingThreeOrTreesSideBySideFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_wxQ_in_A_wxyP_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_wxQ_in_C__wxyP_in_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_wxvP_in_A__wxyP_in_D____IJ_wx_IJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_wxvP_in_C__wxyP_in_D____IJ_wx_OJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_wxyP_in_A_C____OJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_B__rsQ_in_C_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_C____xy_OJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_C__rsQ_in_C____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_C__rsQ_in_C_D____xy_OJ_rs_IJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_A_C_D__rsQ_in_A_B_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_C____xy_OJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_C__rsQ_in_C____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_C__rsQ_in_D____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingThreeOrTreesSideBySideFixture.Test_xyP_in_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="MassTestingTwoOrTreesSideBySideFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_wxQ_in_A_wxyP_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_wxQ_in_C__wxyP_in_D____IJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_wxvP_in_A__wxyP_in_D____IJ_wx_IJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_wxvP_in_C__wxyP_in_D____IJ_wx_OJ_wxv_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_wxyP_in_A_C____OJ_wx_OJ_wxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_B__rsQ_in_C_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_C____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_C__rsQ_in_C____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_C__rsQ_in_C_D____xy_OJ_rs_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_A_C_D__rsQ_in_A_B_D____xy_IJ_rs_IJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_C____xy_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_C__rsQ_in_C____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_C__rsQ_in_D____xy_OJ_rs_OJ" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.MassTestingTwoOrTreesSideBySideFixture.Test_xyP_in_C_D____xy_IJ" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SelfJoinTestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.SelfJoinTestFixture.SelfJoinsWorkForNullCompares" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.SelfJoinTestFixture.SelfJoinsWorkForNullCompares2" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.SelfJoinTestFixture.SelfJoinsWorkIfBothSidesJoin" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.SelfJoinTestFixture.SelfJoinsWorkIfNothingJoins" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2583.SelfJoinTestFixture.SelfJoinsWorkIfOneSideJoins" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2587" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CachingWithLinq" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2587.CachingWithLinq.TestMethod1" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2603" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2603.Fixture.List" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2603.Fixture.Map" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2632" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2632.Fixture.GettingCustomerDoesNotThrow" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2651" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2651.Fixture.TestConditionalProjectionWithConstantAndLikeExpression" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH266" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.Fixture.BaseClassLoad" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.Fixture.SpecificSubclass" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UserFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH266.UserFixture.WhereAttribute" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2660And2661" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[SetUp : NHibernate.HibernateException : Keyword not supported: 'driver'.
  ----> System.ArgumentException : Keyword not supported: 'driver'.]]></message>
                        </failure>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2660And2661.Test.ShouldBeAbleToQueryEntity" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[TestFixtureSetUp failed in Test]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2662" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2662.Fixture.WhenCastAliasInQueryOverThenDoNotThrow" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2664" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2664.Fixture.Different_Key_In_DynamicComponentDictionary_Returns_Different_Keys" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2664.Fixture.Multiple_Query_Does_Not_Cache" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2664.Fixture.Query_DynamicComponent" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2673" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CachingWithTransformerTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.CanCacheCriteriaWithEagerLoadAndResultTransformer" description="NH2961/3311" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.CanCacheCriteriaWithLeftJoin" description="NH2961/3311" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.CanCacheCriteriaWithLeftJoinAndResultTransformer" description="NH2961/3311" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenCriteriaProjectionThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenCriteriaThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenEagerLoadingWithCriteriaThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenEagerLoadingWithHqlThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenEagerLoadingWithMultiCriteriaThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2673.CachingWithTransformerTests.WhenQueryThenNotThrows" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2691" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2691.Fixture.WhenUseCountWithOrderThenCutTheOrder" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2691.Fixture.WhenUseLongCountWithOrderThenCutTheOrder" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2692" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2692.Fixture.QueryingChildrenComponents" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2692.Fixture.QueryingChildrenComponentsHql" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2692.Fixture.QueryingParentWhichHasChildren" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2693" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._1_Querying_BasedOnFourthLevelExistence_WithIsAndCasting_ShouldReturnSameEntitiesAsLinqToObjects" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._2_Querying_BasedOnFourthLevelExistence_WithSelectAndOfType_ShouldReturnSameEntitiesAsLinqToObjects" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._3_Querying_BasedOnFourthLevelProperty_WithIsAndCasting_ShouldReturnSameEntitiesAsLinqToObjects" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._4_Querying_BasedOnFourthLevelProperty_WithSelectAndOfType_ShouldReturnSameEntitiesAsLinqToObjects" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._5_Querying_BasedOnFourthLevelExistence_ByUsingSpecificThirdLevelProperty_ShouldReturnSameEntitiesAsLinqToObjects" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2693.Fixture._6_Querying_BasedOnFourthLevelProperty_ByUsingSpecificThirdLevelProperty_ShouldReturnSameEntitiesAsLinqToObjects" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2697" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2697.SampleTest.Can_GetListOfArticleGroups" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2697.SampleTest.Can_GetListOfArticles" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2697.SampleTest.Can_SetArticleFavoriteWithHQL_NamedParam" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2700" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2700.Fixture.TestProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2703" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2703.Fixture.CanOuterJoinMultipleTablesWithComplexWithClause" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2703.Fixture.CanOuterJoinMultipleTablesWithSimpleWithClause" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2705" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Test" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2705.Test.Fetch_OnComponent_ShouldNotThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2705.Test.HqlQueryWithFetch_WhenDerivedClassesUseComponentAndEagerFetchManyToOne_DoesNotGenerateInvalidSql" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2705.Test.HqlQueryWithFetch_WhenDerivedClassesUseComponentAndManyToOne_DoesNotGenerateInvalidSql" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2705.Test.LinqQueryWithFetch_WhenDerivedClassesUseComponentAndEagerFetchManyToOne_DoesNotGenerateInvalidSql" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Locked by re-linq]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2705.Test.LinqQueryWithFetch_WhenDerivedClassesUseComponentAndManyToOne_DoesNotGenerateInvalidSql" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2721" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2721.Fixture.ListRemoveInsert" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Does not work because of extraneous update that sets reference to A to null.  Can be worked-around by removing not-null on reference to A.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2733" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2733.Fixture.CanUseExpressionForWhere" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2736" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2736.Fixture.TestHqlParametersWithTake" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2746" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2746.Fixture.TestQuery" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2756" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2756.Fixture.Saving_SetOfComponentsWithFormulaColumn_ShouldWork" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH276" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH276.Fixture.ManyToOneId" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="JoinedSubclass" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.NHSpecificTest.NH276.JoinedSubclass.Fixture.ManyToOneIdProperties" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2760" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2760.Fixture.ShouldBeAbleToSelectUserGroupAndOrderByUserCount" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2760.Fixture.ShouldBeAbleToSelectUserGroupAndOrderByUserCountWithHql" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2760.Fixture.ShouldBeAbleToSelectUserGroupAndSelectUserIdUserCount" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2760.Fixture.ShouldBeAbleToSelectUserGroupWhereUserCount" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2761" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2761.Fixture.WhenMultipleConfigurationUseSameMappingsThenConstraintsHasSameNames" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2772" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2772.Fixture.Lazy_Collection_Is_Not_Loaded" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2773" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2773.Fixture.DeserializedSession_ProxyType_ShouldBeEqualToOriginalProxyType" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2779" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2779.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2789" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2789.Fixture.EqualityOperator" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2789.Fixture.EqualityOperatorNotNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2789.Fixture.EqualityOperatorNull" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH280" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH280.Fixture.ConstInSelect" executed="True" result="Success" success="True" asserts="14" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH280.Fixture.TokenUnknow" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2806" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2806.Fixture.SelectAllAnimalsShouldPerformJoins" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2806.Fixture.SelectPregnantStatusOfTypeHql" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2808" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2808.Fixture.CheckExistanceOfEntity" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2808.Fixture.SaveOrUpdate" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2808.Fixture.Update" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2812" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2812.Fixture.PerformingAQueryOnAByteColumnShouldNotThrowEqualityOperator" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2812.Fixture.PerformingAQueryOnAByteColumnShouldNotThrowEquals" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2828" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2828.Fixture.WhenPersistShouldNotFetchUninitializedCollection" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH283" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH283.Fixture.ForeignKeyNames" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2839" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2839.FixtureByCode.YourTestName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2846" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2846.Fixture.FetchOnCountWorks" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2852" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2852.Fixture.AlsoFails" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2852.Fixture.ThenFetchCanExecute" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2856" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2856.Fixture.EntityIsReturnedFromCacheOnSubsequentQueriesWhenUsingCacheableFetchQuery" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2858" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2858.Fixture.GuidToStringShouldBeRetrievedCorrectlyInLinqProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2860" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2860.SampleTest.Can_LazyPropertyCastingException" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2860.SampleTest.Can_LazyPropertyNotCastingException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2865" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2865.Fixture.UsingConvertToInt32InSumExpressionShouldNotThrowException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2869" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2869.Fixture.CustomExtensionWithConstantArgumentShouldBeIncludedInHqlProjection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2875" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2875.Fixture.SpecifiedForeignKeyNameInByCodeMappingIsUsedInGeneratedSchema" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2880" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2880.Fixture.EnabledFiltersStillHaveFilterDefinitionOnDeserializedSessions" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2880.Fixture.ProxiesFromDeserializedSessionsCanBeLoaded" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2893" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2893.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2898" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2898.Fixture.SecondLevelCacheWithCriteriaQueries" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2898.Fixture.SecondLevelCacheWithHqlQueries" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2898.Fixture.UnfetchedLazyPropertyEquality" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2898.Fixture.UnfetchedLazyPropertyIsNotEqualToUnknownBackrefProperty" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2905" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2905.Fixture.JoinOverMultipleSteps_MethodSyntax_OnlySelectMany" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2905.Fixture.JoinOverMultipleSteps_MethodSyntax_SelectAndSelectMany" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2905.Fixture.JoinOverMultipleSteps_QuerySyntax_LetAndFrom" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2905.Fixture.JoinOverMultipleSteps_QuerySyntax_OnlyFrom" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2907" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2907.Fixture.ShouldNotEagerLoadKeyManyToOneWhenOverridingGetHashCode" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2913" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2913.Fixture.QueryShouldReturnResults" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2914" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotDate_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotDay_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotHour_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotMinute_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotMonth_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotSecond_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2914.Fixture.Linq_DateTimeDotYear_WorksInOracle" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2914.Fixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2923" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ExtraLazyFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2923.ExtraLazyFixture.ShouldNotThrowException" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2931" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MappingByCodeTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2931.MappingByCodeTest.CompiledMappings_ShouldNotDependOnAddedOrdering_AddedBy_AddMapping" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2931.MappingByCodeTest.CompiledMappings_ShouldNotDependOnAddedOrdering_AddedBy_AddMappings" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH295" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.List" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.LoadByIDFailure" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.JoinedSubclassFixture.SubclassFixture.LoadByIDFailureSameSession" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SubclassFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.List" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.LoadByIDFailure" executed="True" result="Success" success="True" asserts="8" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH295.SubclassFixture.LoadByIDFailureSameSession" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2951" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2951.Fixture.UpdateWithSubqueryToJoinedSubclass" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not working.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2955" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2955.Fixture.EnumerableContains" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2955.Fixture.GroupingContains" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2959" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2959.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2959.Fixture.CanUsePolymorphicCriteriaInMultiCriteria" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2959.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2959.Fixture.CanUsePolymorphicQueryInMultiQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH2959.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH296" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH296.Fixture.CRUD" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2960" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2960.Fixture.CriteriaQueryWithExplicitEntityNameOnlyReturnsEntitiesOfSameTypeWithMatchingEntityName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2960.Fixture.CriteriaQueryWithImplicitEntityNameReturnsAllEntitiesOfSameType" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2960.Fixture.QueryWithExplicitEntityNameOnlyReturnsEntitiesOfSameTypeWithMatchingEntityName" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2960.Fixture.QueryWithImplicitEntityNameReturnsAllEntitiesOfSameType" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2969" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetDomesticCat" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetDomesticCatAsCat" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetGoldfish" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetGoldfishAsFish" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetParrot" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2969.Fixture.CanGetParrotAsBird" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2976" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2976.Fixture.ShouldRemoveItemFromUninitializedGenericDictionary" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2977" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2977.ByCodeFixture.CanGetUniqueStoredProcedureResult" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2977.ByCodeFixture.CanLimitStoredProcedureResults" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH298" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="IndexedBidirectionalOneToManyTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH298.IndexedBidirectionalOneToManyTest.RemoveAtWorksCorrectly" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH298.IndexedBidirectionalOneToManyTest.SubItemMovesCorrectly" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2982" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithNewInstance" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithNullableDate" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithNullablePrimitive" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithPrimitive" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithProxy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2982.Fixture.SimpleExpressionWithString" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH2985" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH2985.Fixture.Test" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3004" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3004.Fixture.RemoveUnusedCommandParametersBug_1" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3004.Fixture.RemoveUnusedCommandParametersBug_2" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3010" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureWithBatcher" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3010.FixtureWithBatcher.DisposedCommandShouldNotBeReusedAfterClearAndAdd" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3010.FixtureWithBatcher.DisposedCommandShouldNotBeReusedAfterRemoveAtAndInsert" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureWithNoBatcher" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3010.FixtureWithNoBatcher.DisposedCommandShouldNotBeReusedAfterClearAndAdd" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3010.FixtureWithNoBatcher.DisposedCommandShouldNotBeReusedAfterRemoveAtAndInsert" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3016" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3016.Fixture.ShouldAllowMappingComponentAsIdWithNestedClass" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3037" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="NH3050" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3050.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3050.FixtureByCode.NH3050_Reproduction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3057" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3057.Fixture.CollectionQueryOnJoinedSubclassInheritedProperty" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3057.Fixture.CollectionQueryOnJoinedSubclassInheritedPropertyHql" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3058" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="SampleTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3058.SampleTest.MethodShouldLoadLazyProperty" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3070" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3070.Fixture.ProxyForEntityWithLazyPropertiesAndFormulaShouldEqualItself" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3074" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3074.Fixture.CritriaCanSetLockMode" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3074.Fixture.HqlCanSetLockMode" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Fails on at least Oracle and PostgreSQL. See NH-3074 and NH-2408.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH309" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH309.Fixture.RemoveNodeFromNodesCollection" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3093" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3093.Fixture.Linq11" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3093.Fixture.Linq12" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3093.Fixture.Linq2" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3119" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3119.ByCodeFixture.PocoComponentTuplizer_Instantiate_UsesReflectonOptimizer" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3119.ByCodeFixture.PocoComponentTuplizerOfDeserializedConfiguration_Instantiate_UsesReflectonOptimizer" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3121" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3121.Fixture.ShouldThrowWhenByteArrayTooLong" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Test limited to drivers that sets parameter length even with no length specified in the mapping.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3121.Fixture.ShouldThrowWhenImageAsISerializableTooLarge" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3121.Fixture.ShouldThrowWhenImageTooLarge" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3124" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3124.ByCodeFixture.LinqStatementGeneratesIncorrectCastToInteger" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3126" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="InvalidCastWithGenericDictionaryOnCascadeTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3126.InvalidCastWithGenericDictionaryOnCascadeTest.Test" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3132" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3132.Fixture.Correct_value_gets_saved" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3132.Fixture.Correct_value_gets_saved_with_lazy" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3132.Fixture.Query_returns_correct_name" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3138" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3138.FixtureByCode.PageQueryWithDistinctAndOrderByContainingAliasedFunction" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Failing]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3138.FixtureByCode.PageQueryWithDistinctAndOrderByContainingFunctionWithCommaSeparatedParameters" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3139" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3139.Fixture.Inventory_is_null" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3139.Fixture.Other_entities_are_still_proxies" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3141" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ProxyIdFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3141.ProxyIdFixture.ShouldThrowExceptionIfIdChangedOnLoadEntity" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3141.ProxyIdFixture.ShouldThrowExceptionIfIdChangedOnUnloadEntity" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3142" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ChildrenTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3142.ChildrenTest.ChildrenCollectionOfAllParentsShouldContainsThreeElements" executed="True" result="Success" success="True" asserts="6" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3142.ChildrenTest.ChildrenCollectionOfAllParentsWithComponentIdShouldContainsThreeElements" executed="True" result="Success" success="True" asserts="6" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3145" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3145.Fixture.QueryWithLazyBaseClassShouldNotThrowNoPersisterForError" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3149" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3149.Fixture.ShouldNotWaitForLock" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH315" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH315.Fixture.SaveClient" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3153" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3153.Fixture.ShouldGetIdentifierSchemaFromClassElement" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3153.Fixture.ShouldGetIdentifierSchemaFromMappingElement" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3160" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="MappingWithUniqueTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3160.MappingWithUniqueTests.TestThatScriptGenerationForDialectWithoutUniqueSucceeds" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH317" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH317.Fixture.ProxySerialization" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3171" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3171.Fixture.SqlShouldIncludeAliasAsJoinWhenRestrictingByCompositeKeyColumn" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3175" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3175.Fixture.LeftOuterJoinWithInnerRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3175.Fixture.LeftOuterJoinWithOuterRestriction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3175.Fixture.NestedSelectWithInnerRestriction" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH318" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH318.Fixture.DeleteWithNotNullPropertySetToNull" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3182" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectManyPregnantStatusCast1" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectManyPregnantStatusCast2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectManyPregnantStatusOfType1" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectManyPregnantStatusOfType2" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectPregnantStatus" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectPregnantStatusCast" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3182.Fixture.SelectPregnantStatusOfType" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3187" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3187.Fixture.CanGetCountOfPolicemen" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3202" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Test is for MS SQL Server driver only (custom driver is used).]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3202.Fixture.OffsetNotStartingAtOneSetsParameterToSkipValue" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Test is for MS SQL Server driver only (custom driver is used).]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3202.Fixture.OffsetStartingAtOneSetsParameterToSkipValuePlusOne" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Test is for MS SQL Server driver only (custom driver is used).]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3221" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="WeirdBehaviour" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3221.WeirdBehaviour.CanAddATodo" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3221.WeirdBehaviour.CanAddStuff" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3221.WeirdBehaviour.CanRemoveATodo" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3221.WeirdBehaviour.CanRemoveStuff" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3234" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3234.Fixture.ShouldNotFailWhenAddingNewLevels" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3234.Fixture.ShouldNotFailWhenReplacingLevels" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3237" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_DateTimes" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Decimals" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Doubles" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Floats" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Ints" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Longs" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_Max_And_Min_Aggregates_Work_For_Strings" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_That_DateTimeOffset_UserType_Can_Be_Used_For_Max_And_Min_Aggregates" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3237.ByCodeFixture.Test_That_Enum_Type_Can_Be_Used_For_Max_And_Min_Aggregates" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3252" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3252.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3252.Fixture.VerifyThatWeCanSaveAndLoad" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3252.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3316" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3316.ByCodeFixture.Test_That_Parent_Property_Can_Be_Persisted_And_Retrieved" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3324" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3324.FixtureByCode.LeftOuterJoin" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3324.FixtureByCode.LeftOuterJoinSetMaxResults" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3332" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TestJoinsWithSameTable" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3332.TestJoinsWithSameTable.TestJoins" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH335" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.Delete" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.SelectSubclass" executed="True" result="Success" success="True" asserts="12" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH335.Fixture.SelectSuperclass" executed="True" result="Success" success="True" asserts="11" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3372" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3372.Fixture.CanGeneratePropertyOnInsertOfEntityWithCustomLoader" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3372.Fixture.CanGeneratePropertyOnUpdateOfEntityWithCustomLoader" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3374" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3374.ByCodeFixture.TestNoTargetException" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3377" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3377.Fixture.ShouldBeAbleToCallConvertToBooleanFromStringParameter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3377.Fixture.ShouldBeAbleToCallConvertToDateTimeFromStringParameter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3377.Fixture.ShouldBeAbleToCallConvertToInt32FromStringParameter" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3377.Fixture.ShouldBeAbleToCallConvertToInt32FromStringParameterInMax" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3383" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3383.ByCodeFixture.CanRoundTripSerializedMultipleCascadeStyle" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3383.ByCodeFixture.DeserializedCascadeStyleRefersToSameObject" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3383.ByCodeFixture.DeserializedPropertyMapping_CascadeStyleNotYetInitializedOnDeserialization_RefersToSameCascadeStyle" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3383.ByCodeFixture.DeserializedPropertyMapping_RefersToSameCascadeStyle" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3392" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3392.Fixture.ExpandSubCollectionWithCompositeID" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3392.Fixture.ExpandSubCollectionWithEmbeddedCompositeID" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3401" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3401.Fixture.YesNoParameterLengthShouldBe1" description="NH-3401" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Test not implemented - this can be used a base for a proper test case for NH-3401.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3405" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3405.Fixture.CanLoadEntityWithXDocument" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[SetUp : System.ArgumentException : No mapping exists from DbType Xml to a known OdbcType.]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3408" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3408.Fixture.ProjectAnonymousTypeWithArrayProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3408.Fixture.ProjectAnonymousTypeWithArrayPropertyWhenByteArrayContains" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3408.Fixture.SelectBytePropertyWithArrayPropertyWhenByteArrayContains" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3428" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3428.Fixture.QueryFailsWhenDistinctOrderedResultIsPagedPastPageOne" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3436" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3436.Fixture.TestQueryWithContains" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3436.Fixture.TestQueryWithContainsInParallel" executed="True" result="Success" success="True" asserts="33" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH345" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH345.Fixture.OrderByCompositeProperty" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[This test fails on MS SQL 2000 because of SQL Server bug]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3453" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3453.Fixture.PropertyRefWithCompositeIdUpdateTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3455" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3455.Fixture.OrderBySpecifiedPropertyWithCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3455.Fixture.OrderBySpecifiedPropertyWithQueryOver" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3459" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.InnerJoinAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.InnerJoinWithOutermostRestrictionAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.InnerJoinWithRestrictionAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.LeftOuterJoinAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.LeftOuterJoinWithInnerRestrictionAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.LeftOuterJoinWithOutermostRestrictionAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3459.Fixture.LeftOuterJoinWithOuterRestrictionAndGroupBy" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3480" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3480.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3487" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3487.Fixture.CanDeserializeSessionWithEntityHashCollision" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3489" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Only run to test performance.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3489.Fixture.PerformanceTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Only run to test performance.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3491" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3491.FixtureByCode.ShouldProperlyMapComponentWhenMappingOnlyPartOfItInSomePlaces" description="NH-3491" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH350" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH350.Fixture.Loading" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3505" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3505.Fixture.StatelessSessionLazyUpdate" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3512" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DynamicUpdateOff" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3512.DynamicUpdateOff.ShouldChangeVersionWhenBasePropertyChanged" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3512.DynamicUpdateOff.ShouldChangeVersionWhenDerivedPropertyChanged" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DynamicUpdateOn" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3512.DynamicUpdateOn.ShouldChangeVersionWhenBasePropertyChanged" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3512.DynamicUpdateOn.ShouldChangeVersionWhenDerivedPropertyChanged" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3518" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="XmlColumnTest" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3518.XmlColumnTest does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3518.XmlColumnTest.FilteredQuery" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3518.XmlColumnTest does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3564" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3564.FixtureByCode.ShouldUseDifferentCache" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3567" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH3567Tests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3567.NH3567Tests.TestFlushModeAuto" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3570" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="BiFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3570.BiFixture.ShouldNotSaveRemoveChild" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="UniFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3570.UniFixture.ShouldNotSaveRemoveChild" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3571" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3571.Fixture.CanQueryDynamicComponentInComponent" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3571.Fixture.DifferentKeyInDynamicComponentDictionaryReturnsDifferentExpressionKeys" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3571.Fixture.MultipleQueriesShouldNotCache" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3583" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AutoFlushFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3583.AutoFlushFixture.ShouldAutoFlushWhenInDistributedTransaction" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3583.AutoFlushFixture.ShouldAutoFlushWhenInExplicitTransaction" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3590" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3590.Fixture.ShouldMerge" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3590.Fixture.ShouldUpdate" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3604" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3604.ByCodeFixture.CanPerformQueryOnMappedClassWithProtectedProperty" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3604.ByCodeFixture.CanWriteMappingsReferencingProtectedProperty" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3609" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3609.Fixture.AvgWithConditionalDoesNotThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3609.Fixture.CountWithConditionalDoesNotThrow" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3609.Fixture.GroupByClauseHasParameterSet" executed="True" result="Failure" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[  Expected: No Exception to be thrown
  But was:   (could not execute query
[ SELECT (case when this_.Name = ? then ? else ? end) as y0_ FROM Entity this_ GROUP BY (case when this_.Name = ? then ? else ? end) ]
  Name:cp0 - Value:  Name:cp1 - Value:1  Name:cp2 - Value:2
[SQL: SELECT (case when this_.Name = ? then ? else ? end) as y0_ FROM Entity this_ GROUP BY (case when this_.Name = ? then ? else ? end)])
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters, IResultTransformer forcedResultTransformer) in d:\BuildAgent-03\work\nh\src\NHibernate\Loader\Loader.cs:line 1667
   at NHibernate.Loader.Loader.DoList(ISessionImplementor session, QueryParameters queryParameters) in d:\BuildAgent-03\work\nh\src\NHibernate\Loader\Loader.cs:line 1643
   at NHibernate.Loader.Loader.ListIgnoreQueryCache(ISessionImplementor session, QueryParameters queryParameters) in d:\BuildAgent-03\work\nh\src\NHibernate\Loader\Loader.cs:line 1535
   at NHibernate.Loader.Loader.List(ISessionImplementor session, QueryParameters queryParameters, ISet`1 querySpaces, IType[] resultTypes) in d:\BuildAgent-03\work\nh\src\NHibernate\Loader\Loader.cs:line 1530
   at NHibernate.Loader.Criteria.CriteriaLoader.List(ISessionImplementor session) in d:\BuildAgent-03\work\nh\src\NHibernate\Loader\Criteria\CriteriaLoader.cs:line 89
   at NHibernate.Impl.SessionImpl.List(CriteriaImpl criteria, IList results) in d:\BuildAgent-03\work\nh\src\NHibernate\Impl\SessionImpl.cs:line 1906
   at NHibernate.Impl.CriteriaImpl.List(IList results) in d:\BuildAgent-03\work\nh\src\NHibernate\Impl\CriteriaImpl.cs:line 265
   at NHibernate.Impl.CriteriaImpl.List[T]() in d:\BuildAgent-03\work\nh\src\NHibernate\Impl\CriteriaImpl.cs:line 276
   at NHibernate.Criterion.QueryOver`1.List[U]() in d:\BuildAgent-03\work\nh\src\NHibernate\Criterion\QueryOver.cs:line 72
   at NHibernate.Criterion.QueryOver`1.NHibernate.IQueryOver<TRoot>.List[U]() in d:\BuildAgent-03\work\nh\src\NHibernate\Criterion\QueryOver.cs:line 217
   at NHibernate.Test.NHSpecificTest.NH3609.Fixture.<>c__DisplayClass12.<GroupByClauseHasParameterSet>b__e() in d:\BuildAgent-03\work\nh\src\NHibernate.Test\NHSpecificTest\NH3609\Fixture.cs:line 91
   at NUnit.Framework.Constraints.ThrowsNothingConstraint.Matches(Object actual)
]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3614" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3614.Fixture.CanProjectListOfStrings" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3620" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3620.Fixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3620.Fixture.Should_insert_two_blobs_and_a_date" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.NHSpecificTest.NH3620.Fixture does not apply with the current session-factory configuration]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3634" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.CachedQueryAgainstComponentWithANullPropertyUsingCriteria" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.CachedQueryMissesWithDifferentNotNullComponent" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.CachedQueryMissesWithDifferentNullComponent" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.QueryAgainstANullComponentPropertyUsingCriteriaApi" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.QueryAgainstComponentWithANullPropertyUsingCriteria" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.QueryOverANullComponentProperty" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3634.ByCodeFixture.QueryOverComponentWithANullProperty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH364" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagIdentity" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Delete" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Insert" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH364.Fixture.IdBagWithCompositeElementThatContainsAManyToOne_Update" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3641" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="TestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3641.TestFixture.TrueOrChildPropertyConcrete" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3641.TestFixture.TrueOrChildPropertyInterface" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3666" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3666.Fixture.CacheableDoesNotThrowExceptionWithNamedQuery" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3666.Fixture.CacheableDoesNotThrowExceptionWithNativeSQLQuery" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH369" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH369.Fixture.KeyManyToOneAndNormalizedPersister" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH372" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotInserted" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotInserted_Dynamic" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotUpdated" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.ComponentFieldNotUpdated_Dynamic" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotInserted" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotInserted_Dynamic" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotUpdated" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH372.Fixture.SubComponentFieldNotUpdated_Dynamic" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3727" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3727.ByCodeFixture.ClonedQueryOverExecutionMakesOriginalQueryOverNotWorking" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3727.ByCodeFixture.QueryOverWithSubqueryProjectionCanBeExecutedMoreThanOnce" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3731" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ByCodeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3731.ByCodeFixture.Serializing_Session_After_Changing_Key_ChildrenMap_Should_Work" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3731.ByCodeFixture.Serializing_Session_After_Deleting_First_Child_In_List_Should_Work" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3731.ByCodeFixture.Serializing_Session_After_Reordering_ChildrenList_Should_Work" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3754" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3754.Fixture.SecondLevelCacheWithResultTransformer" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3795" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestAliasInJoinAlias" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestAliasInJoinQueryOver" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestAliasInQueryOver" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestAliasInQueryOverWithConversion" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestFieldAliasInJoinAlias" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestFieldAliasInJoinQueryOver" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestFieldAliasInQueryOver" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3795.Fixture.TestFieldAliasInQueryOverWithConversion" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3800" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3800.Fixture.ComplexExample" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3800.Fixture.ExpectedHql" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3800.Fixture.MethodGroup" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3800.Fixture.OuterJoinGroupingWithSubQueryInProjection" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3800.Fixture.PureLinq" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH3818" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH3818.Fixture.SelectConditionalValuesTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH386" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH386.Fixture.Query" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH392" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                            <test-case name="NHibernate.Test.NHSpecificTest.NH392.Fixture.UnsavedMinusOneNoNullReferenceException" executed="True" result="Error" success="False" asserts="1">
                            <failure>
                              <message><![CDATA[TearDown : NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.NHSpecificTest.NH392.UnsavedValueMinusOne#1]]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH401" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH401.Fixture.Merge" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH440" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreAndLookup" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreWithLinksAndLookup" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH440.Fixture.StoreWithLinksAndLookupWithQueryFromFruit" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH464" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH464.Fixture.CompositeElement" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH467" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH467.Fixture.WhereClauseInManyToOneNavigation" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH473" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH473.Fixture.ChildItemsGetInOrderWhenUsingFetchJoin" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH473.Fixture.ChildItemsGetInOrderWhenUsingFetchJoinUniqueResult" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH479" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH479.Fixture.MergeTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NH47Fixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="Namespace" name="NH480" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH480.Fixture.CheckIII" executed="True" result="Success" success="True" asserts="7" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH496" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH496.Fixture.CRUD" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH508" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH508.Fixture.Bug" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH521" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH521.Fixture.AttachUninitProxyCausesInit" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH523" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH523.Fixture.MergeLazy" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH525" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH525.Fixture.DoSomething" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH534" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH534.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH548" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH548.Fixture.ParentPropertyOnCacheHit" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH552" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH552.Fixture.DeleteAndResave" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH555" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH555.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH593" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH593.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH606" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH606.Fixture.InvalidGenericMapping" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH607" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH607.Fixture.Test" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH623" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH623.Fixture.WhereAttributesOnBags" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH637" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH637.Fixture.MultiColumnBetween" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH642" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH642.Fixture.MissingGetter" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH642.Fixture.MissingSetter" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH643" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH643.Fixture.CacheAndLazyCollections" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH645" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="HqlFunctionWithAstHqlParser" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhere" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH645.HqlFunctionWithAstHqlParser.HQLFunctionFixtureBase.SimpleWhereWithAnotherClause2" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH646" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH646.Fixture.CanGetCountOfPolicemen" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH646.Fixture.PolicemenOrderedByRank" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not fixed yet.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH662" executed="True" result="Inconclusive" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported.]]></message>
                        </reason>
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH662.Fixture.UseDerivedClass" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Not supported.]]></message>
                            </reason>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH681" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH681.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH687" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH687.Fixture.GetQueryTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH693" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH693.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH693.Fixture.SpaceTableName" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH704" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH704.Fixture.ReAttachCatTest" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH706" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH706.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH712" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH712.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH719" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH719.Fixture.CacheLoadTest" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH720" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH720.Fixture.CacheTest" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH732" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH732.Fixture.CaseInsensitiveId" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH734" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH734.Fixture.LimitProblem" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH739" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH739.Fixture.Bug" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH742" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH742.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH750" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH750.Fixture.DeviceOfDrive" executed="True" result="Error" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH750.Drive#3][SQL: SELECT drive0_.[_id] as column1_6779_0_, drive0_.ClassFullName as ClassFul2_6779_0_ FROM Drive drive0_ WHERE drive0_.[_id]=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.NHSpecificTest.NH750.Drive#3][SQL: SELECT drive0_.[_id] as column1_6779_0_, drive0_.ClassFullName as ClassFul2_6779_0_ FROM Drive drive0_ WHERE drive0_.[_id]=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH776" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH776.Fixture.ProxiedOneToOneTest" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH826" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH826.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH830" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AutoFlushTestFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH830.AutoFlushTestFixture.AutoFlushTest" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH845" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH845.Fixture.HbmOrdererForgetsMappingFilesWithoutClassesIfExtendsIsUsed" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH851" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH851.Fixture.ConstructorNotFound" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH864" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH864.Fixture.OptimisticLocking" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH873" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH873.Fixture.CacheDisabled" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH883" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH883.Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH887" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH887.Fixture.PropertyRefReferencingParentProperty" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH892" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH892.Fixture.SelectWithWhereClause" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH898" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH898Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH898.NH898Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH901" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.Fixture.FixtureBase.EmptyValueTypeComponent" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.Fixture.FixtureBase.ReplaceValueTypeComponentWithSameValueDoesNotMakeItDirty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureByCode" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.FixtureByCode.FixtureBase.EmptyValueTypeComponent" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH901.FixtureByCode.FixtureBase.ReplaceValueTypeComponentWithSameValueDoesNotMakeItDirty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH930" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH930Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH930.NH930Fixture.DuplicateConstraints" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH940" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH940Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH940.NH940Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH941" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH941.Fixture.WhenSaveOneThenShouldSaveMany" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FixtureUsingList" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH941.FixtureUsingList.WhenSaveOneThenShouldSaveMany" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH952" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH952Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH952.NH952Fixture.OrderingAddResources" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH958" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH958Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH958.NH958Fixture.MergeWithAny1" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.NH958.NH958Fixture.MergeWithAny2" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH962" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH962Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH962.NH962Fixture.Bug" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH965" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH965Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH965.NH965Fixture.Bug" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH980" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="NH980Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH980.NH980Fixture.IdGeneratorShouldUseQuotedTableName" executed="True" result="Success" success="True" asserts="0" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="NH995" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.NH995.Fixture.Test" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NodeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.NodeFixture.InsertNodes" executed="True" result="Success" success="True" asserts="14" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OptimisticConcurrencyFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.DeleteOptimistic" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.StaleObjectStateCheckWithEntityPersisterAndOptimisticLock" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.NHSpecificTest.OptimisticConcurrencyFixture.StaleObjectStateCheckWithNormalizedEntityPersister" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Properties" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="CompositePropertyRefTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AccountsOuterJoin" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AccountsOuterJoinVerifyInitialization" executed="True" result="Success" success="True" asserts="5" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AddressBySequentialSelect" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.AddressOuterJoin" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.CompositePropertyRefTest.MappingOuterJoin" executed="True" result="Success" success="True" asserts="4" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="DynamicEntityTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.Properties.DynamicEntityTest.CanFetchByProperty" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="ProxyValidator" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.Interface" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.InternalField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.MultipleErrorsReported" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualEvent" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualInternal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProperty" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProtected" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.NonVirtualProtectedInternal" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.PrivateConstructor" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.PrivateSetterOnVirtualPropertyShouldThrows" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.PublicField" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.ValidClassTest" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.Fixture.VirtualPublicImplementsInterface" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="ShouldBeProxiableTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.DisposeNotBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.GetTypeNotBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenInternalMethodThenShouldBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenInternalNoVirtualPropertyThenShouldBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenPrivateMethodThenShouldntBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenProtectedInternalNoVirtualMethodThenShouldBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenProtectedInternalNoVirtualPropertyThenShouldBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenProtectedNoVirtualMethodThenShouldntBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenProtectedNoVirtualPropertyThenShouldntBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.ProxyValidator.ShouldBeProxiableTests.WhenPublicMethodThenShouldBeProxiable" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SessionIdLoggingContextTest" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="SetFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.SetFixture.DisassembleAndAssemble" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SimpleComponentFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.SimpleComponentFixture.TestInsert" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.NHSpecificTest.SimpleComponentFixture.TestLoad" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="SqlConverterAndMultiQuery" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.NHSpecificTest.SqlConverterAndMultiQuery.Fixture.MultiCriteriaShouldThrowUserException" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.SqlConverterAndMultiQuery.Fixture.MultiHqlShouldThrowUserException" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Driver NHibernate.Driver.OdbcDriver does not support multi-queries]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.NHSpecificTest.SqlConverterAndMultiQuery.Fixture.NormalCriteriaShouldThrowUserException" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.NHSpecificTest.SqlConverterAndMultiQuery.Fixture.NormalHqlShouldThrowUserException" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnsavedValueFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.UnsavedValueFixture.TestCRUD" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UserTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.UserTypeFixture.InsertNull" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="VersionTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.NHSpecificTest.VersionTest.UnsavedNegativeIntOrShort" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ObjectAssert" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.ObjectAssert.TestIDictionaryEqual" executed="True" result="Success" success="True" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Ondelete" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="JoinedSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.JoinedSubclassFixture.JoinedSubclassCascade" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OnDeleteFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.Ondelete.OnDeleteFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.OnDeleteFixture.JoinedSubclass" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.Ondelete.OnDeleteFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ParentChildFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Ondelete.ParentChildFixture.ParentChildCascade" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Operations" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="MergeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.DeleteAndMerge" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeBidiForeignKeyOneToOne" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeBidiPrimayKeyOneToOne" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Need some more investigation about id sync.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeDeepTree" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeDeepTreeWithGeneratedId" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeManaged" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeManyToManyWithCollectionDeference" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeStaleVersionFails" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeTree" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.MergeTreeWithGeneratedId" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMerge" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeVersioned" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeVersionedWithCollection" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.NoExtraUpdatesOnMergeWithCollection" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.PersistThenMergeInSameTxnWithTimestamp" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.PersistThenMergeInSameTxnWithVersion" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Operations.MergeFixture.RecursiveMergeTransient" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Pagination" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="CustomDialectFixture" executed="True" result="Error" success="False" asserts="0">
                    <failure>
                      <message><![CDATA[SetUp : NHibernate.HibernateException : Keyword not supported: 'driver'.
  ----> System.ArgumentException : Keyword not supported: 'driver'.]]></message>
                    </failure>
                    <results>
                      <test-case name="NHibernate.Test.Pagination.CustomDialectFixture.LimitFirst" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CustomDialectFixture]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.Pagination.CustomDialectFixture.LimitFirstMultiCriteria" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[TestFixtureSetUp failed in CustomDialectFixture]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PaginationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Pagination.PaginationFixture.PagingWithLock_NH2255" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Pagination.PaginationFixture.PagTest" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Parameters" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NamedParameterSpecificationTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Parameters.NamedParameterSpecificationTest.WhenHasNoSameNameThenAreNotEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Parameters.NamedParameterSpecificationTest.WhenHasNoSameNameThenNoSameHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Parameters.NamedParameterSpecificationTest.WhenHasSameNameThenAreEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Parameters.NamedParameterSpecificationTest.WhenHasSameNameThenSameHashCode" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PolymorphicGetAndLoad" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="PolymorphicGetAndLoadTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetBaseClassUsingInterfaceFromSessionCacheThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetBaseClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetClassUsingInterfaceOfMultippleHierarchyThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetInheritedClassUsingInterfaceFromSessionCacheThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenGetInheritedClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadBaseClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadClassUsingInterfaceOfMultippleHierarchyThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInheritedClassUsingInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInheritedClassUsingInterfaceThenShouldAllowNarrowingProxy" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenLoadInterfaceThenShouldAllowNarrowingProxy" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.PolymorphicGetAndLoad.PolymorphicGetAndLoadTest.WhenSaveDeleteBaseClassCastedToInterfaceThenNotThrows" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProjectionFixtures" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Fixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.AggregatingHirearchyWithCount" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.ErrorFromDBWillGiveTheActualSQLExecuted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.LimitingResultSetOnQueryThatIsOrderedByProjection" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.ProjectionFixtures.Fixture.QueryingWithParemetersAndParaemtersInOrderBy" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PropertyRef" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="KeyPropertyRefFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyRef.KeyPropertyRefFixture.PropertyRefUsesOtherColumn" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="PropertyTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BackFieldAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.BackFieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.PropertyTest.BackFieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicSetterExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.BasicSetterExceptionFixture.SetInvalidType" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.PropertyTest.BasicSetterExceptionFixture.SetValueArgumentException" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseMUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseMUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldCamelCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldCamelCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldGetterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseMUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.CamelCaseUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.LowerCaseUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.NoNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldGetterFixture.PascalCaseMUnderscoreNamingStrategy" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldLowerCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldLowerCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldLowerCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldPascalCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseMUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseMUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldPascalCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseUnderscoreFixture.FieldAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.PropertyTest.FieldPascalCaseUnderscoreFixture.FieldAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FieldSetterExceptionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.FieldSetterExceptionFixture.SetInvalidType" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseMUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseMUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterCamelCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterCamelCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterLowerCaseFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterLowerCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterLowerCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterPascalCaseMUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseMUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseMUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoSetterPascalCaseUnderscoreFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseUnderscoreFixture.NoSetterAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.PropertyTest.NoSetterPascalCaseUnderscoreFixture.NoSetterAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadonlyAccessorFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.PropertyTest.ReadonlyAccessorFixture.GetValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.PropertyTest.ReadonlyAccessorFixture.SetValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ProxyTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="NHibernateProxyHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ProxyTest.NHibernateProxyHelperFixture.GetClassOfProxy" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="QueryTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AggregateReturnTypesFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Avg" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Max" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Min" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.QueryTest.AggregateReturnTypesFixture.Sum" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CountFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.CountFixture.Default" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.CountFixture.Overridden" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DetachedQueryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.CopyToTest" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ExecutableNamedQuery" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ExecutableQuery" executed="True" result="Success" success="True" asserts="15" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.OverrideTest" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.PropertiesSet" executed="True" result="Success" success="True" asserts="61" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.ResultTransformer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.DetachedQueryFixture.Serializable" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultiCriteriaFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanAddCriteriaWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanAddDetachedCriteriaWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanExecuteMultiplyQueriesInSingleRoundTrip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanExecuteMultiplyQueriesInSingleRoundTrip_InTransaction" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanGetResultInAGenericList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotAddCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotAddDetachedCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotRetrieveCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanNotRetrieveDetachedCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUpdateStatisticsWhenGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseSecondLevelCacheWithPositionalParameters" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseSetParameterList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.CanUseWithParameterizedQueriesAndLimit" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultiCriteriaFixture.TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultiCriteriaFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleMixedQueriesFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanAddIQueryWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanExecuteMultiplyQueriesInSingleRoundTrip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanGetResultsInAGenericList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanNotAddQueryWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanNotRetrieveQueryResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries_MoreThanOneParameter" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanUseSecondLevelCacheWithPositionalParameters" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanUseSetParameterList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.CanUseWithParameterizedQueriesAndLimit" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.ExecutingQueryThroughMultiQueryTransformsResults" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.ExecutingQueryThroughMultiQueryTransformsResults_When_setting_on_multi_query_directly" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.NH_1085_WillGiveReasonableErrorIfBadParameterName" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.NH_1085_WillIgnoreParametersIfDoesNotAppearInQuery" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleMixedQueriesFixture.TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleMixedQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MultipleQueriesFixture" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanAddIQueryWithKeyAndRetrieveResultsWithKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanExecuteMultiplyQueriesInSingleRoundTrip" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanGetMultiQueryFromSecondLevelCache" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanGetResultsInAGenericList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanGetResultsInAGenericListClass" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanNotAddCriteriaWithKeyThatAlreadyExists" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanNotRetrieveCriteriaResultWithUnknownKey" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueries_MoreThanOneParameter" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseSecondLevelCacheWithPositionalParameters" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseSetParameterList" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.CanUseWithParameterizedQueriesAndLimit" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiCriteriaTransformsResults" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiQueryTransformsResults" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.ExecutingCriteriaThroughMultiQueryTransformsResults_When_setting_on_multi_query_directly" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.NH_1085_WillGiveReasonableErrorIfBadParameterName" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.NH_1085_WillIgnoreParametersIfDoesNotAppearInQuery" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.QueryTest.MultipleQueriesFixture.TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueries" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[NHibernate.Test.QueryTest.MultipleQueriesFixture does not apply with the current session-factory configuration]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NamedParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.NamedParametersFixture.TestMissingHQLParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.NamedParametersFixture.TestNullNamedParameter" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not supported; The AST parser can guess the type.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PositionalParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestMissingHQLParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestMissingHQLParameters2" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestNoPositionalParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestNullIndexedParameter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.PositionalParametersFixture.TestPositionOutOfBounds" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="QueryParametersFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateFailureDifferentLengths" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateNullParameters" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.QueryTest.QueryParametersFixture.ValidateOk" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ReadOnly" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ReadOnlyCriteriaQueryTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.DetachedCriteria" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableCriteriaReturnsExistingReadOnlyEntity" executed="True" result="Success" success="True" asserts="25" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableCriteriaReturnsExistingReadOnlyProxyInit" executed="True" result="Success" success="True" asserts="48" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableCriteriaReturnsExistingReadOnlyProxyNotInit" executed="True" result="Success" success="True" asserts="46" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableSessionDefaultCriteria" executed="True" result="Success" success="True" asserts="41" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableSessionModifiableCriteria" executed="True" result="Success" success="True" asserts="39" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ModifiableSessionReadOnlyCriteria" executed="True" result="Success" success="True" asserts="37" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlyCriteriaReturnsExistingModifiableProxyInit" executed="True" result="Success" success="True" asserts="48" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlyCriteriaReturnsExistingModifiableProxyNotInit" executed="True" result="Success" success="True" asserts="41" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlyCriteriaReturnsModifiableExistingEntity" executed="True" result="Success" success="True" asserts="24" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlySessionDefaultCriteria" executed="True" result="Success" success="True" asserts="37" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlySessionModifiableCriteria" executed="True" result="Success" success="True" asserts="39" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.ReadOnlySessionReadOnlyCriteria" executed="True" result="Success" success="True" asserts="39" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.Subselect" executed="True" result="Success" success="True" asserts="112" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyCriteriaQueryTest.TwoAliasesCache" executed="True" result="Success" success="True" asserts="24" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadOnlyProxyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.DetachedIsReadOnlyAfterEvictViaLazyInitializer" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.DetachedIsReadOnlyAfterEvictViaSession" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.DetachedSetReadOnlyAfterEvictViaLazyInitializer" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.DetachedSetReadOnlyAfterEvictViaSession" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.IsReadOnlyAfterSessionClosed" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.IsReadOnlyAfterSessionClosedViaLazyInitializer" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifiableViaLazyInitializerAfterInit" executed="True" result="Success" success="True" asserts="19" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifiableViaLazyInitializerBeforeInit" executed="True" result="Success" success="True" asserts="20" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifiableViaSessionBeforeInit" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifiableViaSessionBeforeInitByModifiableQuery" executed="True" result="Success" success="True" asserts="20" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifiableViaSessionBeforeInitByReadOnlyQuery" executed="True" result="Success" success="True" asserts="20" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ModifyToReadOnlyToModifiableIsUpdatedFailureExpected" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Failing test. See HHH-4642]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyChangedEvictedUpdate" executed="True" result="Success" success="True" asserts="26" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyDelete" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyEntityMergeDetachedProxyWithChange" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyInitToModifiableModifiedIsUpdated" executed="True" result="Success" success="True" asserts="31" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyModifiedToModifiableIsUpdatedFailureExpected" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Failing test. See HHH-4642]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyModifiedUpdate" executed="True" result="Success" success="True" asserts="24" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyProxyInitMergeDetachedEntityWithChange" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyProxyInitMergeDetachedProxyWithChange" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyProxyMergeDetachedEntityWithChange" executed="True" result="Success" success="True" asserts="33" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyProxyMergeDetachedProxyWithChange" executed="True" result="Success" success="True" asserts="33" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyRefresh" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyRefreshDeleted" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyRefreshDetached" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyToModifiableInitWhenModifiedIsUpdated" executed="True" result="Success" success="True" asserts="23" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaLazyInitializerAfterInit" executed="True" result="Success" success="True" asserts="25" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaLazyInitializerBeforeInit" executed="True" result="Success" success="True" asserts="24" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaLazyInitializerDoesNotInit" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaLazyInitializerNoChangeAfterInit" executed="True" result="Success" success="True" asserts="52" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaSessionBeforeInit" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaSessionBeforeInitByModifiableQuery" executed="True" result="Success" success="True" asserts="27" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaSessionBeforeInitByReadOnlyQuery" executed="True" result="Success" success="True" asserts="25" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaSessionDoesNotInit" executed="True" result="Success" success="True" asserts="35" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.ReadOnlyViaSessionNoChangeAfterInit" executed="True" result="Success" success="True" asserts="53" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetClosedSessionInLazyInitializer" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetModifiableBetweenTwoTransactionsSameSession" executed="True" result="Success" success="True" asserts="51" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetReadOnlyAfterSessionClosed" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetReadOnlyAfterSessionClosedViaLazyInitializer" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetReadOnlyBetweenTwoTransactionsSameSession" executed="True" result="Success" success="True" asserts="38" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyProxyTest.SetReadOnlyInTwoTransactionsSameSession" executed="True" result="Success" success="True" asserts="32" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadOnlySessionLazyNonLazyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultModifiableWithFilterCollectionEntities" executed="True" result="Success" success="True" asserts="74" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultModifiableWithQueryForEntity" executed="True" result="Success" success="True" asserts="139" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultModifiableWithReadOnlyFilterCollectionEntities" executed="True" result="Success" success="True" asserts="74" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultModifiableWithReadOnlyQueryForCollectionEntities" executed="True" result="Success" success="True" asserts="68" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultModifiableWithReadOnlyQueryForEntity" executed="True" result="Success" success="True" asserts="139" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultReadOnlyWithFilterCollectionEntities" executed="True" result="Success" success="True" asserts="74" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultReadOnlyWithModifiableFilterCollectionEntities" executed="True" result="Success" success="True" asserts="74" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultReadOnlyWithModifiableQueryForEntity" executed="True" result="Success" success="True" asserts="139" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.DefaultReadOnlyWithQueryForEntity" executed="True" result="Success" success="True" asserts="139" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingModifiableAfterSetSessionReadOnly" executed="True" result="Success" success="True" asserts="259" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingReadOnlyAfterSetSessionModifiable" executed="True" result="Success" success="True" asserts="157" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingReadOnlyAfterSetSessionModifiableExisting" executed="True" result="Success" success="True" asserts="158" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingReadOnlyAfterSetSessionModifiableExistingEntityReadOnly" executed="True" result="Success" success="True" asserts="158" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingReadOnlyAfterSetSessionModifiableExistingProxyReadOnly" executed="True" result="Success" success="True" asserts="158" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionLazyNonLazyTest.ExistingReadOnlyAfterSetSessionModifiableProxyExisting" executed="True" result="Success" success="True" asserts="158" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadOnlySessionTest" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.MergeWithReadOnlyEntity" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.MergeWithReadOnlyProxy" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ModifiableModeWithExistingReadOnlyEntity" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ModifiableSessionDefaultQueryReadOnlySessionIterate" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#3][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ModifiableSessionDefaultQueryReadOnlySessionScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ModifiableSessionReadOnlyQueryIterate" executed="True" result="Failure" success="False" asserts="1">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#103][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ModifiableSessionReadOnlyQueryScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.QueryModifiableIterate" executed="True" result="Failure" success="False" asserts="11">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#302][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.QueryModifiableScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.QueryReadOnlyIterate" executed="True" result="Failure" success="False" asserts="11">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#402][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.QueryReadOnlyScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyDelete" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyGetModifyAndDelete" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyModeWithExistingModifiableEntity" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyOnProxies" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyOnTextType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyProxyRefresh" executed="True" result="Success" success="True" asserts="19" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyProxyRefreshDetached" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyRefresh" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlyRefreshDetached" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlySessionDefaultQueryIterate" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#410][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlySessionDefaultQueryScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlySessionModifiableQueryIterate" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not load an entity: [NHibernate.Test.ReadOnly.DataPoint#510][SQL: SELECT datapoint0_.Id as Id7033_0_, datapoint0_.xval as xval7033_0_, datapoint0_.yval as yval7033_0_, datapoint0_.Description as Descript4_7033_0_ FROM DataPoint datapoint0_ WHERE datapoint0_.Id=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HY000] [Microsoft][SQL Native Client]Connection is busy with results for another command
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlySessionTest.ReadOnlySessionModifiableQueryScroll" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Scrollable result sets not supported in NHibernate]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadOnlyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.MergeWithReadOnlyEntity" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ModifiableModeWithExistingReadOnlyEntity" executed="True" result="Success" success="True" asserts="109" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyDelete" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyGetModifyAndDelete" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyModeAutoFlushOnQuery" executed="True" result="Success" success="True" asserts="106" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyModeWithExistingModifiableEntity" executed="True" result="Success" success="True" asserts="108" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyOnProxies" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyOnTextType" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyRefresh" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.ReadOnlyRefreshDetached" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyTest.SaveReadOnlyModifyInSaveTransaction" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReadOnlyVersionedNodes" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.AddNewChildToReadOnlyParent" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.AddNewParentToReadOnlyChild" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.GetChildMakeReadOnlyThenMergeDetachedChildWithNewParent" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.GetParentMakeReadOnlyThenMergeDetachedParentWithNewChildC" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.MergeDetachedChildWithNewParentCommitWithReadOnlyChild" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.MergeDetachedParentWithNewChildCommitWithReadOnlyParent" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.MergeUnchangedDetachedParentChildren" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.SetReadOnlyTrueAndFalse" executed="True" result="Success" success="True" asserts="17" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.SetReadOnlyUpdateSetModifiableFailureExpected" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Failure expected]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.UpdateChildWithNewParentCommitWithReadOnlyChild" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.UpdateParentWithNewChildCommitWithReadOnlyParent" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.UpdateSetModifiable" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.UpdateSetReadOnlySetModifiableFailureExpected" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Failure expected]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.ReadOnly.ReadOnlyVersionedNodes.UpdateSetReadOnlyTwice" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="ReflectionOptimizerTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="LcgFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.ReflectionOptimizerTest.LcgFixture.NoGetter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.ReflectionOptimizerTest.LcgFixture.NoSetter" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SecondLevelCacheTests" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ScalarQueryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.QueryCacheInvalidation" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.ShouldHitCacheUsingNamedQueryWithProjection" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.ShouldHitCacheUsingQueryWithProjection" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.ScalarQueryFixture.SimpleProjections" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SecondLevelCacheTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.CachedQueriesHandlesEntitiesParametersCorrectly" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.DeleteItemFromCollectionThatIsInTheSecondLevelCache" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.InsertItemToCollectionOnTheSecondLevelCache" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithCriteriaQueries" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithCriteriaQueriesForItemWithCollections" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithHqlQueries" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SecondLevelCacheTests.SecondLevelCacheTest.SecondLevelCacheWithHqlQueriesForItemWithCollections" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="SessionCacheTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.SessionCacheTest.LoadAfterNotExists" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.Test.SessionCacheTest.MakeCollectionTransient" executed="True" result="Success" success="True" asserts="6" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SqlCommandTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SqlDeleteBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlDeleteBuilderFixture.DeleteSqlStringTest" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlInsertBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.Commented" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.InsertSqlStringTest" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlInsertBuilderFixture.MixingParametersAndValues" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlSelectBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlSelectBuilderFixture.SelectStringSqlTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlSimpleSelectBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlSimpleSelectBuilderFixture.SimpleSelectStringSqlTest" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.Index" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.InsertAndAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringBuilderFixture.RemoveAt" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Append" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Count" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWith" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWithEmptyString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.EndsWithParameter" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringParameterInOrderBy" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimple" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimpleEndsWithParameter" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringSimpleParameterInMiddle" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithFormulaProperty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithFormulaPropertyWithSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithOrderByInSubselect" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithParenthesisOnlyInWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithSubselectInWhere" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.GetSubselectStringWithTwoFormulas" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.HashcodeEqualForEqualStringsWithDifferentHistory" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.IndexOf" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.IndexOfNonCompacted" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Insert" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.NoSubstringStartingWithLast" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.ParameterPropertyShouldReturnNewInstances" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Parse" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Replace" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Split" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.StartsWith" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.StartsWithEmptyString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.StartsWithWhenContainsParameters" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Substring" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.Substring2Complex" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringComplex" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLast" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLastAndParameters" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.SubstringStartingWithLastMultiplePossibilities" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimAllParam" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimAllString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimBeginParamEndString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringFixture.TrimBeginStringEndParam" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlStringParameterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlStringParameterFixture.EqualsSameType" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlTokenizerFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeBlockComments" executed="True" result="Success" success="True" asserts="76" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeBrackets" executed="True" result="Success" success="True" asserts="160" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeLineComments" executed="True" result="Success" success="True" asserts="32" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeParameters" executed="True" result="Success" success="True" asserts="68" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeQuotedIdentifier" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeQuotedString" executed="True" result="Success" success="True" asserts="16" />
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlTokenizerFixture.TokenizeSimpleSelectStatement" executed="True" result="Success" success="True" asserts="92" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlUpdateBuilderFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.SqlUpdateBuilderFixture.UpdateStringSqlTest" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TemplateFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.OrderByMultiColumn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.OrderBySingleColumn" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.SqlCommandTest.TemplateFixture.ReplaceWithDialectQuote" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SqlTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Custom" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="Firebird" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="FireBirdTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Firebird.FireBirdTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MSSQLTest" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomSQLSupportTest.HandSQL" executed="True" result="Failure" success="False" asserts="3">
                                <failure>
                                  <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not update: [NHibernate.Test.SqlTest.Employment#1][SQL: UPDATE EMPLOYMENT SET ENDDATE=?, VALUE=?, CURRENCY=? WHERE EMPID=?]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                                </failure>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.ParameterHandling" executed="True" result="Success" success="True" asserts="4" />
                              <test-case name="NHibernate.Test.SqlTest.Custom.MsSQL.MSSQLTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MySQL" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MySQLTest" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.MySQL.MySQLTest does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="Oracle" executed="True" result="Inconclusive" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="OracleCustomSQLFixture" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                            </reason>
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomSQLSupportTest.HandSQL" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.EntityStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.ParameterHandling" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.CustomStoredProcSupportTest.ScalarStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                              <test-case name="NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture.RefCursorOutStoredProcedure" executed="False" result="Ignored">
                                <reason>
                                  <message><![CDATA[NHibernate.Test.SqlTest.Custom.Oracle.OracleCustomSQLFixture does not apply to NHibernate.Dialect.MsSql2008Dialect]]></message>
                                </reason>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Identity" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MSSQLIdentityInsertWithStoredProcsTest" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.SqlTest.Identity.MsSQL.MSSQLIdentityInsertWithStoredProcsTest.IdentityInsertWithStoredProcsTest.InsertUsesStoredProc" executed="True" result="Failure" success="False" asserts="3">
                                <failure>
                                  <message><![CDATA[  Message 1
  Expected string length 75 but was 69. Strings differ at index 38.
  Expected: "...zation_native_id_insert @p0;@p0 = 'IFA' [Type: String (4000)]"
  But was:  "...zation_native_id_insert ?;p0 = 'IFA' [Type: String (3)]"
  --------------------------------------^

TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="Query" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="GeneralTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.AutoDetectAliasing" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.SqlTest.Employment#1][SQL: INSERT INTO EMPLOYMENT (EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, AVALUE, CURRENCY, EMPID) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CanExecuteFutureList" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CanExecuteFutureValue" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CanSetResultTransformerOnFutureQuery" executed="True" result="Success" success="True" asserts="4" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CanSetResultTransformerOnFutureValue" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.CompositeIdJoinsFailureExpected" executed="False" result="Ignored">
                            <reason>
                              <message><![CDATA[Failure expected]]></message>
                            </reason>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.FailOnNoAddEntityOrScalar" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.MappedAliasStrategy" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.SqlTest.Employment#2][SQL: INSERT INTO EMPLOYMENT (EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, AVALUE, CURRENCY, EMPID) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.MixAndMatchEntityScalar" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ParameterList" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ResultSetMappingDefinition" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.SqlTest.Employment#3][SQL: INSERT INTO EMPLOYMENT (EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, AVALUE, CURRENCY, EMPID) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.ScalarValues" executed="True" result="Success" success="True" asserts="22" />
                          <test-case name="NHibernate.Test.SqlTest.Query.GeneralTest.SQLQueryInterface" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.SqlTest.Employment#4][SQL: INSERT INTO EMPLOYMENT (EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, AVALUE, CURRENCY, EMPID) VALUES (?, ?, ?, ?, ?, ?, ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: False database cleaned: True connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="SelfReferencingCollectionLoadTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.SqlTest.Query.SelfReferencingCollectionLoadTest.LoadCollection" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SqlTypeFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SqlTest.SqlTypeFactoryFixture.GetSqlTypeWithPrecisionScale" description="Should cache constructed types" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Stateless" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Fetching" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="StatelessSessionFetchingTest" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Stateless.Fetching.StatelessSessionFetchingTest.DynamicFetch" executed="True" result="Success" success="True" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="FetchingLazyCollections" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="LazyCollectionFetchTests" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Stateless.FetchingLazyCollections.LazyCollectionFetchTests.ShouldWorkLoadingComplexEntities" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Stateless.Human#65540][SQL: INSERT INTO Animal (Description, Name, NickName, Birthdate, kind, Id) VALUES (?, ?, ?, ?, 'NHibernate.Test.Stateless.Human', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="TreeFetchTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Stateless.FetchingLazyCollections.TreeFetchTests.FetchMultipleHierarchies" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatelessSessionFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.CanGetImplementor" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.CreateUpdateReadDelete" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.DisposingClosedStatelessSessionShouldNotCauseSessionException" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.HavingDetachedCriteriaThenCanGetExecutableCriteriaFromStatelessSession" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.HqlBulk" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.InitId" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.Refresh" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionFixture.WhenSetTheBatchSizeThenSetTheBatchSizeOfTheBatcher" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.NotSupportedException : No batch size was defined for the session factory, batching is disabled. Set adonet.batch_size = 1 to enable batching.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatelessSessionQueryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionQueryFixture.Criteria" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionQueryFixture.CriteriaWithSelectFetchMode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Stateless.StatelessSessionQueryFixture.Hql" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatelessWithRelationsFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stateless.StatelessWithRelationsFixture.ShouldWorkLoadingComplexEntities" executed="True" result="Failure" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.Stateless.Human#65540][SQL: INSERT INTO Animal (Description, Name, NickName, Birthdate, kind, Id) VALUES (?, ?, ?, ?, 'NHibernate.Test.Stateless.Human', ?)]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented
TearDown : Test didn't clean up after itself. session closed: True database cleaned: False connection closed: True]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Stats" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SessionStatsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stats.SessionStatsFixture.Can_use_cached_query_that_return_no_results" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Stats.SessionStatsFixture.SessionStatistics" executed="True" result="Success" success="True" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StatsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Stats.StatsFixture.CollectionFetchVsLoad" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.Stats.StatsFixture.IncrementQueryExecutionCount_WhenExplicitQueryIsExecuted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Stats.StatsFixture.QueryStatGathering" executed="True" result="Success" success="True" asserts="18" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Subclass" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="EnumDiscriminator" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="EnumDiscriminatorFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.Subclass.EnumDiscriminator.EnumDiscriminatorFixture.CanConvertOneTypeToAnother" executed="True" result="Success" success="True" asserts="0" />
                          <test-case name="NHibernate.Test.Subclass.EnumDiscriminator.EnumDiscriminatorFixture.PersistsDefaultDiscriminatorValue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubclassExtendsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Subclass.SubclassExtendsFixture.SubclassFixture.HqlClassKeyword" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Subclass.SubclassExtendsFixture.SubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Subclass.SubclassFixture.HqlClassKeyword" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Subclass.SubclassFixture.TestCRUD" executed="True" result="Success" success="True" asserts="15" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SubclassFilterTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DiscrimSubclassFilterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubclassFilterTest.DiscrimSubclassFilterTest.FiltersWithSubclass" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedSubclassFilterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubclassFilterTest.JoinedSubclassFilterTest.FiltersWithSubclass" executed="True" result="Success" success="True" asserts="7" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Subselect" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ClassSubselectFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Subselect.ClassSubselectFixture.EntitySubselect" executed="True" result="Success" success="True" asserts="12" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SubselectFetchTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SubselectFetchFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.ManyToManyCriteriaJoin" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchCriteria" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchHql" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchNamedParam" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchPosParam" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.SubselectFetchTest.SubselectFetchFixture.SubselectFetchWithLimit" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="SystemTransactions" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TransactionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionFixture.CanUseSystemTransactionsToCommit" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TransactionNotificationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.AfterBegin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.Complete" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.NoTransaction" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.OneTransactionScopesInsideOneSession" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.Rollback" executed="True" result="Success" success="True" asserts="2" />
                      <test-suite type="Theory" name="ShouldNotifyAfterDistributedTransaction" description="NH2128, NH3572" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.ShouldNotifyAfterDistributedTransaction(True)" executed="True" result="Success" success="True" asserts="3" />
                          <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.ShouldNotifyAfterDistributedTransaction(False)" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="ShouldNotifyAfterDistributedTransactionWithOwnConnection" description="NH2128" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.ShouldNotifyAfterDistributedTransactionWithOwnConnection(True)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.ShouldNotifyAfterDistributedTransactionWithOwnConnection(False)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="NHibernate.Test.SystemTransactions.TransactionNotificationFixture.TwoTransactionScopesInsideOneSession" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="TestTestCase" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.Test.TestTestCase.TestExecuteStatement" executed="True" result="Success" success="True" asserts="0" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Tools" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="hbm2ddl" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="Namespace" name="SchemaExportTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="AutoQuoteFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture.WhenCalledExplicitlyThenTakeInAccountHbm2DdlKeyWordsSetting" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.AutoQuoteFixture.WhenUpdateCalledExplicitlyThenTakeInAccountHbm2DdlKeyWordsSetting" executed="True" result="Success" success="True" asserts="5" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="ExportToFileFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.ExportToFileFixture.ExportToFileUsingExecute" executed="True" result="Success" success="True" asserts="2" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.ExportToFileFixture.ExportToFileUsingSetOutputFileAndCreate" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="WithColumnTagFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaExportTests.WithColumnTagFixture.ShouldCreateSchemaWithDefaultClause" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaMetadataUpdaterTest" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SchemaMetadataUpdaterFixture" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.AutoQuoteTableAndColumnsAtStratup" executed="True" result="Success" success="True" asserts="5" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.AutoQuoteTableAndColumnsAtStratupIncludeKeyWordsImport" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.CanRetrieveReservedWords" executed="True" result="Success" success="True" asserts="3" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.CanWorkWithAutoQuoteTableAndColumnsAtStratup" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.ExplicitAutoQuote" executed="True" result="Success" success="True" asserts="5" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.UpdateReservedWordsInDialect" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaMetadataUpdaterTest.SchemaMetadataUpdaterFixture.WhenConfiguredOnlyExplicitAutoQuote" executed="True" result="Error" success="False" asserts="0">
                                <failure>
                                  <message><![CDATA[System.ArgumentException : Keyword not supported: 'driver'.]]></message>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaUpdate" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="MigrationFixture" executed="True" result="Failure" success="False" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaUpdate.MigrationFixture.SimpleColumnAddition" executed="True" result="Failure" success="False" asserts="2">
                                <failure>
                                  <message><![CDATA[  Expected: 0
  But was:  1
]]></message>
                                </failure>
                              </test-case>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaUpdate.MigrationFixture.SimpleColumnReplace" executed="True" result="Failure" success="False" asserts="2">
                                <failure>
                                  <message><![CDATA[  Expected: 0
  But was:  1
]]></message>
                                </failure>
                              </test-case>
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="SchemaValidator" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="SchemaValidateFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaValidator.SchemaValidateFixture.ShouldNotVerifyModifiedTable" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaValidator.SchemaValidateFixture.ShouldVerifySameTable" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.Tools.hbm2ddl.SchemaValidator.SchemaValidateFixture.ShouldVerifySameTableTurkish" executed="True" result="Success" success="True" asserts="1" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TransactionTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TransactionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.CommandAfterTransactionShouldWork" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.CommitAfterDisposeThrowsException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.EnlistAfterDisposeDoesNotThrowException" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.RollbackAfterDisposeThrowsException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.SecondTransactionShouldntBeCommitted" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionFixture.WasCommittedOrRolledBack" executed="True" result="Success" success="True" asserts="19" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TransactionNotificationFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.AfterBegin" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.Commit" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.NoTransaction" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.Rollback" executed="True" result="Success" success="True" asserts="3" />
                      <test-suite type="Theory" name="ShouldNotifyAfterTransaction" description="NH2128" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.ShouldNotifyAfterTransaction(True)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.ShouldNotifyAfterTransaction(False)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="Theory" name="ShouldNotifyAfterTransactionWithOwnConnection" description="NH2128" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.ShouldNotifyAfterTransactionWithOwnConnection(True)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.TransactionTest.TransactionNotificationFixture.ShouldNotifyAfterTransactionWithOwnConnection(False)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TransformTests" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AliasToBeanResultTransformerFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorksWithStruct" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorkWithOutPublicParameterLessCtor" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TransformTests.AliasToBeanResultTransformerFixture.WorkWithPublicParameterLessCtor" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ImplementationOfEqualityTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TransformTests.ImplementationOfEqualityTests.AliasToBeanConstructorResultTransformer_ShouldHaveEqualityBasedOnCtorParameter" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.TransformTests.ImplementationOfEqualityTests.AliasToBeanResultTransformer_ShouldHaveEqualityBasedOnCtorParameter" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.TransformTests.ImplementationOfEqualityTests.AllEmbeddedTransformersOverridesEqualsAndGetHashCode" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.TransformTests.ImplementationOfEqualityTests.AllEmbeddedTransformersWithDefaultCtorHasEqualityWorkingAsSingleton" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.TransformTests.ImplementationOfEqualityTests.LinqResultTransformer_ShouldHaveEqualityBasedOnCtorParameter" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypedManyToOne" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TypedManyToOneTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypedManyToOne.TypedManyToOneTest.TestCreateQuery" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.TypedManyToOne.TypedManyToOneTest.TestCreateQueryNull" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypeParameters" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DefinedTypeForIdFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypeParameters.DefinedTypeForIdFixture.HasParametrizedId" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypeParameters.DefinedTypeForIdFixture.Save" description="Ensure the parametrized generator is working." executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeParameterTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypeParameters.TypeParameterTest.Loading" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.TypeParameters.TypeParameterTest.Save" executed="True" result="Success" success="True" asserts="5" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="TypesTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="BinaryBlobTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWriteLargeBlob" executed="True" result="Success" success="True" asserts="10001" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryBlobTypeFixture.ReadWriteZeroLen" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinaryTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.InsertNull" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.InsertZeroLength" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BinaryTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="111" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BooleanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.BooleanTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.BooleanTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ByteTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.ByteTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.ByteTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CharClassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.CharClassFixture.ReadWrite" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CurrencyTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.Equals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.ShouldBeMoneyType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.CurrencyTypeFixture.UnsavedValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTime2TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.DeepCopyNotNull" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.EqualityShouldIgnoreKindAndNotIgnoreMillisecond" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.Next" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.DateTime2TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.DeepCopyNotNull" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.EqualityShouldIgnoreKindAndMillisecond" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DateTimeTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTypeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ReadWriteBaseValue" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.TypesTest.DateClass][SQL: INSERT INTO DateClass (DateValue) VALUES (?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ReadWriteNormal" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[NHibernate.Exceptions.GenericADOException : could not insert: [NHibernate.Test.TypesTest.DateClass][SQL: INSERT INTO DateClass (DateValue) VALUES (?); select SCOPE_IDENTITY()]
  ----> System.Data.Odbc.OdbcException : ERROR [HYC00] [Microsoft][SQL Native Client]Optional feature not implemented]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeFixture.ShouldBeDateType" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DateTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenNoParameterThenDefaultValueIsBaseDateValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenSetParameterNullThenNotThrow" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.DateTypeTest.WhenSetParameterThenDefaultValueIsParameterValue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DecimalTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DecimalTypeFixture.UnsavedValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DoubleTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.DoubleTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.DoubleTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EntityTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EntityTypeFixture.Compare" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.TypesTest.EntityTypeFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EnumCharTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.CanBeUsedAsDiscriminator" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingChar" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingString" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumCharTypeFixture.ReadFromQueryUsingValue" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EnumStringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.EnumStringTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.EnumStringTypeFixture.ReadFromQuery" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithColumnNode" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithColumnNode.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithExplicitDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithExplicitDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithHeuristicDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithHeuristicDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithInLineDefinedType" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithInLineDefinedType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="True" result="Success" success="True" asserts="13" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FixtureWithSqlType" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[Not fixed yet.]]></message>
                    </reason>
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.FixtureWithSqlType.TypeSqlTypeFixture.NotIgnoreSqlTypeDef" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not fixed yet.]]></message>
                        </reason>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GenericEnumStringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumStringTypeFixture.ReadFromLoad" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumStringTypeFixture.ReadFromQuery" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GenericEnumTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GenericEnumTypeTest.TheNameShouldBeFullNameAndAssembly" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GuidTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.GetGuidWorksWhenUnderlyingTypeIsRepresentedByString" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.GuidInWhereClause" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.GuidTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int16TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int16TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int16TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int32TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int32TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int32TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Int64TypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.NullableWrapperDirty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.Int64TypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LocalDateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.LocalDateTimeTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PersistentEnumTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.CanWriteAndReadUsingBothHeuristicAndExplicitGenericDeclaration" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsFalseSameUnderlyingValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.EqualsTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.UsageInHqlSelectNew" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.PersistentEnumTypeFixture.UsageInHqlSelectNewInvalidConstructor" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SByteTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.Equals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.ObjectToSQLString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.SByteTypeFixture.StringToObject" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SerializableTypesFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.SerializableTypesFixture.AllEmbeddedTypesAreMarkedSerializable" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.TypesTest.SerializableTypesFixture.EachEmbeddedBasicTypeIsSerializable" executed="True" result="Success" success="True" asserts="43" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringClobTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.LongString" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.StringClobTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.StringTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringTypeWithLengthFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.StringTypeWithLengthFixture.CriteriaLikeParameterCanExceedColumnSize" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This test fails against the ODBC driver.  The driver would need to be override to allow longer parameter sizes than the column.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.StringTypeWithLengthFixture.DbThrowsOnTooLong" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.StringTypeWithLengthFixture.HqlLikeParameterCanExceedColumnSize" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[This test fails against the ODBC driver.  The driver would need to be override to allow longer parameter sizes than the column.]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.StringTypeWithLengthFixture.NhThrowsOnTooLong" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TicksTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Comparer" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TicksTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeAsTimeSpanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeAsTimeSpanTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimeAsTimeSpanTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanFixture2" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanFixture2.SavingAndRetrieving" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.InvalidCastException : Failed to convert parameter value from a DateTime to a TimeSpan.
  ----> System.InvalidCastException : Invalid cast from 'System.DateTime' to 'System.TimeSpan'.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimeSpanTypeFixture2" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimeSpanTypeFixture2.SavingAndRetrieving" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TimestampTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TimestampTypeFixture.Next" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TimestampTypeFixture.Seed" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TypeFactoryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetGuidSingleton" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetNullableGeneric" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.GetStringWithDiffLength" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.HoldQualifiedTypes" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.WhenUseEnumThenReturnGenericEnumType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.TypeFactoryFixture.WhenUseNullableEnumThenReturnGenericEnumType" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UriTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.AutoDiscoverFromNetType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.InsertNullValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.TypesTest.UriTypeFixture.ReadWriteRelativeUri" description="NH-2887" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UtcDateTimeTypeFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.UtcDateTimeTypeFixture.ReadWrite" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XDocTypeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.AutoDiscoverFromNetType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.InsertNullValue" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.ArgumentException : No mapping exists from DbType Xml to a known OdbcType.]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XDocTypeFixture.ReadWrite" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.ArgumentException : No mapping exists from DbType Xml to a known OdbcType.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlDocTypeFixture" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.AutoDiscoverFromNetType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.InsertNullValue" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.ArgumentException : No mapping exists from DbType Xml to a known OdbcType.]]></message>
                        </failure>
                      </test-case>
                      <test-case name="NHibernate.Test.TypesTest.XmlDocTypeFixture.ReadWrite" executed="True" result="Error" success="False" asserts="0">
                        <failure>
                          <message><![CDATA[System.ArgumentException : No mapping exists from DbType Xml to a known OdbcType.]]></message>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unconstrained" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="SimplyManyToOneIgnoreTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.SimplyManyToOneIgnoreTest.Unconstrained" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnconstrainedNoLazyTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.ManyToOneUpdateFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.Unconstrained" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.UnconstrainedNoCache" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedNoLazyTest.UnconstrainedOuterJoinFetch" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnconstrainedTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.ManyToOneUpdateFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.Unconstrained" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.UnconstrainedNoCache" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.Unconstrained.UnconstrainedTest.UnconstrainedNoLazyTest.UnconstrainedOuterJoinFetch" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unionsubclass" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="DatabaseKeywordsFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unionsubclass.DatabaseKeywordsFixture.UnionSubClassQuotesReservedColumnNames" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UnionSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.NestedUnionedSubclasses" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclass" executed="True" result="Success" success="True" asserts="37" />
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassCollection" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassFetchMode" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassManyToOne" executed="True" result="Success" success="True" asserts="18" />
                      <test-case name="NHibernate.Test.Unionsubclass.UnionSubclassFixture.UnionSubclassOneToMany" executed="True" result="Success" success="True" asserts="9" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Unionsubclass2" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="UnionSubclassFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.Unionsubclass2.UnionSubclassFixture.QuerySubclassAttribute" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.Unionsubclass2.UnionSubclassFixture.UnionSubclass" executed="True" result="Success" success="True" asserts="11" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UnionsubclassPolymorphicFormula" executed="True" result="Inconclusive" success="False" asserts="0" />
              <test-suite type="Namespace" name="UserCollection" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Parameterized" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="ParameterizedUserCollectionTypeFixture" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UserCollection.Parameterized.ParameterizedUserCollectionTypeFixture.BasicOperation" executed="True" result="Success" success="True" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UserCollectionTypeTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UserCollection.UserCollectionTypeTest.BasicOperation" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="UtilityTest" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="ArrayHelperTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ArrayHelperTests.ArraysShouldBeEqual" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.ArrayHelperTests.EitherArrayNullShouldNotBeEqual" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.ArrayHelperTests.NullArraysShouldBeEqual" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssemblyQualifiedTypeNameFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.Construct" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ConstructWithNullAssembly" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ConstructWithNullType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.Equals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringComplex" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringEscaped" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.AssemblyQualifiedTypeNameFixture.ToStringSimple" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BasicFormatterFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.BasicFormatterFixture.StringWithNestedDelimiters" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="Namespace" name="EnumerableExtensionsTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="AnyExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenDisposableListThenCallDispose" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenEmptyListThenReturnFalse" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.AnyExtensionTests.WhenNoEmptyListThenReturnTrue" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FirstExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenEmptyThenThrowsInvalidOperation" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenHasElementsThenReturnFirst" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstExtensionTests.WhenNullThenThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="FirstOrNullExtensionTests" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenEmptyThenReturnNull" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenHasElementsThenReturnFirst" executed="True" result="Success" success="True" asserts="1" />
                          <test-case name="NHibernate.Test.UtilityTest.EnumerableExtensionsTests.FirstOrNullExtensionTests.WhenNullThenThenThrows" executed="True" result="Success" success="True" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExpressionsHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ExpressionsHelperFixture.DecodeMemberAccessExpression" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentityMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.AddNoHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.AddValueTypeException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ConcurrentEntitiesModification" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ConcurrentEntries" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsDiffObjectWithEquals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsSameObjectByRef" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.ContainsSameObjectWithDiffEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.Count" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.Keys" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.SetItemChangedHashCodeTwice" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapFixture.SetItemsEqualHashCodeDiffIdentity" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentityMapSequencedFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.AddNoHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.AddValueTypeException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ConcurrentEntitiesModification" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ConcurrentEntries" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsDiffObjectWithEquals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsSameObjectByRef" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.ContainsSameObjectWithDiffEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.Count" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.Keys" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.SetItemChangedHashCodeTwice" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentityMapSequencedFixture.IdentityMapFixture.SetItemsEqualHashCodeDiffIdentity" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="IdentitySetFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.AddNoHashCode" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.AddValueTypeException" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.ContainsDiffObjectWithEquals" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.ContainsSameObjectByRef" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.ContainsSameObjectWithDiffEquals" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.Count" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.SetItemChangedHashCodeTwice" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.IdentitySetFixture.SetItemsEqualHashCodeDiffIdentity" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsMultiple" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsMultipleBreak" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsSingle" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableFixture.WrapsSingleBreak" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="JoinedEnumerableGenericFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsMultiple" executed="True" result="Success" success="True" asserts="9" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsMultipleBreak" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsSingle" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.JoinedEnumerableGenericFixture.WrapsSingleBreak" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LinkedHashMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Add" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Clear" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Contains" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.ContainsValue" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.CopyTo" executed="True" result="Success" success="True" asserts="12" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.FirstKeyFirstValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumerator" executed="True" result="Success" success="True" asserts="13" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorEmpty" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.GetEnumeratorModifyExceptionFromUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Keys" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.LastKeyLastValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Remove" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Serialization" executed="True" result="Success" success="True" asserts="14" />
                      <test-case name="NHibernate.Test.UtilityTest.LinkedHashMapFixture.Values" executed="True" result="Success" success="True" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LRUMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.GetEntrySet" executed="True" result="Success" success="True" asserts="11" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutAndRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutWithNoSizeLimit" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutWithSizeLimit" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.PutWithSizeLimitOfZero" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.LRUMapFixture.RemoveEmpty" executed="True" result="Success" success="True" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullableDictionaryFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.NullableDictionaryFixture.AddKeyValue" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.NullableDictionaryFixture.AddKeyValuePair" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.NullableDictionaryFixture.AddUsingIndexer" executed="True" result="Success" success="True" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertiesHelperTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidBoolValueThenUseDefault" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidInt32ValueThenUseDefault" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenInvalidInt64ValueThenUseDefault" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidBoolValueThenValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidInt32ValueThenValue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.PropertiesHelperTest.WhenValidInt64ValueThenValue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.GetConstantValueEnum" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.GetGenericMethodFrom" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.InheritedInterfaceOverridesEquals" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.InheritedInterfaceOverridesGetHashCode" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.NoTypeFoundReturnsNull" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.OverridesEquals" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.OverridesGetHashCode" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.SystemTypes" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.TryGetMethod" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperFixture.TypeFoundInNotLoadedAssembly" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectHelperGetProperty" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenFieldThenNotFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenNullNameThenNotFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenNullSourceThenNotFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenPropertyIsExplicitImplementationOfInterfaceThenFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenPropertyIsInBaseClassThenFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenPropertyIsInClassThenFound" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectHelperGetProperty.WhenPropertyNameWithDifferentCaseThenNotFound" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionHelperIsMethodOfTests" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenCustomTypeMatchThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenDeclaringTypeMatchThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNoMatchThenFalse" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNullMethodInfoThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenNullTypeThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericDefinitionAndMatchThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedAbstractAndMatchGenericInterfaceDefinitionThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedAbstractAndMatchThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedInterfaceAndMatchGenericInterfaceDefinitionThenTrue" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperIsMethodOfTests.WhenTypeIsGenericImplementedInterfaceAndMatchThenTrue" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReflectionHelperTest" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGenericGetMethodForNullThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGenericMethodOfClassThenReturnGenericDefinition" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetMethodForNullThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyForBoolThenReturnPropertyInfo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyForNullThenThrows" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenGetPropertyThenReturnPropertyInfo" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenNoGenericMethodOfClassThenReturnDefinition" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenStaticGenericMethodThenReturnGenericDefinition" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.ReflectionHelperTest.WhenStaticNoGenericMethodThenReturnDefinition" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SafetyEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.MixedCollection" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.MixedWithNulls" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SafetyEnumerableFixture.RecyclingCollection" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SequencedHashMapFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Add" executed="True" result="Success" success="True" asserts="10" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Clear" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Contains" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ContainsKey" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ContainsValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.CopyTo" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Count" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.FirstKey" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.FirstValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumerator" executed="True" result="Success" success="True" asserts="7" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorEmpty" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromAdd" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromRemove" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.GetEnumeratorModifyExceptionFromUpdate" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Item" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Keys" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.LastKey" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.LastValue" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Remove" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Serialize" executed="True" result="Success" success="True" asserts="8" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.Values" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.SequencedHashMapFixture.ValuesEmpty" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SingletonEnumerableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.DifferentEnumeratorInEachRequest" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.ShouldWorkAsEnumerator" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.SingletonEnumerableFixture.ShouldWorkInForeach" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SoftLimitMRUCacheFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.SoftLimitMRUCacheFixture.DontFillUp" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StringHelperFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.CantCountQuotes" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.CountUnquotedParams" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GenerateAliasForGenericTypeName" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromFQClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromFQType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromGenericFQClass" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetClassnameFromGenericType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.GetFullClassNameForGenericType" executed="True" result="Success" success="True" asserts="2" />
                      <test-suite type="ParameterizedTest" name="IndexOfAnyNewLineReturnsIndexAndLength" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IndexOfAnyNewLineReturnsIndexAndLength(&quot;ab\r\nfoo\r\n&quot;,4,7,2)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IndexOfAnyNewLineReturnsIndexAndLength(&quot;ab&quot;,0,-1,0)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IndexOfAnyNewLineReturnsIndexAndLength(&quot;a\r\nb&quot;,0,1,2)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IndexOfAnyNewLineReturnsIndexAndLength(&quot;a\nb&quot;,0,1,1)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="IsAnyNewLineMatchAndLength" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsAnyNewLineMatchAndLength(&quot;a\r\nb&quot;,0,False,0)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsAnyNewLineMatchAndLength(&quot;a\r\nb&quot;,1,True,2)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsAnyNewLineMatchAndLength(&quot;ab&quot;,0,False,0)" executed="True" result="Success" success="True" asserts="2" />
                          <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsAnyNewLineMatchAndLength(&quot;a\nb&quot;,1,True,1)" executed="True" result="Success" success="True" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.IsBackticksEnclosed" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.PurgeBackticksEnclosing" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.Qualify" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.StringHelperFixture.QualifyArray" executed="True" result="Success" success="True" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThreadSafeDictionaryFixture" executed="True" result="Inconclusive" success="False" asserts="0" />
                  <test-suite type="TestFixture" name="TypeNameParserFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ComplexNestedWithGeneric" description="Parser multiple nested classes with a generics." executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.CustomArray" description="Should parse arrays of custom types" executed="True" result="Success" success="True" asserts="4" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.NH1736" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.NH1822" description="Parse with new lines" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseComplexGenericType" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseComplexGenericTypeName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseFullAssemblyName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeName" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeNameWithDefaultNamespaceUnused" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseGenericTypeNameWithDefaults" executed="True" result="Success" success="True" asserts="6" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseInvalidEscape" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseNestedWithinGeneric" description="Parser multiple nested classes with a generic in the middle." executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseQualified" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseSimple" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseTrims" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseUnmatchedBracket" executed="False" result="Ignored">
                        <reason>
                          <message><![CDATA[Not a big problem because the next type request will throw the exception]]></message>
                        </reason>
                      </test-case>
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseUnmatchedEscapedBracket" executed="True" result="Success" success="True" asserts="0" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultAssemblyUnused" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceAndAssembly" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceNoAssembly" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithDefaultNamespaceUnused" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.ParseWithEscapes" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.TypeNameParserFixture.SystemArray" description="Should parse arrays of System types" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="WeakHashtableFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Basic" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.IsSerializable" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Iteration" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.IterationAfterGC" executed="True" result="Success" success="True" asserts="2" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.RetrieveNonExistentItem" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.Scavenging" executed="True" result="Success" success="True" asserts="1" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.WeakReferenceGetsFreedButHashCodeRemainsConstant" executed="True" result="Success" success="True" asserts="3" />
                      <test-case name="NHibernate.Test.UtilityTest.WeakHashtableFixture.WeakRefWrapperEquals" executed="True" result="Success" success="True" asserts="3" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="VersionTest" executed="True" result="Failure" success="False" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Db" executed="True" result="Failure" success="False" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="DbVersionFixture" executed="True" result="Failure" success="False" asserts="0">
                        <results>
                          <test-case name="NHibernate.Test.VersionTest.Db.DbVersionFixture.CollectionNoVersion" executed="True" result="Failure" success="False" asserts="2">
                            <failure>
                              <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.VersionTest.Db.User#1]
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                          <test-case name="NHibernate.Test.VersionTest.Db.DbVersionFixture.CollectionVersion" executed="True" result="Failure" success="False" asserts="0">
                            <failure>
                              <message><![CDATA[NHibernate.StaleObjectStateException : Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect): [NHibernate.Test.VersionTest.Db.User#1]
TearDown : Test didn't clean up after itself. session closed: False database cleaned: False connection closed: True]]></message>
                            </failure>
                          </test-case>
                        </results>
                      </test-suite>
                      <test-suite type="Namespace" name="MsSQL" executed="True" result="Success" success="True" asserts="0">
                        <results>
                          <test-suite type="TestFixture" name="ComplexDomainFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.ComplexDomainFixture.NH1685" executed="True" result="Success" success="True" asserts="5" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="GeneratedBinaryVersionFixture" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldChangeAfterUpdate" executed="True" result="Success" success="True" asserts="1" />
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldCheckStaleState" executed="True" result="Success" success="True" asserts="0" />
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.GeneratedBinaryVersionFixture.ShouldRetrieveVersionAfterFlush" executed="True" result="Success" success="True" asserts="2" />
                            </results>
                          </test-suite>
                          <test-suite type="TestFixture" name="LazyVersionTest" executed="True" result="Success" success="True" asserts="0">
                            <results>
                              <test-case name="NHibernate.Test.VersionTest.Db.MsSQL.LazyVersionTest.CanUseVersionOnEntityWithLazyProperty" description="NH-3589" executed="True" result="Success" success="True" asserts="0" />
                            </results>
                          </test-suite>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="VersionFixture" executed="True" result="Success" success="True" asserts="0">
                    <results>
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.CollectionNoVersion" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.CollectionVersion" executed="True" result="Success" success="True" asserts="5" />
                      <test-case name="NHibernate.Test.VersionTest.VersionFixture.VersionShortCircuitFlush" executed="True" result="Success" success="True" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="Namespace" name="UnitTesting" executed="True" result="Success" success="True" asserts="0">
            <results>
              <test-suite type="TestFixture" name="StringTokenizerFixture" executed="True" result="Success" success="True" asserts="0">
                <results>
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.NotSoSimpleWithDelimiters" executed="True" result="Success" success="True" asserts="14" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.NotSoSimpleWithoutDelimiters" executed="True" result="Success" success="True" asserts="6" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.OnlyDelimitersWithDelimiters" executed="True" result="Success" success="True" asserts="6" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.OnlyDelimitersWithoutDelimiters" executed="True" result="Success" success="True" asserts="1" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.SimpleStringWithDelimiters" executed="True" result="Success" success="True" asserts="4" />
                  <test-case name="NHibernate.UnitTesting.StringTokenizerFixture.SimpleStringWithoutDelimiters" executed="True" result="Success" success="True" asserts="3" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>