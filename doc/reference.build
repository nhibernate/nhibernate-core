<?xml version="1.0" ?>
<project
	name="doc"
	default="build"
	xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd"
>

	<property name="root.dir" value=".." />
	<include buildfile="${root.dir}/build-common/common.xml" />

	<target name="init" depends="common.init">
		<property name="lang" value="en" />

		<property name="output.dir" value="${build.dir}/doc" />
		<property name="output.html.basename" value="NHibernate.Reference" />
		<property name="output.help2.dir" value="${output.dir}/help2" />

		<property name="build.html.dir" value="${output.dir}" />
		<property name="build.single.dir" value="${build.html.dir}/html_single" />
		<property name="build.chunk.dir" value="${build.html.dir}/html" />
		<property name="build.shared.dir" value="${build.html.dir}/shared" />
		<property name="build.pdf.dir" value="${output.dir}/tmp-pdf" />

		<property name="hhc.exe" value="${environment::get-folder-path('ProgramFiles')}\HTML Help Workshop\hhc" />

		<property name="python.dir" value="${root.dir}/Tools/python" />
		<property name="python.zip" value="${root.dir}/Tools/python.zip" />

		<path id="saxon.classpath" >
			<pathelement file="support/lib/avalon-framework-cvs-20020806.jar" />
			<pathelement file="support/lib/batik.jar" />
			<pathelement file="support/lib/fop-0.20.5-RFC3066-patched.jar" />
			<pathelement file="support/lib/jai_codec.jar" />
			<pathelement file="support/lib/jai_core.jar" />
			<pathelement file="support/lib/rowan-0.1.jar" />
			<pathelement file="support/lib/saxon.jar" />
			<pathelement file="support/lib/saxon-dbxsl-extensions.jar" />
		</path>

	</target>

	<target name="clean" depends="init" description="Cleans any previous builds">
		<delete dir="${build.html.dir}" failonerror="false" />
	</target>

	<target name="build" depends="init, extract-python"
		description="Generates the documentation in multiple formats from the Docbook files.">
		<call target="build-html" />
		<call target="build-pdf" />
	</target>

	<target name="build-html.make-directories" depends="init">
		<mkdir dir="${build.single.dir}" failonerror="false" />
		<mkdir dir="${build.chunk.dir}"  failonerror="false" />
	</target>

	<target name="build-html.generate" depends="init build-html.make-directories">
		<exec program="make.bat" workingdir="${output.dir}">
			<arg value="html" />
		</exec>

		<exec program="make.bat" workingdir="${output.dir}">
			<arg value="singlehtml" />
		</exec>

	</target>

	<target name="build-html.copy-misc-files" depends="init">
		<!-- Copy the images and the stylesheet -->
		<copy todir="${build.shared.dir}/images" overwrite="true" >
			<fileset basedir="images">
				<include name="**/*.gif" />
				<include name="**/*.png" />
			</fileset>
		</copy>
		<copy todir="${build.shared.dir}/css" overwrite="true" >
			<fileset basedir="styles">
				<include name="**/*.css" />
			</fileset>
		</copy>
	</target>

	<target name="build-html"
		depends="build-html.generate build-html.copy-misc-files"
		description="Generates html from reStructuredText files." />

	<target name="build-pdf-normal">
		<!-- Create a PDF from the XSL/FO. -->
		<exec program="make.bat" workingdir="${output.dir}">
			<arg value="rinoh" />
		</exec>
	</target>

	<target name="build-pdf" depends="build-pdf-normal">
		<!-- House keeping, delete temporary files. -->
		<delete dir="${build.pdf.dir}" />
	</target>

	<target name="extract-python" depends="init">
		<unzip zipfile="${python.zip}" todir="${python.dir}" />
	</target>

</project>
