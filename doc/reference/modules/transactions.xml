<chapter id="transactions">
    <title>Transactions And Concurrency</title>

    <para>
        NHibernate is not itself a database. It is a lightweight object-relational
        mapping tool. Transaction management is delegated to the underlying database
        connection. If the connection is enlisted with a distributed transaction,
        operations performed by the <literal>ISession</literal> are atomically part
        of the wider distributed transaction. NHibernate can be seen as a thin adapter
        to ADO.NET, adding object-oriented semantics.
    </para>

    <sect1 id="transactions-basics">
        <title>Configurations, Sessions and Factories</title>
        <para>
            An <literal>ISessionFactory</literal> is an expensive-to-create, threadsafe object 
            intended to be shared by all application threads. An <literal>ISession</literal> 
            is an inexpensive, non-threadsafe object that should be used once, for a single
            business process, and then discarded. For example, when using NHibernate in an
            ASP.NET application, pages could obtain an <literal>ISessionFactory</literal> 
            using:
        </para>

        <programlisting><![CDATA[ISessionFactory sf = Global.SessionFactory;]]></programlisting>

        <para>
            Each call to a service method could create a new <literal>ISession</literal>,
            <literal>Flush()</literal> it, <literal>Commit()</literal> its transaction,
            <literal>Close()</literal> it and finally discard it. (The <literal>ISessionFactory</literal>
            may also be kept in a static <emphasis>Singleton</emphasis> helper variable.)
        </para>

        <para>
            We use the NHibernate <literal>ITransaction</literal> API as discussed previously,
            a single <literal>Commit()</literal> of a NHibernate <literal>ITransaction</literal>
            flushes the state and commits any underlying database connection. Transaction scopes
            can be used instead, which allows the transaction to be distributed. See
            <xref linkend="transactions-scopes"/>.
        </para>

        <para>
            NHibernate may be used without managing transactions neither with the
            <literal>ITransaction</literal> API nor with transaction scopes. We advise against
            such a pattern, because this causes each single interaction of the session with the
            database to be a transaction on its own. This causes overhead, breaks the unit of
            work in case of errors during flushing, and causes some features to be disabled like
            auto-flush and second level cache. If the application encounters locks contention or
            deadlocks, investigate lowering the isolation level (like enabling read committed
            snapshot with SQL Server) or shortening your transactions rather than removing them.
        </para>

        <para>
            Ensure you understand the semantics of <literal>Flush()</literal>.
            Flushing synchronizes the persistent store with in-memory changes but
            <emphasis>not</emphasis> vice-versa. Note that for all NHibernate ADO.NET
            connections/transactions, the transaction isolation level for that connection
            applies to all operations executed by NHibernate!
        </para>

        <para>
            The next few sections will discuss alternative approaches that utilize versioning
            to ensure transaction atomicity. These are considered "advanced" approaches to
            be used with care.
        </para>

    </sect1>

    <sect1 id="transactions-threads">
        <title>Threads and connections</title>

        <para>
            You should observe the following practices when creating NHibernate Sessions:
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Never create more than one concurrent <literal>ISession</literal> or
                    <literal>ITransaction</literal> instance per database connection.
                </para>
            </listitem>
            <listitem>
                <para>
                    Be extremely careful when creating more than one <literal>ISession</literal>
                    per database per transaction. The <literal>ISession</literal> itself keeps
                    track of updates made to loaded objects, so a different <literal>ISession</literal>
                    might see stale data.
                </para>
            </listitem>
            <listitem>
                <para>
                    The <literal>ISession</literal> is <emphasis>not</emphasis> threadsafe!
                    Never access the same <literal>ISession</literal> in two concurrent threads.
                    An <literal>ISession</literal> is usually only a single unit-of-work!
                </para>
                <para>
                    Since NHibernate 5.0, the session and its queries IO bound methods have async counterparts.
                    Each call to an async method must be awaited before further interacting with the session or
                    its queries.
                </para>
            </listitem>
        </itemizedlist>
    </sect1>

    <sect1 id="transactions-identity">
        <title>Considering object identity</title>

        <para>
            The application may concurrently access the same persistent state in two
            different units-of-work. However, an instance of a persistent class is never shared
            between two <literal>ISession</literal> instances. Hence there are
            two different notions of identity:
        </para>

        <variablelist spacing="compact">
            <varlistentry>
                <term>Database Identity</term>
                <listitem>
                    <para>
                        <literal>foo.Id.Equals( bar.Id )</literal>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>CLR Identity</term>
                <listitem>
                    <para>
                        <literal>foo == bar</literal>
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>
            Then for objects attached to a <emphasis>particular</emphasis> <literal>Session</literal>,
            the two notions are equivalent. However, while the application might concurrently access
            the "same" (persistent identity) business object in two different sessions, the two
            instances will actually be "different" (CLR identity).
        </para>
        <para>
            This approach leaves NHibernate and the database to worry about concurrency. The
            application never needs to synchronize on any business object, as long as it sticks to a
            single thread per <literal>ISession</literal> or object identity (within an
            <literal>ISession</literal> the application may safely use <literal>==</literal> to
            compare objects).
        </para>
    </sect1>

    <sect1 id="transactions-optimistic">
        <title>Optimistic concurrency control</title>

        <para>
            Many business processes require a whole series of interactions with the user
            interleaved with database accesses. In web and enterprise applications it is
            not acceptable for a database transaction to span a user interaction.
        </para>

        <para>
            Maintaining isolation of business processes becomes the partial responsibility
            of the application tier, hence we call this process a long running
            <emphasis>application transaction</emphasis>. A single application transaction
            usually spans several database transactions. It will be atomic if only one of
            these database transactions (the last one) stores the updated data, all others
            simply read data.
        </para>

        <para>
            The only approach that is consistent with high concurrency and high
            scalability is optimistic concurrency control with versioning. NHibernate
            provides for three possible approaches to writing application code that
            uses optimistic concurrency.
        </para>

        <sect2 id="transactions-optimistic-longsession">
            <title>Long session with automatic versioning</title>

            <para>
                A single <literal>ISession</literal> instance and its persistent instances are
                used for the whole application transaction.
            </para>

            <para>
                The <literal>ISession</literal> uses optimistic locking with versioning to
                ensure that many database transactions appear to the application as a single
                logical application transaction. The <literal>ISession</literal> is disconnected
                from any underlying ADO.NET connection when waiting for user interaction. This
                approach is the most efficient in terms of database access. The application
                need not concern itself with version checking or with reattaching detached
                instances.
            </para>

            <programlisting><![CDATA[// foo is an instance loaded earlier by the Session
session.Reconnect();
using (var transaction = session.BeginTransaction())
{
    foo.Property = "bar";
    session.Flush();
    transaction.Commit();
}
session.Disconnect();]]></programlisting>

            <para>
                The <literal>foo</literal> object still knows which <literal>ISession</literal>
                it was loaded it. As soon as the <literal>ISession</literal> has an ADO.NET connection,
                we commit the changes to the object.
            </para>

            <para>
                This pattern is problematic if our <literal>ISession</literal> is too big to
                be stored during user think time, e.g. an <literal>HttpSession</literal> should
                be kept as small as possible. As the <literal>ISession</literal> is also the
                (mandatory) first-level cache and contains all loaded objects, we can probably
                use this strategy only for a few request/response cycles. This is indeed
                recommended, as the <literal>ISession</literal> will soon also have stale data.
            </para>

        </sect2>

        <sect2 id="transactions-optimistic-detached">
            <title>Many sessions with automatic versioning</title>

            <para>
                Each interaction with the persistent store occurs in a new <literal>ISession</literal>. 
                However, the same persistent instances are reused for each interaction with the database.
                The application manipulates the state of detached instances originally loaded in another
                <literal>ISession</literal> and then "re-associates" them using 
                <literal>ISession.Update()</literal> or <literal>ISession.SaveOrUpdate()</literal>.
            </para>

            <programlisting><![CDATA[// foo is an instance loaded by a previous Session
foo.Property = "bar";
using (var session = factory.OpenSession())
using (var transaction = session.BeginTransaction())
{
    session.SaveOrUpdate(foo);
    session.Flush();
    transaction.Commit();
}]]></programlisting>

            <para>
                You may also call <literal>Lock()</literal> instead of <literal>Update()</literal>
                and use <literal>LockMode.Read</literal> (performing a version check, bypassing all
                caches) if you are sure that the object has not been modified.
            </para>

        </sect2>

        <sect2 id="transactions-optimistic-customizing">
            <title>Customizing automatic versioning</title>

            <para>
                You may disable NHibernate's automatic version increment for particular properties and 
                collections by setting the <literal>optimistic-lock</literal> mapping attribute to 
                <literal>false</literal>. NHibernate will then no longer increment versions if the 
                property is dirty.
            </para>

            <para>
                Legacy database schemas are often static and can't be modified. Or, other applications
                might also access the same database and don't know how to handle version numbers or
                even timestamps. In both cases, versioning can't rely on a particular column in a table.
                To force a version check without a version or timestamp property mapping, with a
                comparison of the state of all fields in a row, turn on <literal>optimistic-lock="all"</literal>
                in the <literal>&lt;class&gt;</literal> mapping. Note that this conceptually only works
                if NHibernate can compare the old and new state, i.e. if you use a single long
                <literal>ISession</literal> and not session-per-request-with-detached-objects.
            </para>

            <para>
                Sometimes concurrent modification can be permitted as long as the changes that have been
                made don't overlap. If you set <literal>optimistic-lock="dirty"</literal> when mapping the
                <literal>&lt;class&gt;</literal>, NHibernate will only compare dirty fields during flush.
            </para>

            <para>
                In both cases, with dedicated version/timestamp columns or with full/dirty field
                comparison, NHibernate uses a single <literal>UPDATE</literal> statement (with an
                appropriate <literal>WHERE</literal> clause) per entity to execute the version check
                and update the information. If you use transitive persistence to cascade reattachment
                to associated entities, NHibernate might execute unnecessary updates. This is usually
                not a problem, but <emphasis>on update</emphasis> triggers in the database might be
                executed even when no changes have been made to detached instances. You can customize
                this behavior by setting  <literal>select-before-update="true"</literal> in the
                <literal>&lt;class&gt;</literal> mapping, forcing NHibernate to <literal>SELECT</literal>
                the instance to ensure that changes did actually occur, before updating the row.
            </para>

        </sect2>


        <sect2 id="transactions-optimistic-manual">
            <title>Application version checking</title>

            <para>
                Each interaction with the database occurs in a new <literal>ISession</literal>
                that reloads all persistent instances from the database before manipulating them.
                This approach forces the application to carry out its own version checking to ensure 
                application transaction isolation. (Of course, NHibernate will still <emphasis>update</emphasis>
                version numbers for you.) This approach is the least efficient in terms of database access.
            </para>

            <programlisting><![CDATA[// foo is an instance loaded by a previous Session
using (var session = factory.OpenSession())
using (var transaction = session.BeginTransaction())
{
    int oldVersion = foo.Version;
    session.Load( foo, foo.Key );
    if ( oldVersion != foo.Version ) throw new StaleObjectStateException();
    foo.Property = "bar";
    session.Flush();
    transaction.Commit();
}]]></programlisting>

            <para>
                Of course, if you are operating in a low-data-concurrency environment and don't
                require version checking, you may use this approach and just skip the version
                check.
            </para>
        </sect2>

    </sect1>

    <sect1 id="transactions-disconnection">
        <title>Session disconnection</title>

        <para>
            The first approach described above is to maintain a single <literal>ISession</literal> 
            for a whole business process that spans user think time. (For example, a servlet might 
            keep an <literal>ISession</literal> in the user's <literal>HttpSession</literal>.) For 
            performance reasons you should
        </para>

        <orderedlist spacing="compact">
            <listitem>
                <para>
                    commit the <literal>ITransaction</literal> and then
                </para>
            </listitem>
            <listitem>
                <para>
                    disconnect the <literal>ISession</literal> from the ADO.NET connection
                </para>
            </listitem>
        </orderedlist>

        <para>
            before waiting for user activity. The method <literal>ISession.Disconnect()</literal> 
            will disconnect the session from the ADO.NET connection and return the connection to 
            the pool (unless you provided the connection).
        </para>

        <para>
            <literal>ISession.Reconnect()</literal> obtains a new connection (or you may supply one) 
            and restarts the session. After reconnection, to force a version check on data you aren't 
            updating, you may call <literal>ISession.Lock()</literal> on any objects that might have
            been updated by another transaction. You don't need to lock any data that you
            <emphasis>are</emphasis> updating.
        </para>

        <para>
            Here is an example:
        </para>

        <programlisting><![CDATA[ISessionFactory sessions;
IList<Foo> fooList;
Bar bar;
....
ISession s = sessions.OpenSession();
ITransaction tx = null;

try
{
    tx = s.BeginTransaction())

    fooList = s
        .CreateQuery(
            "select foo from Eg.Foo foo where foo.Date = current date"
            // uses db2 date function
        ).List<Foo>();

    bar = new Bar();
    s.Save(bar);

    tx.Commit();
}
catch (Exception)
{
    if (tx != null) tx.Rollback();
    s.Close();
    throw;
}
s.Disconnect();]]></programlisting>

        <para>
            Later on:
        </para>

        <programlisting><![CDATA[s.Reconnect();

try
{
    tx = s.BeginTransaction();

    bar.FooTable = new HashMap();
    foreach (Foo foo in fooList)
    {
        s.Lock(foo, LockMode.Read);    //check that foo isn't stale
        bar.FooTable.Put( foo.Name, foo );
    }

    tx.Commit();
}
catch (Exception)
{
    if (tx != null) tx.Rollback();
    throw;
}
finally
{
    s.Close();
}]]></programlisting>

        <para>
            You can see from this how the relationship between <literal>ITransaction</literal>s and
            <literal>ISession</literal>s is many-to-one, An <literal>ISession</literal> represents a 
            conversation between the application and the database. The
            <literal>ITransaction</literal> breaks that conversation up into atomic units of work
            at the database level.
        </para>
    </sect1>

    <sect1 id="transactions-locking">
        <title>Pessimistic Locking</title>

        <para>
            It is not intended that users spend much time worrying about locking strategies. It's usually
            enough to specify an isolation level for the ADO.NET connections and then simply let the
            database do all the work. However, advanced users may sometimes wish to obtain
            exclusive pessimistic locks, or re-obtain locks at the start of a new transaction.
        </para>

        <para>
            NHibernate will always use the locking mechanism of the database, never lock objects
            in memory!
        </para>
        
        <para>
            The <literal>LockMode</literal> class defines the different lock levels that may be acquired
            by NHibernate. A lock is obtained by the following mechanisms:
        </para>
        
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    <literal>LockMode.Write</literal> is acquired automatically when NHibernate updates or inserts 
                    a row. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>LockMode.Upgrade</literal> may be acquired upon explicit user request using 
                    <literal>SELECT ... FOR UPDATE</literal> on databases which support that syntax.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>LockMode.UpgradeNoWait</literal> may be acquired upon explicit user request using a 
                    <literal>SELECT ... FOR UPDATE NOWAIT</literal> under Oracle.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>LockMode.Read</literal> is acquired automatically when NHibernate reads data
                    under Repeatable Read or Serializable isolation level. May be re-acquired by explicit user 
                    request.
                </para>
            </listitem>
        <listitem>
        <para>
            <literal>LockMode.None</literal> represents the absence of a lock. All objects switch to this
            lock mode at the end of an <literal>ITransaction</literal>. Objects associated with the session 
            via a call to <literal>Update()</literal> or <literal>SaveOrUpdate()</literal> also start out 
            in this lock mode.
        </para>
        </listitem>
        </itemizedlist>
        
        <para>
            The "explicit user request" is expressed in one of the following ways:
        </para>
        
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    A call to <literal>ISession.Load()</literal>, specifying a <literal>LockMode</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    A call to <literal>ISession.Lock()</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    A call to <literal>IQuery.SetLockMode()</literal>.
                </para>
            </listitem>
        </itemizedlist>
        
        <para>
            If <literal>ISession.Load()</literal> is called with <literal>Upgrade</literal> or
            <literal>UpgradeNoWait</literal>, and the requested object was not yet loaded by
            the session, the object is loaded using <literal>SELECT ... FOR UPDATE</literal>.
            If <literal>Load()</literal> is called for an object that is already loaded with
            a less restrictive lock than the one requested, NHibernate calls 
            <literal>Lock()</literal> for that object.
        </para>
        
        <para>
            <literal>ISession.Lock()</literal> performs a version number check if the specified lock
            mode is <literal>Read</literal>, <literal>Upgrade</literal> or 
            <literal>UpgradeNoWait</literal>. (In the case of <literal>Upgrade</literal> or
            <literal>UpgradeNoWait</literal>, <literal>SELECT ... FOR UPDATE</literal> is used.)
        </para>
        
        <para>
            If the database does not support the requested lock mode, NHibernate will use an appropriate
            alternate mode (instead of throwing an exception). This ensures that applications will
            be portable.
        </para>
        
    </sect1>

    <sect1 id="transactions-connection-release">
        <title>Connection Release Modes</title>

        <para>
            The legacy (1.0.x) behavior of NHibernate in regards to ADO.NET connection management
            was that a <literal>ISession</literal> would obtain a connection when it was first
            needed and then hold unto that connection until the session was closed.
            NHibernate introduced the notion of connection release modes to tell a session
            how to handle its ADO.NET connections.  Note that the following discussion is pertinent
            only to connections provided through a configured <literal>IConnectionProvider</literal>;
            user-supplied connections are outside the breadth of this discussion.  The different
            release modes are identified by the enumerated values of
            <literal>NHibernate.ConnectionReleaseMode</literal>:
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    <literal>OnClose</literal> - is essentially the legacy behavior described above. The
                    NHibernate session obtains a connection when it first needs to perform some database
                    access and holds unto that connection until the session is closed.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>AfterTransaction</literal> - says to release connections after a
                    <literal>NHibernate.ITransaction</literal> has completed.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The configuration parameter <literal>connection.release_mode</literal> is used
            to specify which release mode to use.  The possible values:
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    <literal>auto</literal> (the default) - equivalent to <literal>after_transaction</literal>
                    in the current release. It is rarely a good idea to change this default behavior as failures
                    due to the value of this setting tend to indicate bugs and/or invalid assumptions in user code.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>on_close</literal> - says to use <literal>ConnectionReleaseMode.OnClose</literal>.
                    This setting is left for backwards compatibility, but its use is highly discouraged.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>after_transaction</literal> - says to use <literal>ConnectionReleaseMode.AfterTransaction</literal>.
                    Note that with <literal>ConnectionReleaseMode.AfterTransaction</literal>, if a session is considered to be in
                    auto-commit mode (i.e. no transaction was started) connections will be released after every operation.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            If your application manages transactions through .NET APIs such as <literal>System.Transactions</literal> library
            while not using a compatible transaction factory (see <literal>transaction.factory_class</literal>
            in <xref linkend="configuration-optional"/>), <literal>ConnectionReleaseMode.AfterTransaction</literal> may cause
            NHibernate to open and close several connections during one transaction, leading to unnecessary overhead and
            transaction promotion from local to distributed. Specifying <literal>ConnectionReleaseMode.OnClose</literal>
            will revert to the legacy behavior and prevent this problem from occurring.
        </para>

    </sect1>

    <sect1 id="transactions-scopes">
        <title>Transaction scopes (System.Transactions)</title>

        <para>
            Instead of using NHibernate <literal>ITransaction</literal>, <literal>TransactionScope</literal>
            can be used. Please do not use both simultaneously. Using <literal>TransactionScope</literal>
            requires using a compatible transaction factory (see <literal>transaction.factory_class</literal>
            in <xref linkend="configuration-optional"/>). The default transaction factory supports scopes.
        </para>

        <para>
            When using <literal>TransactionScope</literal> with NHibernate, you need to be aware of following
            points:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    The session will enlist with the first scope in which the session is used (or opened).
                    As of NHibernate v5.0, it will enlist its connection in the transaction regardless of
                    connection string <literal>Enlist</literal> setting. Prior to v5.0, it was relying on
                    that setting being considered <literal>true</literal>, and on acquiring the connection
                    within the scope.
                </para>
                <para>
                    Sub-scopes are not supported. The session will be enlisted in the first scope within
                    which it was used, until this scope is committed or rollback. If auto-enlistment is
                    enabled on the connection and the session used on others scopes than the one in which
                    it is currently enlisted, the connection may enlist in another scope, and the session
                    will then fail to use it.
                </para>
                <para>
                    As of NHibernate v5.0, session auto-enlistment can be disabled from the session builder
                    obtained with <literal>ISessionFactory.WithOptions()</literal>, using the
                    <literal>AutoJoinTransaction</literal> option. The connection may still enlist itself
                    if connection string <literal>Enlist</literal> setting is not <literal>false</literal>.
                    A session can explicitly join the current system transaction by calling
                    <literal>ISession.JoinTransaction()</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    As of NHibernate v5.0, <literal>FlushMode.Commit</literal> requires the configuration setting
                    <literal>transaction.use_connection_on_system_prepare</literal> to be true for flushing
                    from transaction scope commit. Otherwise, it will be your responsibility to flush the session
                    before completing the scope.
                </para>
                <para>
                    Using <literal>transaction.use_connection_on_system_prepare</literal> can cause undesired
                    transaction promotions to distributed: it requires using a dedicated connection for flushing,
                    and it delays session disposal (if done inside the scope) to the scope disposal. If you want
                    to avoid this, set this setting to <literal>false</literal> and manually flush your sessions.
                </para>
                <para>
                    For new applications, it is recommended to set
                    <literal>transaction.use_connection_on_system_prepare</literal> to <literal>false</literal>,
                    and to flush explicitly your sessions before scope completion. For old applications, consider
                    checking how sessions are flushed, and if possible switch it to <literal>false</literal> too.
                </para>
            </listitem>
            <listitem>
                <para>
                    As of NHibernate v5.0, <literal>ConnectionReleaseMode.AfterTransaction</literal> has no more
                    by default an "immediate" effect with transaction scopes. Previously, it was releasing the
                    connection from transaction completion events. But this is not officially supported by
                    Microsoft and this can cause issues especially with distributed transactions.
                </para>
                <para>
                    Since v5.0, by default, the connection will be actually released after the scope disposal at the
                    first session usage involving a connection, or at the session closing, whichever come first.
                    Alternatively, you may <literal>Disconnect()</literal> the session. (Requires
                    <literal>Reconnect()</literal> before re-using the session.)
                </para>
                <para>
                    When using <literal>transaction.use_connection_on_system_prepare</literal>, if the session is
                    disposed within the scope, the connection releasing will still occurs from transaction
                    completion event.
                </para>
            </listitem>
            <listitem>
                <para>
                    As of NHibernate v5.0, using transaction scope and trying to use the session connection within
                    <literal>AfterTransactionCompletion</literal> is forbidden and will raise an exception.
                    If the setting <literal>transaction.use_connection_on_system_prepare</literal>
                    is <literal>false</literal>, it will forbid any connection usage from
                    <literal>BeforeTransactionCompletion</literal> event too, when this event is triggered by
                    a transaction scope commit or rollback.
                </para>
            </listitem>
        </itemizedlist>

    </sect1>

</chapter>

