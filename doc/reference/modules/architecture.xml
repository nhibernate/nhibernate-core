<chapter id="architecture">

    <title>Architecture</title>

    <sect1 id="architecture-overview">
        <title>Overview</title>
        
        <para>
            A (very) high-level view of the NHibernate architecture:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/overview.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/overview.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="chm">
                <imagedata fileref="shared/images/overview.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            This diagram shows NHibernate using the database and configuration data to
            provide persistence services (and persistent objects) to the application.
        </para>

        <para>
            We would like to show a more detailed view of the runtime architecture.
            Unfortunately, NHibernate is flexible and supports several approaches. We will
            show the two extremes. The "lite" architecture has the application
            provide its own ADO.NET connections and manage its own transactions. This approach
            uses a minimal subset of NHibernate's APIs:
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/lite.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/lite.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="chm">
                <imagedata fileref="shared/images/lite.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            The "full cream" architecture abstracts the application away from the
            underlying ADO.NET APIs and lets NHibernate take care of the details.
        </para>

        <mediaobject>
            <imageobject role="fo">
                <imagedata fileref="images/fullcream.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="html">
                <imagedata fileref="../shared/images/fullcream.png" format="PNG" align="center"/>
            </imageobject>
            <imageobject role="chm">
                <imagedata fileref="shared/images/fullcream.png" format="PNG" align="center"/>
            </imageobject>
        </mediaobject>

        <para>
            Heres some definitions of the objects in the diagrams:

            <variablelist spacing="compact">
                <varlistentry>
                    <term>ISessionFactory (<literal>NHibernate.ISessionFactory</literal>)</term>
                    <listitem>
                        <para>
                            A threadsafe (immutable) cache of compiled mappings for a single database.
                            A factory for <literal>ISession</literal> and a client of
                            <literal>IConnectionProvider</literal>. Might hold an optional (second-level)
                            cache of data that is reusable between transactions, at a
                            process- or cluster-level.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ISession (<literal>NHibernate.ISession</literal>)</term>
                    <listitem>
                        <para>
                            A single-threaded, short-lived object representing a conversation between
                            the application and the persistent store. Wraps an ADO.NET connection. Factory
                            for <literal>ITransaction</literal>. Holds a mandatory (first-level) cache
                            of persistent objects, used when navigating the object graph or looking up
                            objects by identifier.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Persistent Objects and Collections</term>
                    <listitem>
                        <para>
                            Short-lived, single threaded objects containing persistent state and business
                            function. These might be ordinary POCOs, the only special thing about
                            them is that they are currently associated with (exactly one)
                            <literal>ISession</literal>. As soon as the <literal>Session</literal> is closed,
                            they will be detached and free to use in any application layer (e.g. directly
                            as data transfer objects to and from presentation).
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Transient Objects and Collections</term>
                    <listitem>
                        <para>
                            Instances of persistent classes that are not currently associated with a
                            <literal>ISession</literal>. They may have been instantiated by
                            the application and not (yet) persisted or they may have been instantiated by a
                            closed <literal>ISession</literal>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ITransaction (<literal>NHibernate.ITransaction</literal>)</term>
                    <listitem>
                        <para>
                            (Optional) A single-threaded, short-lived object used by the application to
                            specify atomic units of work. Abstracts application from underlying ADO.NET
                            transaction. An <literal>ISession</literal> might span several
                            <literal>ITransaction</literal>s in some cases.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>IConnectionProvider (<literal>NHibernate.Connection.IConnectionProvider</literal>)</term>
                    <listitem>
                        <para>
                            (Optional) A factory for ADO.NET connections and commands. Abstracts application
                            from the concrete vendor-specific implementations of <literal>IDbConnection</literal>
                            and <literal>IDbCommand</literal>. Not exposed to application, but can be
                            extended/implemented by the developer.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>IDriver (<literal>NHibernate.Driver.IDriver</literal>)</term>
                    <listitem>
                        <para>
                            (Optional) An interface encapsulating differences between ADO.NET providers, such
                            as parameter naming conventions and supported ADO.NET features.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ITransactionFactory (<literal>NHibernate.Transaction.ITransactionFactory</literal>)</term>
                    <listitem>
                        <para>
                            (Optional) A factory for <literal>ITransaction</literal> instances. Not exposed to the
                            application, but can be extended/implemented by the developer.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>

        <para>
            Given a "lite" architecture, the application bypasses the
            <literal>ITransaction</literal>/<literal>ITransactionFactory</literal> and/or
            <literal>IConnectionProvider</literal> APIs to talk to ADO.NET directly.
        </para>
    </sect1>

    <sect1 id="architecture-states">
        <title>Instance states</title>
        <para>
            An instance of a persistent classes may be in one of three different states,
            which are defined with respect to a <emphasis>persistence context</emphasis>.
            The NHibernate <literal>ISession</literal> object is the persistence context:
        </para>
        
       <variablelist spacing="compact">
            <varlistentry>
                <term>transient</term>
                <listitem>
                    <para>
                        The instance is not, and has never been associated with
                        any persistence context. It has no persistent identity
                        (primary key value).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>persistent</term>
                <listitem>
                    <para>
                        The instance is currently associated with a persistence 
                        context. It has a persistent identity (primary key value)
                        and, perhaps, a corresponding row in the database. For a
                        particular persistence context, NHibernate 
                        <emphasis>guarantees</emphasis> that persistent identity
                        is equivalent to CLR identity (in-memory location of the
                        object).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>detached</term>
                <listitem>
                    <para>
                        The instance was once associated with a persistence
                        context, but that context was closed, or the instance
                        was serialized to another process. It has a persistent 
                        identity and, perhaps, a corresponding row in the database.
                        For detached instances, NHibernate makes no guarantees 
                        about the relationship between persistent identity and
                        CLR identity.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect1>    

    <sect1 id="architecture-current-session">
        <title>Contextual Sessions</title>
        <para>
            Most applications using NHibernate need some form of "contextual" sessions, where a given
            session is in effect throughout the scope of a given context. However, across applications
            the definition of what constitutes a context is typically different; and different contexts
            define different scopes to the notion of current.
        </para>
        <para>
            Starting with version 1.2, NHibernate added the <literal>ISessionFactory.GetCurrentSession()</literal>
            method. The processing behind <literal>ISessionFactory.GetCurrentSession()</literal> is pluggable.
            An extension interface (<literal>NHibernate.Context.ICurrentSessionContext</literal>) and a new
            configuration parameter (<literal>hibernate.current_session_context_class</literal>) have been added
            to allow pluggability of the scope and context of defining current sessions.
        </para>
        <para>
            See the API documentation for the <literal>NHibernate.Context.ICurrentSessionContext</literal>
            interface for a detailed discussion of its contract.  It defines a single method,
            <literal>CurrentSession()</literal>, by which the implementation is responsible for
            tracking the current contextual session.  Out-of-the-box, NHibernate comes with several
            implementations of this interface:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <literal>NHibernate.Context.AsyncLocalSessionContext</literal> - current sessions are tracked
                    by current asynchronous flow. You are responsible to bind and unbind an
                    <literal>ISession</literal> instance with static methods of class
                    <literal>CurrentSessionContext</literal>. Binding operations from inner flows will not be
                    propagated to outer or siblings flows.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>NHibernate.Context.CallSessionContext</literal> - current sessions are tracked
                    by <literal>CallContext</literal>. You are responsible to bind and unbind an
                    <literal>ISession</literal> instance with static methods of class
                    <literal>CurrentSessionContext</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>NHibernate.Context.ThreadStaticSessionContext</literal> - current session is
                    stored in a thread-static variable. This context supports multiple session factory only
                    since NHibernate v5.
                    You are responsible to bind and unbind an <literal>ISession</literal> instance with
                    static methods of class <literal>CurrentSessionContext</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>NHibernate.Context.WebSessionContext</literal> -
                    stores the current session in <literal>HttpContext</literal>.
                    You are responsible to bind and unbind an <literal>ISession</literal>
                    instance with static methods of class <literal>CurrentSessionContext</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>NHibernate.Context.WcfOperationSessionContext</literal> - current sessions are tracked
                    by WCF <literal>OperationContext</literal>. You need to register the <literal>WcfStateExtension</literal>
                    extension in WCF. You are responsible to bind and unbind an <literal>ISession</literal>
                    instance with static methods of class <literal>CurrentSessionContext</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>NHibernate.Context.ManagedWebSessionContext</literal> - current
                    sessions are tracked by <literal>HttpContext</literal>. Removed in NHibernate 4.0
                    - <literal>NHibernate.Context.WebSessionContext</literal> should be used instead.
                    You are responsible to bind and unbind an <literal>ISession</literal> instance with static methods
                    on this class, it never opens, flushes, or closes an <literal>ISession</literal> itself.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The <literal>hibernate.current_session_context_class</literal> configuration parameter
            defines which <literal>NHibernate.Context.ICurrentSessionContext</literal> implementation
            should be used. Typically, the value of this parameter would just name the implementation
            class to use (including the assembly name); for the out-of-the-box implementations, however,
            there are corresponding short names: <literal>async_local</literal>, <literal>call</literal>,
            <literal>thread_static</literal>, <literal>web</literal> and <literal>wcf_operation</literal>,
            respectively.
        </para>
    </sect1>
    
</chapter>
