<chapter id="filters">
    <title>Filtering data</title>
    
    <para>
        NHibernate provides an innovative new approach to handling data with "visibility" rules.
        A <emphasis>NHibernate filter</emphasis> is a global, named, parameterized filter that may be 
        enabled or disabled for a particular NHibernate session.
    </para>

    <sect1 id="objectstate-filters">
        <title>NHibernate filters</title>

        <para>
            NHibernate adds the ability to pre-define filter criteria and attach those filters at both
            a class and a collection level. A filter criteria is the ability to define a restriction clause
            very similar to the existing "where" attribute available on the class and various collection
            elements. Except these filter conditions can be parameterized. The application can then make
            the decision at runtime whether given filters should be enabled and what their parameter
            values should be. Filters can be used like database views, but parameterized inside the
            application.
        </para>

        <para>
            In order to use filters, they must first be defined and then attached to the appropriate
            mapping elements. To define a filter, use the <literal>&lt;filter-def/&gt;</literal> element
            within a <literal>&lt;hibernate-mapping/&gt;</literal> element:
        </para>

        <programlisting><![CDATA[<filter-def name="myFilter">
    <filter-param name="myFilterParam" type="String"/>
</filter-def>]]></programlisting>

        <para>
            Then, this filter can be attached to a class:
        </para>

        <programlisting><![CDATA[<class name="MyClass" ...>
    ...
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</class>]]></programlisting>

        <para>
            or, to a collection:
        </para>

        <programlisting><![CDATA[<set ...>
    <filter name="myFilter" condition=":myFilterParam = MY_FILTERED_COLUMN"/>
</set>]]></programlisting>

        <para>
            or, even to both (or multiples of each) at the same time.
        </para>

        <para>
            The methods on <literal>ISession</literal> are: <literal>EnableFilter(string filterName)</literal>,
            <literal>GetEnabledFilter(string filterName)</literal>, and <literal>DisableFilter(string filterName)</literal>.
            By default, filters are <emphasis>not</emphasis> enabled for a given session; they must be explicitly
            enabled through use of the <literal>ISession.EnableFilter()</literal> method, which returns an
            instance of the <literal>IFilter</literal> interface. Using the simple filter defined above, this
            would look like:
        </para>

        <programlisting><![CDATA[session.EnableFilter("myFilter").SetParameter("myFilterParam", "some-value");]]></programlisting>

        <para>
            Note that methods on the <literal>NHibernate.IFilter</literal> interface do allow the method-chaining
            common to much of NHibernate.
        </para>

        <para>
            A full example, using temporal data with an effective record date pattern:
        </para>

        <programlisting><![CDATA[<class name="Employee" ...>
...
    <many-to-one name="Department" column="dept_id" class="Department"/>
    <property name="EffectiveStartDate" type="date" column="eff_start_dt"/>
    <property name="EffectiveEndDate" type="date" column="eff_end_dt"/>
...
    <!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake
    -->
    <filter name="effectiveDate"
            condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
</class>

<class name="Department" ...>
...
    <set name="Employees" lazy="true">
        <key column="dept_id"/>
        <one-to-many class="Employee"/>
        <filter name="effectiveDate"
                condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
    </set>
</class>

<filter-def name="effectiveDate">
    <filter-param name="asOfDate" type="date"/>
</filter-def>]]></programlisting>

        <para>
            Then, in order to ensure that you always get back currently effective records, simply
            enable the filter on the session prior to retrieving employee data:
        </para>

<programlisting><![CDATA[ISession session = ...;
session.EnableFilter("effectiveDate").SetParameter("asOfDate", DateTime.Today);
var results = session.CreateQuery("from Employee as e where e.Salary > :targetSalary")
         .SetInt64("targetSalary", 1000000L)
         .List<Employee>();
]]></programlisting>

        <para>
            In the HQL above, even though we only explicitly mentioned a salary constraint on the results,
            because of the enabled filter the query will return only currently active employees who have
            a salary greater than a million dollars.
        </para>

        <para>
            Note: if you plan on using filters with outer joining (either through HQL or load fetching) be
            careful of the direction of the condition expression.  It's safest to set this up for left
            outer joining; in general, place the parameter first followed by the column name(s) after
            the operator.
        </para>

        <para>
            Default all filter definitions are applied to <literal>&lt;many-to-one/&gt;</literal> and 
            <literal>&lt;one-to-one/&gt;</literal> elements. You can turn off this behaviour by
            using <literal>use-many-to-one</literal> attribute on <literal>&lt;filter-def/&gt;</literal>
            element.
        </para>
      <programlisting><![CDATA[<filter-def name="effectiveDate" use-many-to-one="false"/>]]></programlisting>

    </sect1>

</chapter>

