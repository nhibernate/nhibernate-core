<!-- <!DOCTYPE chapter SYSTEM "../docbook-xml/docbookx.dtd"> -->
<chapter id="caches">
	<title>NHibernate.Caches</title>


	<abstract id="NHibernate.Caches-abstract">
		<title>What is NHibernate.Caches?</title>
		<formalpara>
			<title>NHibernate.Caches namespace contains several second-level cache providers for NHibernate.</title>
			
			<para>
				A cache is a place where entities are kept after being loaded from the database; once cached, they can be
				retrieved without going to the database. This means that they are faster to (re)load.
			</para>
		
		</formalpara>
		
		<para>
			An NHibernate session has an internal (first-level) cache where it keeps its entities. There is no sharing
			between these caches - a first-level cache belongs to a given session and is destroyed with it. NHibernate
			provides a <emphasis>second-level cache</emphasis> system; it works at the session factory level.
			A second-level cache is shared by all sessions created by the same session factory.
		</para>

		<para>
			An important point is that the second-level cache <emphasis>does not</emphasis> cache instances of the object
			type being cached; instead it caches the individual values of the properties of that object. This provides two
			benefits. One, NHibernate doesn't have to worry that your client code will manipulate the objects in a way that
			will disrupt the cache. Two, the relationships and associations do not become stale, and are easy to keep
			up-to-date because they are simply identifiers. The cache is not a tree of objects but rather a map of arrays.
		</para>

		<para>
			With the <emphasis>session-per-request</emphasis> model, a high number of sessions can concurrently access
			the same entity without hitting the database each time; hence the performance gain.
		</para>

		<para>
			Depending on the chosen cache provider, the second level cache may be actually shared between different session
			factories. If you need to avoid this for some session factories, configure each of them with a different
			<literal>cache.region_prefix</literal>. See <xref linkend="configuration-optional" />.
		</para>

		<para>
			Several cache providers have been contributed by NHibernate users:
			<variablelist>
				<varlistentry>
					<term><classname>NHibernate.Caches.Prevalence</classname></term>
					<listitem>
						<para>
							Uses <classname>Bamboo.Prevalence</classname> as the cache provider. Open the
							file <filename>Bamboo.Prevalence.license.txt</filename> for more information about its license;
							you can also visit its <ulink url="http://bbooprevalence.sourceforge.net/">website</ulink>. This
							provider is available for the .Net Framework only. Also see <xref linkend="NHibernate.Caches.Prevalence" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.SysCache</classname></term>
					<listitem>
						<para>
							Uses <classname>System.Web.Caching.Cache</classname> as the cache provider. This means that you can
							rely on ASP.NET caching feature to understand how it works. For more information, read (on the MSDN):
							<ulink url="https://msdn.microsoft.com/en-us/library/6hbbsfk6.aspx">Caching Application Data</ulink>.
							This provider is available for the .Net Framework only. Also see <xref linkend="NHibernate.Caches.SysCache" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.SysCache2</classname></term>
					<listitem>
						<para>
							Similar to <classname>NHibernate.Caches.SysCache</classname>, uses ASP.NET cache. This provider also supports
							SQL dependency-based expiration, meaning that it is possible to configure certain cache regions to automatically
							expire when the relevant data in the database changes.
						</para>
						<para>
							SysCache2 requires Microsoft SQL Server 2000 or higher. This provider is available for the .Net Framework only.
						</para>
						<para>
							See <xref linkend="NHibernate.Caches.SysCache2" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.EnyimMemcached</classname></term>
					<listitem>
						<para>
							Uses <literal>Memcached</literal>. See <ulink url="https://memcached.org/">memcached homepage</ulink>
							for more information on Memcached. This provider is available for the .Net Framework only. Also see
							<xref linkend="NHibernate.Caches.EnyimMemcached" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NCache provider for NHibernate</classname></term>
					<listitem>
						<para>
							Uses <literal>NCache</literal>. NCache is a commercial distributed caching system with a provider for NHibernate. 
							The NCache Express version is free for use, see 
							<ulink url="http://www.alachisoft.com/ncache/">NCache Express homepage</ulink>
							for more information.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.RtMemoryCache</classname></term>
					<listitem>
						<para>
							Uses <classname>System.Runtime.Caching.MemoryCache.Default</classname> as the cache provider. This provider
							is available for the .Net Framework only. See <xref linkend="NHibernate.Caches.RtMemoryCache" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.CoreMemoryCache</classname></term>
					<listitem>
						<para>
							Uses <classname>Microsoft.Extensions.Caching.Memory.MemoryCache</classname> as the cache provider. This provider
							is available as a .Net Standard NuGet package. See <xref linkend="NHibernate.Caches.CoreMemoryCache" />.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><classname>NHibernate.Caches.CoreDistributedCache</classname></term>
					<listitem>
						<para>
							Uses <classname>Microsoft.Extensions.Caching.Abstractions.IDistributedCache</classname> implementations as the cache
							provider. The implementation has to be provided through an <literal>IDistributedCacheFactory</literal>.
							Distributed cache factories for <literal>Memcached</literal>, <literal>Redis</literal>, <literal>SqlServer</literal>
							and <literal>Memory</literal> caches are available through their own package, prefixed by
							<literal>NHibernate.Caches.CoreDistributedCache.</literal>.
						</para>
						<para>
							This provider is available as a .Net Standard NuGet package. See <xref linkend="NHibernate.Caches.CoreDistributedCache" />.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>
	</abstract>

	<section id="NHibernate.Caches-howto">
		<title>How to use a cache?</title>
		<para>
			Here are the steps to follow to enable the second-level cache in NHibernate:

			<itemizedlist>
				<listitem>
					<para>
						Choose the cache provider you want to use and copy its assembly in your assemblies directory.
						(For example, <filename>NHibernate.Caches.Prevalence.dll</filename> or
						<filename>NHibernate.Caches.SysCache.dll</filename>.)
					</para>
				</listitem>
				<listitem>
					<para>
						To tell NHibernate which cache provider to use, add in your NHibernate configuration file
						(can be <filename>YourAssembly.exe.config</filename> or <filename>web.config</filename> or a
						<filename>.cfg.xml</filename> file):
						<programlisting>
&lt;property name="cache.provider_class"&gt;<literal>XXX</literal>&lt;/property&gt;<co id="hibernate.cache.provider_class-co" linkends="hibernate.cache.provider_class"/>
&lt;property name="cache.default_expiration"&gt;<literal>120</literal>&lt;/property&gt;<co id="nhcaches-expiration-co" linkends="nhcaches-expiration"/>
&lt;property name="cache.use_sliding_expiration"&gt;<literal>true</literal>&lt;/property&gt;<co id="nhcaches-sliding-co" linkends="nhcaches-sliding"/>
						</programlisting>
						<calloutlist>
							<callout arearefs="hibernate.cache.provider_class-co" id="hibernate.cache.provider_class">
								<para>
									"<literal>XXX</literal>" is the assembly-qualified class name of a class
									implementing <classname>ICacheProvider</classname>, eg.
									"<classname>NHibernate.Caches.SysCache.SysCacheProvider,
									NHibernate.Caches.SysCache</classname>".
								</para>
							</callout>
							<callout arearefs="nhcaches-expiration-co" id="nhcaches-expiration">
								<para>
									The <literal>expiration</literal> value is the number of seconds you wish
									to cache each entry (here two minutes). Not all providers support this setting, it may
									be ignored. Check their respective documentation.
								</para>
							</callout>
							<callout arearefs="nhcaches-sliding-co" id="nhcaches-sliding">
								<para>
									The <literal>use_sliding_expiration</literal> value is whether you wish to use a
									sliding expiration or not. Defaults to <literal>false</literal>.
									Not all providers support this setting, it may be ignored. Check their respective documentation.
								</para>
							</callout>
						</calloutlist>
					</para>
				</listitem>
				<listitem>
					<para>
						Add <literal>&lt;cache usage="read-write|nonstrict-read-write|read-only"/&gt;</literal> (just
						after <literal>&lt;class&gt;</literal>) in the mapping of the entities you want to cache. It
						also works for collections (bag, list, map, set, ...).
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<formalpara>
			<title>Be careful</title>
			<para>
				<itemizedlist>
					<listitem>
						<para>
							Most caches are never aware of changes made to the persistent store by another process (though they may be
							configured to regularly expire cached data). As the caches are created at the session factory level,
							they are destroyed with the SessionFactory instance; so you must keep them alive as long as you need
							them.
						</para>
					</listitem>
					<listitem>
						<para>
							The second level cache requires the use of transactions, be it through transaction scopes or NHibernate
							transactions. Interacting with the data store without an explicit transaction is discouraged, and will
							not allow the second level cache to work as intended.
						</para>
					</listitem>
					<listitem>
						<para>
							To avoid issues with composite ids and some cache providers, <literal>ToString()</literal> needs to
							be overridden on composite id classes. It should yield an unique string representing the id. If the
							composite id is mapped as a component, overriding the component <literal>ToString()</literal>
							is enough. See <xref linkend="components-compositeid" />.
						</para>
					</listitem>
				</itemizedlist>
			</para>
		</formalpara>
		<para>
			See also <xref linkend="performance-cache" />.
		</para>
	</section>

	<section id="NHibernate.Caches.Prevalence">
		<title>Prevalence Cache Configuration</title>
		<para>
			There is only one configurable parameter: <literal>prevalenceBase</literal>. This is the directory on the
			file system where the Prevalence engine will save data. It can be relative to the current directory or a
			full path. If the directory doesn't exist, it will be created.
		</para>
		<para>
			The <literal>prevalenceBase</literal> setting can only be set programmatically through on the NHibernate
			configuration object, by example with <literal>Configuration.SetProperty</literal>.
		</para>
	</section>

	<section id="NHibernate.Caches.SysCache">
		<title>SysCache Configuration</title>
		<para>
			SysCache relies on <classname>System.Web.Caching.Cache</classname> for the underlying implementation.
			The following NHibernate configuration settings are available:
		</para>

		<variablelist>
			<varlistentry>
				<term><literal>cache.default_expiration</literal></term>
				<listitem>
					Number of seconds to wait before expiring each item.
					Defaults to <literal>300</literal>. It can also be set programmatically on the NHibernate
					configuration object under the name <literal>expiration</literal>, which then takes precedence
					over <literal>cache.default_expiration</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>cache.use_sliding_expiration</literal></term>
				<listitem>
					Should the expiration be sliding? A sliding expiration is reinitialized at each get.
					Defaults to <literal>false</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>priority</literal></term>
				<listitem>
					A numeric cost of expiring each item, where 1 is a low cost, 5 is the highest, and 3 is normal.
					Only values 1 through 6 are valid. 6 is a special value corresponding to
					<literal>NotRemovable</literal>. This setting can only be set programmatically through on the
					NHibernate configuration object, by example with <literal>Configuration.SetProperty</literal>.
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			SysCache has a config file section handler to allow configuring different expirations and priorities for
			different regions. Here is an example:
		</para>

		<example>
			<programlisting><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="syscache"
      type="NHibernate.Caches.SysCache.SysCacheSectionHandler,NHibernate.Caches.SysCache" />
  </configSections>

  <syscache>
    <cache region="foo" expiration="500" priority="4" />
    <cache region="bar" expiration="300" priority="3" sliding="true" />
  </syscache>
</configuration>]]></programlisting>
		</example>
	</section>

	<section id="NHibernate.Caches.SysCache2">
		<title>SysCache2 Configuration</title>

		<para>
			SysCache2 can use SqlCacheDependencies to invalidate cache regions when data in an underlying SQL Server
			table or query changes. Query dependencies are only available for SQL Server 2005 or higher. To use the cache
			provider, the application must be setup and configured to support SQL notifications as described in the
			MSDN documentation.
		</para>

		<para>
			The following NHibernate configuration settings are available:
		</para>

		<variablelist>
			<varlistentry>
				<term><literal>cache.default_expiration</literal></term>
				<listitem>
					Number of seconds to wait before expiring each item.
					Defaults to <literal>300</literal>. It can also be set programmatically on the NHibernate
					configuration object under the name <literal>expiration</literal>, which then takes precedence
					over <literal>cache.default_expiration</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>cache.use_sliding_expiration</literal></term>
				<listitem>
					Should the expiration be sliding? A sliding expiration is reinitialized at each get.
					Defaults to <literal>false</literal>.
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			To configure cache regions with SqlCacheDependencies a <literal>syscache2</literal> config section must be
			defined in the application's configuration file. See the sample below.
		</para>

		<example>
			<programlisting><![CDATA[
<configSections>
  <section name="syscache2"
    type="NHibernate.Caches.SysCache2.SysCacheSection, NHibernate.Caches.SysCache2"/>
</configSections>]]></programlisting>
		</example>

		<section id="NHibernate.Caches.SysCache2-Table">
			<title>Table-based Dependency</title>

			<para>
				A table-based dependency will monitor the data in a database table for changes. Table-based
				dependencies are generally used for a SQL Server 2000 database but will work with SQL Server 2005 or superior as
				well. Before you can use SQL Server cache invalidation with table based dependencies, you need to
				enable notifications for the database. This task is performed with the <command>aspnet_regsql</command>
				command. With table-based notifications, the application will poll the database for changes at a
				predefined interval. A cache region will not be invalidated immediately when data in the table changes.
				The cache will be invalidated the next time the application polls the database for changes.
			</para>
			
			<para>
				To configure the data in a cache region to be invalidated when data in an underlying table is changed,
				a cache region must be configured in the application's configuration file. See the sample below.
			</para>

			<example>
				<programlisting><![CDATA[<syscache2>
  <cacheRegion name="Product">
    <dependencies>
      <tables>
        <add name="price"
          databaseEntryName="Default"
          tableName="VideoTitle" />
      </tables>
    </dependencies>
  </cacheRegion>
</syscache2>]]></programlisting>
			</example>

		</section>

		<variablelist>
			<title>Table-based Dependency Configuration Properties</title>
			<varlistentry>
				<term><literal>name</literal></term>
				<listitem>Unique name for the dependency</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>tableName</literal></term>
				<listitem>
					The name of the database table that the dependency is associated with. The table must be enabled
					for notification support with the <literal>AspNet_SqlCacheRegisterTableStoredProcedure</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>databaseEntryName</literal></term>
				<listitem>
					The name of a database defined in the <literal>databases</literal> element for
					<literal>sqlCacheDependency</literal> for caching (ASP.NET Settings Schema) element of the
					application's <literal>Web.config</literal> file.
				</listitem>
			</varlistentry>
		</variablelist>

		<section id="NHibernate.Caches.SysCache2-Command">
			<title>Command-Based Dependencies</title>

			<para>
				A command-based dependency will use a SQL command to identify records to monitor for data changes.
				Command-based dependencies work only with SQL Server 2005.
			</para>

			<para>
				Before you can use SQL Server cache invalidation with command-based dependencies, you need to enable
				the Service Broker for query notifications. The application must also start the listener for receiving
				change notifications from SQL Server. With command based notifications, SQL Server will notify the
				application when the data of a record returned in the results of a SQL query has changed. Note that a
				change will be indicated if the data in any of the columns of a record change, not just the columns
				returned by a query. The query is a way to limit the number of records monitored for changes, not the
				columns.  As soon as data in one of the records is modified, the data in the cache region will be
				invalidated immediately.
			</para>
			
			<para>
				To configure the data in a cache region to be invalidated based on a SQL command, a cache region must
				be configured in the application's configuration file. See the samples below.
			</para>

			<example>
				<title>Stored Procedure</title>

				<programlisting><![CDATA[<cacheRegion name="Product" priority="High" >
  <dependencies>
    <commands>
      <add name="price"
        command="ActiveProductsStoredProcedure" 
        isStoredProcedure="true"/>
    </commands>
  </dependencies>
</cacheRegion>]]></programlisting>
			</example>

			<example>
				<title>SELECT Statement</title>

				<programlisting><![CDATA[<cacheRegion name="Product" priority="High">
  <dependencies>
    <commands>
      <add name="price"
        command="Select VideoTitleId from dbo.VideoTitle where Active = 1"
        connectionName="default"
        connectionStringProviderType="NHibernate.Caches.SysCache2.ConfigConnectionStringProvider, NHibernate.Caches.SysCache2"/>
    </commands>
  </dependencies>
</cacheRegion>]]></programlisting>
			</example>

			<variablelist>
				<title>Command Configuration Properties</title>
				
				<varlistentry>
					<term><literal>name</literal></term>
					<listitem>Unique name for the dependency</listitem>
				</varlistentry>
				
				<varlistentry>
					<term><literal>command</literal> (required)</term>
					<listitem>SQL command that returns results which should be monitored for data changes</listitem>
				</varlistentry>
				
				<varlistentry>
					<term><literal>isStoredProcedure</literal> (optional)</term>
					<listitem>
						Indicates if command is a stored procedure. The default is <literal>false</literal>.
					</listitem>
				</varlistentry>
				
				<varlistentry>
					<term><literal>connectionName</literal> (optional)</term>
					<listitem>
						The name of the connection in the applications configuration file to use for registering the
						cache dependency for change notifications. If no value is supplied for <literal>connectionName
						</literal> or <literal>connectionStringProviderType</literal>, the connection properties from
						the NHibernate configuration will be used.
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><literal>connectionStringProviderType</literal> (optional)</term>
					<listitem>
						<classname>IConnectionStringProvider</classname> to use for retrieving the connection string to
						use for registering the cache dependency for change notifications.  If no value is supplied for
						<literal>connectionName</literal>, the unnamed connection supplied by the provider will be
						used.
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="NHibernate.Caches.SysCache2-Aggregate">
			<title>Aggregate Dependencies</title>

			<para>
				Multiple cache dependencies can be specified.  If any of the dependencies triggers a change
				notification, the data in the cache region will be invalidated.  See the samples below.
			</para>

			<example>
				<title>Multiple commands</title>

				<programlisting><![CDATA[<cacheRegion name="Product">
  <dependencies>
    <commands>
      <add name="price"
        command="ActiveProductsStoredProcedure" 
        isStoredProcedure="true"/>
      <add name="quantity"
        command="Select quantityAvailable from dbo.VideoAvailability"/>
    </commands>
  </dependencies>
</cacheRegion>]]></programlisting>
			</example>

			<example>
				<title>Mixed</title>
				
				<programlisting><![CDATA[<cacheRegion name="Product">
  <dependencies>
    <commands>
      <add name="price"
        command="ActiveProductsStoredProcedure" 
        isStoredProcedure="true"/>
    </commands>
    <tables>
      <add name="quantity"
        databaseEntryName="Default"
        tableName=" VideoAvailability" />
    </tables>
  </dependencies>
</cacheRegion>]]></programlisting>
			</example>
		</section>

		<section id="NHibernate.Caches.SysCache2-AdditionalSettings">
			<title>Additional Settings</title>
			<para>
				In addition to data dependencies for the cache regions, time based expiration policies can be specified
				for each item added to the cache.  Time based expiration policies will not invalidate the data
				dependencies for the whole cache region, but serve as a way to remove items from the cache after they
				have been in the cache for a specified amount of time.  See the samples below.
			</para>

			<example>
				<title>Relative Expiration</title>

				<programlisting><![CDATA[<cacheRegion name="Product" relativeExpiration="300" priority="High" useSlidingExpiration="true" />]]></programlisting>
			</example>

			<example>
				<title>Time of Day Expiration</title>

				<programlisting><![CDATA[<cacheRegion name="Product" timeOfDayExpiration="2:00:00" priority="High" />]]></programlisting>
			</example>

			<variablelist>
				<title>Additional Configuration Properties</title>
				<varlistentry>
					<term><literal>relativeExpiration</literal></term>
					<listitem>
						<para>
							Number of seconds that an individual item will exist in the cache before being removed.
							Defaults to <literal>300</literal> if neither <literal>relativeExpiration</literal> nor
							<literal>timeOfDayExpiration</literal> are defined, and if no expiration settings are
							defined in NHibernate configuration.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>useSlidingExpiration</literal></term>
					<listitem>
						<para>
							Should the expiration be sliding? A sliding expiration is reinitialized at each get.
							Defaults to <literal>false</literal> if not defined in NHibernate configuration.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>timeOfDayExpiration</literal></term>
					<listitem>
						<para>
							24 hour based time of day that an item will exist in the cache until. 12am is specified as
							00:00:00; 10pm is specified as 22:00:00. Only valid if relativeExpiration is not specified.
							Time of Day Expiration is useful for scenarios where items should be expired from the cache
							after a daily process completes. 
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>priority</literal></term>
					<listitem>
						<classname>System.Web.Caching.CacheItemPriority</classname> that identifies the relative
						priority of items stored in the cache.
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

	<section id="NHibernate.Caches.EnyimMemcached">
		<title>EnyimMemcached Configuration</title>
		<para>
			Its configuration relies on the EnyimMemcached library own configuration, through its
			<literal>enyim.com/memcached</literal> configuration section. See
			<ulink url="https://github.com/enyim/EnyimMemcached">project site</ulink>.
		</para>
	</section>

	<section id="NHibernate.Caches.RtMemoryCache">
		<title>RtMemoryCache Configuration</title>
		<para>
			RtMemoryCache relies on <classname>System.Runtime.Caching.MemoryCache</classname> for the
			underlying implementation.
			The following NHibernate configuration settings are available:
		</para>

		<variablelist>
			<varlistentry>
				<term><literal>cache.default_expiration</literal></term>
				<listitem>
					Number of seconds to wait before expiring each item.
					Defaults to <literal>300</literal>. It can also be set programmatically on the NHibernate
					configuration object under the name <literal>expiration</literal>, which then takes precedence
					over <literal>cache.default_expiration</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>cache.use_sliding_expiration</literal></term>
				<listitem>
					Should the expiration be sliding? A sliding expiration is reinitialized at each get.
					Defaults to <literal>false</literal>.
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			RtMemoryCache has a config file section handler to allow configuring different expirations for
			different regions. Here is an example:
		</para>

		<example>
			<programlisting><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="rtmemorycache"
      type="NHibernate.Caches.RtMemoryCache.RtMemoryCacheSectionHandler,NHibernate.Caches.RtMemoryCache" />
  </configSections>

  <rtmemorycache>
    <cache region="foo" expiration="500" />
    <cache region="bar" expiration="300" sliding="true" />
  </rtmemorycache>
</configuration>]]></programlisting>
		</example>
	</section>

	<section id="NHibernate.Caches.CoreMemoryCache">
		<title>CoreMemoryCache Configuration</title>
		<para>
			CoreMemoryCache relies on <classname>Microsoft.Extensions.Caching.Memory.MemoryCache</classname> for the
			underlying implementation.
			The following NHibernate configuration settings are available:
		</para>

		<variablelist>
			<varlistentry>
				<term><literal>cache.default_expiration</literal></term>
				<listitem>
					Number of seconds to wait before expiring each item.
					Defaults to <literal>300</literal>. It can also be set programmatically on the NHibernate
					configuration object under the name <literal>expiration</literal>, which then takes precedence
					over <literal>cache.default_expiration</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>cache.use_sliding_expiration</literal></term>
				<listitem>
					Should the expiration be sliding? A sliding expiration is reinitialized at each get.
					Defaults to <literal>false</literal>.
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			CoreMemoryCache has a config file section handler to allow configuring different expirations for
			different regions, and configuring the <literal>MemoryCache</literal> expiration scan frequency.
			Here is an example:
		</para>

		<example>
			<programlisting><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="corememorycache"
      type="NHibernate.Caches.CoreMemoryCache.CoreMemoryCacheSectionHandler,NHibernate.Caches.CoreMemoryCache"
    />
  </configSections>

  <corememorycache expiration-scan-frequency="00:05:00">
    <cache region="foo" expiration="500" />
    <cache region="bar" expiration="300" sliding="true" />
  </corememorycache>
</configuration>]]></programlisting>
		</example>
	</section>

	<section id="NHibernate.Caches.CoreDistributedCache">
		<title>CoreDistributedCache Configuration</title>
		<para>
			CoreDistributedCache relies on <classname>Microsoft.Extensions.Caching.Abstractions.IDistributedCache</classname>
			implementations. The implementation has to be provided through an <literal>IDistributedCacheFactory</literal>, either
			supplied through configuration or programmatically by affecting
			<literal>CoreDistributedCacheProvider.CacheFactory</literal> before building a session factory.
			The following NHibernate configuration settings are available:
		</para>

		<variablelist>
			<varlistentry>
				<term><literal>cache.default_expiration</literal></term>
				<listitem>
					Number of seconds to wait before expiring each item.
					Defaults to <literal>300</literal>. It can also be set programmatically on the NHibernate
					configuration object under the name <literal>expiration</literal>, which then takes precedence
					over <literal>cache.default_expiration</literal>.
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>cache.use_sliding_expiration</literal></term>
				<listitem>
					Should the expiration be sliding? A sliding expiration is reinitialized at each get.
					Defaults to <literal>false</literal>.
				</listitem>
			</varlistentry>
		</variablelist>

		<para>
			CoreDistributedCache has a config file section handler to allow configuring different expirations for
			different regions, configuring the <literal>IDistributedCacheFactory</literal> to use, and configuring
			additional properties specific to the chosen <literal>IDistributedCache</literal> implementation.
			Here is an example:
		</para>

		<example>
			<programlisting><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="coredistributedcache"
      type="NHibernate.Caches.CoreDistributedCache.CoreDistributedCacheSectionHandler,
            NHibernate.Caches.CoreDistributedCache" />
  </configSections>

  <coredistributedcache
    factory-class="NHibernate.Caches.CoreDistributedCache.Memory.MemoryFactory,
                   NHibernate.Caches.CoreDistributedCache.Memory">
    <properties>
      <property name="expiration-scan-frequency">00:10:00</property>
      <property name="size-limit">1048576</property>
    </properties>
    <cache region="foo" expiration="500" sliding="true" />
    <cache region="noExplicitExpiration" sliding="true" />
  </coredistributedcache>
</configuration>]]></programlisting>
		</example>

		<para>
			CoreDistributedCache does not support <literal>NHibernate.Cache.ICache.Clear</literal>. Clearing the NHibernate
			cache has no effects with CoreDistributedCache.
		</para>

		<section id="NHibernate.Caches.CoreDistributedCache.Memcached">
			<title>Memcached distributed cache factory</title>

			<para>
				<literal>NHibernate.Caches.CoreDistributedCache.Memcached</literal> provides a Redis distributed cache factory.
				This factory yields a <literal>Enyim.Caching.MemcachedClient</literal> from <literal>EnyimMemcachedCore</literal>.
				For using it, reference the cache factory package and set the <literal>factory-class</literal> attribute of the
				<literal>coredistributedcache</literal> configuration section to
				<literal>NHibernate.Caches.CoreDistributedCache.Memcached.MemcachedFactory, NHibernate.Caches.CoreDistributedCache.Memcached</literal>.
			</para>

			<para>
				Memcached does not support sliding expirations. <literal>cache.use_sliding_expiration</literal> setting or
				<literal>sliding</literal> region setting do not have any effect with Memcached.
			</para>

			<para>
				The following additional properties can be configured:
			</para>

			<variablelist>
				<varlistentry>
					<term><literal>configuration</literal></term>
					<listitem>
						The JSON configuration of <literal>EnyimMemcachedCore</literal>, see its
						<ulink url="https://github.com/cnblogs/EnyimMemcachedCore">project website</ulink>. It has to be structured
						like the value part of the <literal>"enyimMemcached"</literal> property in an
						<literal>appsettings.json</literal> file.
						<example>
							<programlisting><![CDATA[{
  "Servers": [
    {
      "Address": "localhost",
      "Port": 11211
    }
  ]
}]]></programlisting>
						</example>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="NHibernate.Caches.CoreDistributedCache.Redis">
			<title>Redis distributed cache factory</title>

			<para>
				<literal>NHibernate.Caches.CoreDistributedCache.Redis</literal> provides a Redis distributed cache factory.
				This factory yields a <literal>Microsoft.Extensions.Caching.Redis.RedisCache</literal>. For using it,
				reference the cache factory package and set the <literal>factory-class</literal> attribute of the
				<literal>coredistributedcache</literal> configuration section to
				<literal>NHibernate.Caches.CoreDistributedCache.Redis.RedisFactory, NHibernate.Caches.CoreDistributedCache.Redis</literal>.
			</para>
			<para>
				The following additional properties can be configured:
			</para>

			<variablelist>
				<varlistentry>
					<term><literal>configuration</literal></term>
					<listitem>
						Its value will be used to set the <literal>Configuration</literal> property of the
						<literal>RedisCache</literal> options (<literal>RedisCacheOptions</literal>).
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>instance-name</literal></term>
					<listitem>
						Its value will be used to set the <literal>InstanceName</literal> property of the
						<literal>RedisCache</literal> options (<literal>RedisCacheOptions</literal>).
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="NHibernate.Caches.CoreDistributedCache.SqlServer">
			<title>SQL Server distributed cache factory</title>

			<para>
				<literal>NHibernate.Caches.CoreDistributedCache.SqlServer</literal> provides a SQL Server distributed cache factory.
				This factory yields a <literal>Microsoft.Extensions.Caching.SqlServer.SqlServerCache</literal>. For using it,
				reference the cache factory package and set the <literal>factory-class</literal> attribute of the
				<literal>coredistributedcache</literal> configuration section to
				<literal>NHibernate.Caches.CoreDistributedCache.SqlServer.SqlServerFactory, NHibernate.Caches.CoreDistributedCache.SqlServer</literal>.
			</para>
			<para>
				The following additional properties can be configured:
			</para>

			<variablelist>
				<varlistentry>
					<term><literal>connection-string</literal></term>
					<listitem>
						Its value will be used to set the <literal>ConnectionString</literal> property of the
						<literal>SqlServerCache</literal> options (<literal>SqlServerCacheOptions</literal>).
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>schema-name</literal></term>
					<listitem>
						Its value will be used to set the <literal>SchemaName</literal> property of the
						<literal>SqlServerCache</literal> options (<literal>SqlServerCacheOptions</literal>).
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>table-name</literal></term>
					<listitem>
						Its value will be used to set the <literal>TableName</literal> property of the
						<literal>SqlServerCache</literal> options (<literal>SqlServerCacheOptions</literal>).
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>expired-items-deletion-interval</literal></term>
					<listitem>
						Its value will be used to set the <literal>ExpiredItemsDeletionInterval</literal> property of the
						<literal>SqlServerCache</literal> options (<literal>SqlServerCacheOptions</literal>). It can be
						provided either as an integer being a number of minutes or as a <literal>TimeSpan</literal> string
						representation.
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="NHibernate.Caches.CoreDistributedCache.Memory">
			<title>Memory distributed cache factory</title>

			<para>
				<literal>NHibernate.Caches.CoreDistributedCache.Memory</literal> provides a memory "distributed" cache factory.
				This factory yields a <literal>Microsoft.Extensions.Caching.Memory.MemoryDistributedCache</literal>. For using it,
				reference the cache factory package and set the <literal>factory-class</literal> attribute of the
				<literal>coredistributedcache</literal> configuration section to
				<literal>NHibernate.Caches.CoreDistributedCache.Memory.MemoryFactory, NHibernate.Caches.CoreDistributedCache.Memory</literal>.
			</para>
			<para>
				As implied by its name, this cache is not actually distributed. It is meant for testing purpose. For other usages, consider
				using another memory cache provider, like <literal>CoreMemoryCache</literal>. Due to the distributed cache implementation, using
				the <literal>MemoryDistributedCache</literal> has some drawbacks compared to most other memory cache providers: it will
				serialize cached objects, incurring some overhead; it does not support clearing the cache. But due to the serialization of
				cached objects, it is able of computing its consumed memory size, thus the availability of the <literal>SizeLimit</literal>
				option.
			</para>
			<para>
				The following additional properties can be configured:
			</para>

			<variablelist>
				<varlistentry>
					<term><literal>expiration-scan-frequency</literal></term>
					<listitem>
						Its value will be used to set the <literal>ExpirationScanFrequency</literal> property of the
						<literal>MemoryDistributedCache</literal> options (<literal>MemoryDistributedCacheOptions</literal>). It can be
						provided either as an integer being a number of minutes or as a <literal>TimeSpan</literal> string
						representation.
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><literal>size-limit</literal></term>
					<listitem>
						Its value will be used to set the <literal>SizeLimit</literal> property of the
						<literal>MemoryDistributedCache</literal> options (<literal>MemoryDistributedCacheOptions</literal>).
						Its value is an integer, representing the maximal bytes count to be stored in the cache.
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
	</section>

</chapter>
