<chapter id="toolsetguide">
    <title>Toolset Guide</title>

    <para>
        Roundtrip engineering with NHibernate is possible using a set of commandline tools 
        maintained as part of the NHibernate project, along with NHibernate support built into
        various code generation tools (MyGeneration, CodeSmith, ObjectMapper, AndroMDA).
    </para>

    <para>
        The NHibernate main package comes bundled with the most important tool (it can even
        be used from "inside" NHibernate on-the-fly):
    </para>

    <itemizedlist>
        <listitem><para>
            DDL schema generation from a mapping file
            (aka <literal>SchemaExport</literal>, <literal>hbm2ddl</literal>)
        </para></listitem>
    </itemizedlist>

    <para>
        Other tools directly provided by the NHibernate project are delivered with a separate
        package, <emphasis>NHibernateContrib</emphasis>. This package includes tools for
        the following tasks:
    </para>

    <itemizedlist>
        <!-- No more maintained
        <listitem><para>
            C# source generation from a mapping file (aka <literal>hbm2net</literal>)
        </para></listitem> -->
        <listitem><para>
            mapping file generation from .NET classes marked with attributes
            (<literal>NHibernate.Mapping.Attributes</literal>, or NHMA for short)
        </para></listitem>
    </itemizedlist>

    <para>
        Third party tools with NHibernate support are:
    </para>

    <itemizedlist>
        <listitem><para>
            CodeSmith, MyGeneration, and ObjectMapper (mapping file generation from an existing
            database schema)
        </para></listitem>
        <listitem><para>
            AndroMDA (MDA (Model-Driven Architecture) approach generating code for
            persistent classes from UML diagrams and their XML/XMI representation)
        </para></listitem>
    </itemizedlist>

    <para>
        These 3rd party tools are not documented in this reference. Please refer to the NHibernate
        website for up-to-date information.
    </para>

    <sect1 id="toolsetguide-s1">
        <title>Schema Generation</title>

        <para>
            The generated schema includes referential integrity constraints (primary and foreign keys) for entity
            and collection tables. Tables and sequences are also created for mapped identifier generators.
        </para>
        
        <para>
            You <emphasis>must</emphasis> specify a SQL <literal>Dialect</literal> via the 
            <literal>dialect</literal> configuration property when using this tool.
        </para>

        <sect2 id="toolsetguide-s1-2" revision="1">
            <title>Customizing the schema</title>

            <para>
                Many NHibernate mapping elements define an optional attribute named <literal>length</literal>. You may set 
                the length of a column with this attribute. (Or, for numeric/decimal data types, the precision.)
            </para>

            <para>
                Some tags also accept a <literal>not-null</literal> attribute (for generating a <literal>NOT NULL</literal>
                constraint on table columns) and a <literal>unique</literal> attribute (for generating <literal>UNIQUE</literal>
                constraint on table columns).
            </para>

            <para>
                Some tags accept an <literal>index</literal> attribute for specifying the
                name of an index for that column. A <literal>unique-key</literal> attribute
                can be used to group columns in a single unit key constraint. Currently, the
                specified value of the <literal>unique-key</literal> attribute is
                <emphasis>not</emphasis> used to name the constraint, only to group the
                columns in the mapping file.
            </para>
            
            <para>
                Examples:
            </para>

            <programlisting><![CDATA[<property name="Foo" type="String" length="64" not-null="true"/>

<many-to-one name="Bar" foreign-key="fk_foo_bar" not-null="true"/>

<element column="serial_number" type="Int64" not-null="true" unique="true"/>]]></programlisting>

            <para>
                Alternatively, these elements also accept a child <literal>&lt;column&gt;</literal> element. This is
                particularly useful for multi-column types:
            </para>

            <programlisting><![CDATA[<property name="Foo" type="String">
    <column name="foo" length="64" not-null="true" sql-type="text"/>
</property>

<property name="Bar" type="My.CustomTypes.MultiColumnType, My.CustomTypes"/>
    <column name="fee" not-null="true" index="bar_idx"/>
    <column name="fi" not-null="true" index="bar_idx"/>
    <column name="fo" not-null="true" index="bar_idx"/>
</property>]]></programlisting>

            <para>
                The <literal>sql-type</literal> attribute allows the user to override the default mapping
                of NHibernate type to SQL data type.
            </para>
            
            <para>
                The <literal>check</literal> attribute allows you to specify a check constraint.
            </para>
            
            <programlisting><![CDATA[<property name="Foo" type="Int32">
    <column name="foo" check="foo > 10"/>
</property>

<class name="Foo" table="foos" check="bar < 100.0">
    ...
    <property name="Bar" type="Single"/>
</class>]]></programlisting>
            

            <table frame="topbot" id="schemattributes-summary" revision="2">
                <title>Summary</title>
                <tgroup cols="3">
                    <colspec colwidth="1*"/>
                    <colspec colwidth="1*"/>
                    <colspec colwidth="2.5*"/>
                    <thead>
                        <row>
                            <entry>Attribute</entry>
                            <entry>Values</entry>
                            <entry>Interpretation</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>length</literal></entry>
                            <entry>number</entry>
                            <entry>column length/decimal precision</entry>
                        </row>
                        <row>
                            <entry><literal>not-null</literal></entry>
                            <entry><literal>true|false</literal></entry>
                            <entry>specifies that the column should be non-nullable</entry>
                        </row>
                        <row>
                            <entry><literal>unique</literal></entry>
                            <entry><literal>true|false</literal></entry>
                            <entry>specifies that the column should have a unique constraint</entry>
                        </row>
                        <row>
                            <entry><literal>index</literal></entry>
                            <entry><literal>index_name</literal></entry>
                            <entry>specifies the name of a (multi-column) index</entry>
                        </row>
                        <row>
                            <entry><literal>unique-key</literal></entry>
                            <entry><literal>unique_key_name</literal></entry>
                            <entry>specifies the name of a multi-column unique constraint</entry>
                        </row>
                        <row>
                            <entry><literal>foreign-key</literal></entry>
                            <entry><literal>foreign_key_name</literal></entry>
                            <entry>
                                specifies the name of the foreign key constraint generated
                                for an association, use it on &lt;one-to-one>, &lt;many-to-one>,
                                &lt;key>, and &lt;many-to-many> mapping elements. Note that
                                <literal>inverse="true"</literal> sides will not be considered
                                by <literal>SchemaExport</literal>.
                            </entry>
                        </row>
                        <row>
                            <entry><literal>sql-type</literal></entry>
                            <entry><literal>column_type</literal></entry>
                            <entry>
                                overrides the default column type (attribute of 
                                <literal>&lt;column&gt;</literal> element only)
                            </entry>
                       </row>
                       <row>
                            <entry><literal>check</literal></entry>
                            <entry>SQL expression</entry>
                            <entry>
                                create an SQL check constraint on either column or table
                            </entry>
                       </row>
                   </tbody>
                </tgroup>
            </table>

        </sect2>

        <sect2 id="toolsetguide-s1-3">
            <title>Running the tool</title>

            <para>
                The <literal>SchemaExport</literal> tool writes a DDL script to standard out and/or
                executes the DDL statements.
            </para>

            <para>
                You may embed <literal>SchemaExport</literal> in your application:
            </para>

            <programlisting><![CDATA[Configuration cfg = ....;
new SchemaExport(cfg).Create(false, true);]]></programlisting>

        </sect2>

        <!-- Not ported as a standalone tool or Ant task

        <sect2 id="toolsetguide-s1-4">
            <title>Properties</title>

            <para>
                Database properties may be specified
            </para>

            <itemizedlist spacing="compact">
                <listitem>
                    <para>as system properties with <literal>-D</literal><emphasis>&lt;property&gt;</emphasis></para>
                </listitem>
                <listitem>
                    <para>in <literal>hibernate.properties</literal></para>
                </listitem>
                <listitem>
                    <para>in a named properties file with <literal>- -properties</literal></para>
                </listitem>
            </itemizedlist>

            <para>
                The needed properties are:
            </para>

            <table frame="topbot">
                <title>SchemaExport Connection Properties</title>
                <tgroup cols="2">
                    <colspec colwidth="1.5*"/>
                    <colspec colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>Property Name</entry>
                            <entry>Description</entry>
                        </row>
                    </thead>
                    <tbody>
                    <row>
                        <entry><literal>connection.driver_class</literal></entry>
                        <entry>jdbc driver class</entry>
                    </row>
                    <row>
                        <entry><literal>connection.url</literal></entry>
                        <entry>jdbc url</entry>
                    </row>
                    <row>
                        <entry><literal>connection.username</literal></entry>
                        <entry>database user</entry>
                    </row>
                    <row>
                        <entry><literal>connection.password</literal></entry>
                        <entry>user password</entry>
                    </row>
                    <row>
                        <entry><literal>dialect</literal></entry>
                        <entry>dialect</entry>
                    </row>
                    </tbody>
                </tgroup>
            </table>

        </sect2>

        <sect2 id="toolsetguide-s1-5" revision="1">
            <title>Using Ant</title>

            <para>
                You can call <literal>SchemaExport</literal> from your Ant build script:
            </para>

            <programlisting><![CDATA[<target name="schemaexport">
    <taskdef name="schemaexport"
        classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
        classpathref="class.path"/>
    
    <schemaexport
        properties="hibernate.properties"
        quiet="no"
        text="no"
        drop="no"
        delimiter=";"
        output="schema-export.sql">
        <fileset dir="src">
            <include name="**/*.hbm.xml"/>
        </fileset>
    </schemaexport>
</target>]]></programlisting>

            <para>
                If you don't specify <literal>properties</literal> or a <literal>config</literal> file,
                the <literal>SchemaExportTask</literal> will try to use normal Ant project properties instead.
                In other words, if you don't want or need an external configuration or properties file, you
                may put <literal>hibernate.*</literal> configuration properties in your build.xml or
                build.properties.
            </para>

        </sect2> -->
    </sect1>

    <!-- No more maintained, left on sourceforge with obsolete links to the dead nhforge

    <sect1 id="toolsetguide-s2">
        <title>Code Generation</title>

        <para>
          The NHibernate code generator may be used to generate skeletal C# implementation classes
          from a NHibernate mapping file. This tool is included in the NHibernate Contrib package
          (a separate download in http://sourceforge.net/projects/nhcontrib/).
        </para>

        <para>
            <literal>hbm2net</literal> parses the mapping files and generates fully working C#
            source files from these. Thus with <literal>hbm2net</literal> one could "just" provide the
            <literal>.hbm</literal> files, and then don't worry about hand-writing/coding the C# files.
        </para>

        <para>
            <literal>hbm2net</literal> <emphasis> options
            mapping_files</emphasis>
        </para>

        <table frame="topbot">
            <title>Code Generator Command Line Options</title>
            <tgroup cols="2">
                <colspec colwidth="1*"/>
                <colspec colwidth="2*"/>
                <thead>
                    <row>
                        <entry>Option</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>-output:</literal><emphasis>output_dir</emphasis></entry>
                        <entry>root directory for generated code</entry>
                    </row>
                    <row>
                        <entry><literal>-config:</literal><emphasis>config_file</emphasis></entry>
                        <entry>optional file for configuring hbm2net</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
      <para>
        A more detailed guide of <literal>hbm2net</literal> is available in
        http://nhibernate.info/blog/2009/12/12/t4-hbm2net-alpha-2.html
      </para>


    </sect1> -->

</chapter>

