using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace NHibernate.Util
{
	public static class TypeExtensions
	{
		private const BindingFlags PropertiesOrFieldOfClass = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly;

		public static bool IsEnumerableOfT(this System.Type type)
		{
			return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>);
		}

		public static bool IsNullable(this System.Type type)
		{
			return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>);
		}

		public static bool IsNullableOrReference(this System.Type type)
		{
			return !type.IsValueType || type.IsNullable();
		}

		public static System.Type NullableOf(this System.Type type)
		{
			return type.GetGenericArguments()[0];
		}

		public static bool IsPrimitive(this System.Type type)
		{
			return (type.IsValueType || type.IsNullable() || type == typeof(string));
		}

		public static bool IsNonPrimitive(this System.Type type)
		{
			return !type.IsPrimitive();
		}

		internal static bool IsCollectionType(this System.Type type)
		{
			return typeof (IEnumerable).IsAssignableFrom(type) && type != typeof (string);
		}

		internal static System.Type UnwrapIfNullable(this System.Type type)
		{
			if (type.IsNullable())
				return type.NullableOf();

			return type;
		}

		public static IEnumerable<MemberInfo> GetFieldsOfHierarchy(this System.Type type)
		{
			if (!type.IsInterface)
			{
				var analyzing = type;
				while (analyzing != null && analyzing != typeof(object))
				{
					foreach (var fieldInfo in GetUserDeclaredFields(analyzing))
					{
						yield return fieldInfo;
					}

					analyzing = analyzing.BaseType;
				}
			}
		}

		public static IEnumerable<FieldInfo> GetUserDeclaredFields(System.Type type)
		{
			// can't find another way to exclude fields generated by the compiler (for both auto-properties and anonymous-types)
			return type.GetFields(PropertiesOrFieldOfClass).Where(x => !x.Name.StartsWith('<'));
		}
	}
}
