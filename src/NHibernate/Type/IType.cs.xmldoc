<?xml version="1.0" encoding="utf-8" ?> 
<members type="IType">
    <member name="T:IType">
        <summary>
			Defines a mapping from a .NET <see cref="System.Type"/> to a SQL datatype.
			This interface is intended to be implemented by applications that need custom types.
		</summary>
		<remarks>
			Implementors should usually be immutable and MUST definately be threadsafe.
		</remarks>
    </member>
    
	<member name="P:IType.IsAssociationType">
		<summary>
			When implemented by a class, gets a value indicating if the implementor is castable to an an <see cref="IAssociationType"/>
		</summary>
		<value>true if this is an Association</value>
		<remarks>This does not necessarily imply that the type actually represents an association.</remarks>
	</member>
	
	<member name="P:IType.IsCollectionType">
		<summary>
			When implemented by a class, gets a value indicating if the implementor is a collection type
		</summary>
		<value>true if this is a <see cref="CollectionType"/>.</value>
	</member>
	
	<member name="P:IType.IsComponentType">
		<summary>
		When implemented by a class, gets a value indicating if the implementor 
		is an <see cref="IAbstractComponentType"/>.
		</summary>
		<value>true if this is an <see cref="IAbstractComponentType"/></value>
		<remarks>
		If true, the implementation must be castable to <see cref="IAbstractComponentType"/>.
		A component type may own collections or associations and hence must provide certain extra functionality.
		</remarks>
	</member>
	
	<member name="P:IType.IsEntityType">
		<summary>
		When implemented by a class, gets a value indicating if the implementor 
		extends <see cref="EntityType"/>
		</summary>
		<value>true if this is an <see cref="EntityType"/></value>
	</member>
	
	<member name="P:IType.IsObjectType">
		<summary>
		When implemented by a class, gets a value indicating if the implementation is an "object" type
		</summary>
		<value>true if this an "object" type</value>
		<remarks>
		This is a reference to a persistent entity that is not modelled as a (foreign key) association.
		</remarks>
	</member>
	
	<member name="M:IType.SqlTypes">
		<summary>
		When implemented by a class, returns the SqlTypes for the columns mapped by this IType.
		</summary>
		<param name="mapping">The <see cref="IMapping"/> that uses this IType.</param>
		<returns>An array of <see cref="SqlType"/>s.</returns>
	</member>
	
	<member name="M:IType.GetColumnSpan">
		<summary>
		When implemented by a class, returns how many columns are used to persist this type.
		</summary>
		<param name="mapping">The <see cref="IMapping"/> that uses this IType.</param>
		<returns>The number of columns this IType spans.</returns>
		<exception cref="MappingException">MappingException</exception>
	</member>
	
	<member name="P:IType.ReturnedClass">
		<summary>
		When implemented by a class, gets the <see cref="System.Type"/> returned 
		by the <c>NullSafeGet()</c> methods.
		</summary>
		<value>
		The <see cref="System.Type"/> from the .NET framework.
		</value>
		<remarks>
		This is used to establish the class of an array of this Itype
		</remarks>
	</member>
	
	<member name="M:IType.Equals">
		<summary>
		When implemented by a class, compare two instances of the class mapped by this 
		IType for persistence "equality" - ie. Equality of persistent state.
		</summary>
		<param name="x">The left hand side object.</param>
		<param name="y">The right hand side object.</param>
		<returns>True if the two objects contain the same values.</returns>
	</member>
	
	<member name="M:IType.IsDirty">
		<summary>
		When implemented by a class, should the parent be considered dirty, 
		given both the old and current field or element value?
		</summary>
		<param name="old">The old value</param>
		<param name="current">The current value</param>
		<param name="session">The <see cref="ISessionImplementor"/> </param>
		<returns>true if the field is dirty</returns>
	</member>
	
	<member name="M:IType.NullSafeGet(DbDataReader, String[], ISessionImplementor, Object)">
		<summary>
		When implemented by a class, gets an instance of the object mapped by 
		this IType from the <see cref="DbDataReader"/>.
		</summary>
		<param name="rs">The <see cref="DbDataReader"/> that contains the values</param>
		<param name="names">
		The names of the columns in the <see cref="DbDataReader"/> that contain the 
		value to populate the IType with.
		</param>
		<param name="session"></param>
		<param name="owner"></param>
		<returns>The object mapped by this IType.</returns>
		<remarks>
		Implementors should handle possibility of null values.
		</remarks>
	</member>
	
	<member name="M:IType.NullSafeGet(DbDataReader, String, ISessionImplementor, Object)">
		<summary>
		When implemented by a class, gets an instance of the object 
		mapped by this IType from the <see cref="DbDataReader"/>.
		</summary>
		<param name="rs">The <see cref="DbDataReader"/> that contains the values</param>
		<param name="name">The name of the column in the <see cref="DbDataReader"/> that contains the 
		value to populate the IType with.</param>
		<param name="session"></param>
		<param name="owner"></param>
		<returns>The object mapped by this IType.</returns>
		<remarks>
		Implementations should handle possibility of null values.
		This method might be called if the IType is known to be a single-column type.
		</remarks>
	</member>
	
	<member name="M:IType.NullSafeSet(settable)">
		<summary>
		When implemented by a class, puts the value/values from the mapped 
		class into the <see cref="DbCommand"/>.
		</summary>
		<param name="st">The <see cref="DbCommand"/> to put the values into.</param>
		<param name="value">The object that contains the values.</param>
		<param name="index">The index of the <see cref="DbParameter"/> to start writing the values to.</param>
		<param name="session"></param>
		<param name="settable">Indicates which columns are to be set.</param>
		<remarks>
		Implementors should handle possibility of null values.
		A multi-column type should be written to parameters starting from <paramref name="index"/>.
		</remarks>
	</member>

	<member name="M:IType.NullSafeSet">
		<summary>
			When implemented by a class, puts the value/values from the mapped
			class into the <see cref="DbCommand"/>.
		</summary>
		<param name="st">
			The <see cref="DbCommand"/> to put the values into.
		</param>
		<param name="value">The object that contains the values.</param>
		<param name="index">
			The index of the <see cref="DbParameter"/> to start writing the values to.
		</param>
		<param name="session"></param>
		<remarks>
			Implementors should handle possibility of null values.
			A multi-column type should be written to parameters starting from <paramref name="index"/>.
		</remarks>
	</member>

	<member name="M:IType.ToString">
		<summary>
		When implemented by a class, a representation of the value to be 
		embedded in an XML element
		</summary>
		<param name="value">The object that contains the values.</param>
		<param name="factory"></param>
		<returns>An Xml formatted string.</returns>
	</member>

	<member name="M:IType.FromString">
		<summary>
		Parse the XML representation of an instance
		</summary>
		<param name="xml"></param>
		<returns>an instance of the type</returns>
	</member>

	<member name="P:IType.Name">
		<summary>
		When implemented by a class, gets the abbreviated name of the type.
		</summary>
		<value>The NHibernate type name.</value>
	</member>
	
	<member name="M:IType.DeepCopy">
		<summary>
		When implemented by a class, returns a deep copy of the persistent 
		state, stopping at entities and at collections.
		</summary>
		<param name="val">A Collection element or Entity field</param>
		<param name="factory">The session factory.</param>
		<returns>A deep copy of the object.</returns>
	</member>
	
	<member name="P:IType.IsMutable">
		<summary>
		When implemented by a class, gets the value indicating if the objects 
		of this IType are mutable.
		</summary>
		<value>true if the objects mapped by this IType are mutable.</value>
		<remarks>
		With respect to the referencing object...
		Entities and Collections are considered immutable because they manage their own internal state.
		</remarks>
	</member>
	
	<member name="M:IType.Disassemble">
		<summary>
		When implemented by a class, disassembles the object into a cacheable representation.
		</summary>
		<param name="value">The value to disassemble.</param>
		<param name="session">The sesion</param>
		<returns>The disassembled, deep cloned state of the object</returns>
	</member>
	
	<member name="M:IType.Assemble">
		<summary>
		When implemented by a class, reconstructs the object from its 
		cached "disassembled" state.
		</summary>
		<param name="cached">The disassembled state from the cache</param>
		<param name="session">The session</param>
		<param name="owner">tThe parent Entity object</param>
		<returns>The assembled object.</returns>
	</member>
	
	<member name="P:IType.HasNiceEquals">
		<summary>
		When implemented by a class, gets whether or not this IType contains 
		<see cref="System.Type"/>s that implement well-behaved <c>Equals()</c> method.
		</summary>
		<value>true if a well-behaved <c>Equals()</c> is implemented.</value>
		<remarks>
		<para>
		Strickly, if this method returns <c>true</c> then <c>x.Equals(y)</c> implies
		<c>IType.Equals(x, y)</c> and also <c>IType.Equals(x, y)</c> implies that
		probably <c>x.Equals(y)</c>
		</para>
		<para>
		In the default implementations <see cref="ImmutableType"/>s are assumed to have
		HaveNiceEquals==true and <see cref="MutableType"/>s are assumed to have 
		HaveNiceEquals==false.
		</para>
		<para>
		This code doesn't look like it is used anywhere internally because I did a search
		on ".HasNiceEquals" and found no results.  So it looks like it is used for a description
		of the IType only.
		</para>
		</remarks>
	</member>
	
	<member name="M:IType.Hydrate">
		<summary>
		When implemented by a class, retrieves an instance of the mapped class, 
		or the identifier of an entity or collection from a <see cref="DbDataReader"/>.
		</summary>
		<param name="rs">The <see cref="DbDataReader"/> that contains the values.</param>
		<param name="names">
		The names of the columns in the <see cref="DbDataReader"/> that contain the 
		value to populate the IType with.
		</param>
		<param name="session">the session</param>
		<param name="owner">The parent Entity</param>
		<returns>An identifier or actual object mapped by this IType.</returns>
		<remarks>
		<para>
		This is useful for 2-phase property initialization - the second phase is a call to
		<c>ResolveIdentifier()</c>
		</para>
		<para>
		Most implementors of this method will just pass the call to <c>NullSafeGet()</c>.
		</para>
		</remarks>
	</member>
	
	<member name="M:IType.ResolveIdentifier">
		<summary>
		When implemented by a class, maps identifiers to Entities or Collections. 
		</summary>
		<param name="value">An identifier or value returned by <c>Hydrate()</c></param>
		<param name="session">The session</param>
		<param name="owner">The parent Entity</param>
		<returns>The Entity or Collection referenced by this Identifier.</returns>
		<remarks>
		This is the second phase of 2-phase property initialization.
		</remarks>
	</member>
		
</members>
