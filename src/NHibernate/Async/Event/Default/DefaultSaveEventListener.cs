//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Engine;

namespace NHibernate.Event.Default
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class DefaultSaveEventListener : DefaultSaveOrUpdateEventListener
	{
		protected override Task<object> PerformSaveOrUpdateAsync(SaveOrUpdateEvent @event, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				// this implementation is supposed to tolerate incorrect unsaved-value
				// mappings, for the purpose of backward-compatibility
				EntityEntry entry = @event.Session.PersistenceContext.GetEntry(@event.Entity);
				if (entry != null && entry.Status != Status.Deleted)
				{
					return Task.FromResult<object>(EntityIsPersistent(@event));
				}
				else
				{
					return EntityIsTransientAsync(@event, cancellationToken);
				}
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
