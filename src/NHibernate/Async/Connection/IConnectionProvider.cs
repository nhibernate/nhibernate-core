//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;
using NHibernate.Driver;
using NHibernate.Util;

namespace NHibernate.Connection
{
	using System.Threading.Tasks;
	using System.Threading;
	public static partial class ConnectionProviderExtensions
	{
		internal static Task<DbConnection> GetConnectionAsync(this IConnectionProvider connectionProvider, string connectionString, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<DbConnection>(cancellationToken);
			}
			try
			{
				return ReflectHelper.CastOrThrow<ConnectionProvider>(connectionProvider, "open connection by connectionString").GetConnectionAsync(connectionString, cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<DbConnection>(ex);
			}
		}
	}

	public partial interface IConnectionProvider : IDisposable
	{

		/// <summary>
		/// Get an open <see cref="DbConnection"/>.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>An open <see cref="DbConnection"/>.</returns>
		Task<DbConnection> GetConnectionAsync(CancellationToken cancellationToken);
	}
}
