//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Data.Common;

using NHibernate.Driver;
using NHibernate.Util;
using Environment=NHibernate.Cfg.Environment;
using System.Collections.Generic;

namespace NHibernate.Connection
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class ConnectionProvider : IConnectionProvider
	{

		/// <summary>
		/// Get an open <see cref="DbConnection"/>.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>An open <see cref="DbConnection"/>.</returns>
		public virtual Task<DbConnection> GetConnectionAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<DbConnection>(cancellationToken);
			}
			return GetConnectionAsync(ConnectionString, cancellationToken);
		}

		//TODO 6.0: Make abstract
		/// <summary>
		/// Gets an open <see cref="DbConnection"/> for given connectionString
		/// </summary>
		/// <returns>An open <see cref="DbConnection"/>.</returns>
		public virtual Task<DbConnection> GetConnectionAsync(string connectionString, CancellationToken cancellationToken)
		{
			throw new NotImplementedException("This method must be overriden.");
		}
	}
}
