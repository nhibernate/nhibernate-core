//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;

using NHibernate.Cfg;
using NHibernate.Util;

namespace NHibernate.Tool.hbm2ddl
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class SchemaValidator
	{

		public static async Task MainAsync(string[] args, CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			try
			{
				var cfg = new Configuration();

				//string propFile = null;

				for (int i = 0; i < args.Length; i++)
				{
					if (args[i].StartsWith("--", StringComparison.Ordinal))
					{
						//if (args[i].StartsWith("--properties="))
						//{
						//  propFile = args[i].Substring(13);
						//}
						//else 
						if (args[i].StartsWith("--config=", StringComparison.Ordinal))
						{
							cfg.Configure(args[i].Substring(9));
						}
						else if (args[i].StartsWith("--naming=", StringComparison.Ordinal))
						{
							cfg.SetNamingStrategy(
								(INamingStrategy)
								Cfg.Environment.ServiceProvider.GetMandatoryService(ReflectHelper.ClassForName(args[i].Substring(9))));
						}
					}
					else
					{
						cfg.AddFile(args[i]);
					}
				}
				/* NH: No props file for .NET
				if ( propFile != null ) {
					Properties props = new Properties();
					props.putAll( cfg.getProperties() );
					props.load( new FileInputStream( propFile ) );
					cfg.setProperties( props );
				}
				*/
				await (new SchemaValidator(cfg).ValidateAsync(cancellationToken)).ConfigureAwait(false);
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception e)
			{
				log.Error(e, "Error running schema update");
				Console.WriteLine(e);
			}
		}

		// Perform the validations.
		public async Task ValidateAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			cancellationToken.ThrowIfCancellationRequested();
			log.Info("Running schema validator");
			try
			{
				DatabaseMetadata meta;
				try
				{
					log.Info("fetching database metadata");
					await (connectionHelper.PrepareAsync(cancellationToken)).ConfigureAwait(false);
					var connection = connectionHelper.Connection;
					meta = new DatabaseMetadata(connection, dialect, false);
				}
				catch (OperationCanceledException) { throw; }
				catch (Exception sqle)
				{
					log.Error(sqle, "could not get database metadata");
					throw;
				}
				configuration.ValidateSchema(dialect, meta);
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception e)
			{
				log.Error(e, "could not complete schema validation");
				throw;
			}
			finally
			{
				try
				{
					connectionHelper.Release();
				}
				catch (Exception e)
				{
					log.Error(e, "Error closing connection");
				}
			}
		}
	}
}
