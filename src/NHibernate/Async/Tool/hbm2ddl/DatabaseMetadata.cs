//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

using NHibernate.Dialect.Schema;
using NHibernate.Exceptions;
using NHibernate.Mapping;
using NHibernate.Util;

namespace NHibernate.Tool.hbm2ddl
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class DatabaseMetadata : IDatabaseMetadata
	{

		private async Task InitSequencesAsync(DbConnection connection, Dialect.Dialect dialect, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (dialect.SupportsSequences)
			{
				string sql = dialect.QuerySequencesString;
				if (sql != null)
				{
					using (var statement = connection.CreateCommand())
					{
						statement.CommandText = sql;
						using (var rs = await (statement.ExecuteReaderAsync(cancellationToken)).ConfigureAwait(false))
						{
							while (await (rs.ReadAsync(cancellationToken)).ConfigureAwait(false))
								sequences.Add(((string) rs[0]).ToLower().Trim());
						}
					}
				}
			}
		}
	}
}
