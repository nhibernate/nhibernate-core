//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;
using NHibernate.Type;

namespace NHibernate.Param
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class DynamicFilterParameterSpecification : IParameterSpecification
	{

		#region IParameterSpecification Members

		public Task BindAsync(DbCommand command, IList<Parameter> sqlQueryParametersList, QueryParameters queryParameters, ISessionImplementor session, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return BindAsync(command, sqlQueryParametersList, 0, sqlQueryParametersList, queryParameters, session, cancellationToken);
		}

		public async Task BindAsync(DbCommand command, IList<Parameter> multiSqlQueryParametersList, int singleSqlParametersOffset, IList<Parameter> sqlQueryParametersList, QueryParameters queryParameters, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			string backTrackId = GetIdsForBackTrack(session.Factory).First(); // just the first because IType suppose the oders in certain sequence

			// The same filterName-parameterName can appear more than once in the whole query
			object value = session.GetFilterParameterValue(filterParameterFullName);
			foreach (int position in multiSqlQueryParametersList.GetEffectiveParameterLocations(backTrackId))
			{
				await (ExpectedType.NullSafeSetAsync(command, value, position, session, cancellationToken)).ConfigureAwait(false);
			}
		}

		#endregion
		/// <content>
		/// Contains generated async methods
		/// </content>
		private partial class CollectionOfValuesType : IType
		{

			public Task<object> DisassembleAsync(object value, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> AssembleAsync(object cached, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task BeforeAssembleAsync(object cached, ISessionImplementor session, CancellationToken cancellationToken)
			{
				if (cancellationToken.IsCancellationRequested)
				{
					return Task.FromCanceled<object>(cancellationToken);
				}
				try
				{
					BeforeAssemble(cached, session);
					return Task.CompletedTask;
				}
				catch (Exception ex)
				{
					return Task.FromException<object>(ex);
				}
			}

			public Task<bool> IsDirtyAsync(object old, object current, ISessionImplementor session, CancellationToken cancellationToken)
			{
				if (cancellationToken.IsCancellationRequested)
				{
					return Task.FromCanceled<bool>(cancellationToken);
				}
				try
				{
					return Task.FromResult<bool>(IsDirty(old, current, session));
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}

			public Task<bool> IsDirtyAsync(object old, object current, bool[] checkable, ISessionImplementor session, CancellationToken cancellationToken)
			{
				if (cancellationToken.IsCancellationRequested)
				{
					return Task.FromCanceled<bool>(cancellationToken);
				}
				try
				{
					return Task.FromResult<bool>(IsDirty(old, current, checkable, session));
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}

			public Task<bool> IsModifiedAsync(object oldHydratedState, object currentState, bool[] checkable, ISessionImplementor session, CancellationToken cancellationToken)
			{
				if (cancellationToken.IsCancellationRequested)
				{
					return Task.FromCanceled<bool>(cancellationToken);
				}
				try
				{
					return Task.FromResult<bool>(IsModified(oldHydratedState, currentState, checkable, session));
				}
				catch (Exception ex)
				{
					return Task.FromException<bool>(ex);
				}
			}

			public Task<object> NullSafeGetAsync(DbDataReader rs, string[] names, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> NullSafeGetAsync(DbDataReader rs, string name, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task NullSafeSetAsync(DbCommand st, object value, int index, bool[] settable, ISessionImplementor session, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public async Task NullSafeSetAsync(DbCommand st, object value, int index, ISessionImplementor session, CancellationToken cancellationToken)
			{
				cancellationToken.ThrowIfCancellationRequested();
				var start = index;
				var positions = 0;
				var singleParameterColumnSpan = elementType.GetColumnSpan(session.Factory);

				var collection = (IEnumerable) value;
				foreach (var element in collection)
				{
					await (elementType.NullSafeSetAsync(st, element, start + positions, session, cancellationToken)).ConfigureAwait(false);
					positions += singleParameterColumnSpan;
				}
			}

			public Task<object> HydrateAsync(DbDataReader rs, string[] names, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ResolveIdentifierAsync(object value, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> SemiResolveAsync(object value, ISessionImplementor session, object owner, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ReplaceAsync(object original, object target, ISessionImplementor session, object owner, IDictionary copiedAlready, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}

			public Task<object> ReplaceAsync(object original, object target, ISessionImplementor session, object owner, IDictionary copyCache, ForeignKeyDirection foreignKeyDirection, CancellationToken cancellationToken)
			{
				throw new InvalidOperationException();
			}
		}
	}
}