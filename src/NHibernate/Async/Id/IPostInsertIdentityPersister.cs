//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data.Common;
using System.Linq;
using NHibernate.Engine;
using NHibernate.Id.Insert;
using NHibernate.Persister.Collection;
using NHibernate.Persister.Entity;
using NHibernate.SqlCommand;
using NHibernate.Type;
using NHibernate.Util;

namespace NHibernate.Id
{
	using System.Threading.Tasks;
	using System.Threading;

	public partial interface ICompositeKeyPostInsertIdentityPersister
	{

		/// <summary>
		/// Bind the parameter values of a SQL select command that performs a select based on an unique key.
		/// </summary>
		/// <param name="session">The current <see cref="ISession" />.</param>
		/// <param name="selectCommand">The command.</param>
		/// <param name="binder">The id insertion binder.</param>
		/// <param name="suppliedPropertyNames">The names of the properties which map to the column(s) to use
		/// in the select statement restriction. If supplied, they override the persister logic for determining
		/// them.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <exception cref="NotSupportedException">thrown if <paramref name="suppliedPropertyNames"/> are
		/// specified on a persister which does not allow a custom key.</exception>
		Task BindSelectByUniqueKeyAsync(
			ISessionImplementor session,
			DbCommand selectCommand,
			IBinder binder,
			string[] suppliedPropertyNames, CancellationToken cancellationToken);
	}
}
