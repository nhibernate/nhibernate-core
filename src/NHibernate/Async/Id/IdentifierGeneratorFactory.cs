//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

using NHibernate.Engine;
using NHibernate.Type;
using NHibernate.Util;
using NHibernate.Id.Enhanced;

namespace NHibernate.Id
{
	using System.Threading.Tasks;
	using System.Threading;
	public static partial class IdentifierGeneratorFactory
	{

		/// <summary> Get the generated identifier when using identity columns</summary>
		/// <param name="rs">The <see cref="DbDataReader"/> to read the identifier value from.</param>
		/// <param name="type">The <see cref="IIdentifierType"/> the value should be converted to.</param>
		/// <param name="session">The <see cref="ISessionImplementor"/> the value is retrieved in.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns> The value for the identifier. </returns>
		public static async Task<object> GetGeneratedIdentityAsync(DbDataReader rs, IType type, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (!await (rs.ReadAsync(cancellationToken)).ConfigureAwait(false))
			{
				throw new HibernateException("The database returned no natively generated identity value");
			}
			object id = await (GetAsync(rs, type, session, cancellationToken)).ConfigureAwait(false);

			if (log.IsDebugEnabled())
			{
				log.Debug("Natively generated identity: {0}", id);
			}
			return id;
		}

		/// <summary>
		/// Gets the value of the identifier from the <see cref="DbDataReader"/> and
		/// ensures it is the correct <see cref="System.Type"/>.
		/// </summary>
		/// <param name="rs">The <see cref="DbDataReader"/> to read the identifier value from.</param>
		/// <param name="type">The <see cref="IIdentifierType"/> the value should be converted to.</param>
		/// <param name="session">The <see cref="ISessionImplementor"/> the value is retrieved in.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>
		/// The value for the identifier.
		/// </returns>
		/// <exception cref="IdentifierGenerationException">
		/// Thrown if there is any problem getting the value from the <see cref="DbDataReader"/>
		/// or with converting it to the <see cref="System.Type"/>.
		/// </exception>
		public static async Task<object> GetAsync(DbDataReader rs, IType type, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			// here is an interesting one:
			// - MsSql's @@identity returns a Decimal
			// - MySql LAST_IDENTITY() returns an Int64
			try
			{
				return await (type.NullSafeGetAsync(rs, rs.GetName(0), session, null, cancellationToken)).ConfigureAwait(false);
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception e)
			{
				throw new IdentifierGenerationException("could not retrieve identifier value", e);
			}
		}
	}
}
