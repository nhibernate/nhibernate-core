//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using NHibernate.Criterion.Lambda;
using NHibernate.Engine;
using NHibernate.Impl;
using NHibernate.Loader;
using NHibernate.SqlCommand;
using NHibernate.Transform;

namespace NHibernate.Criterion
{
	using System.Threading.Tasks;
	public abstract partial class QueryOver<TRoot> : QueryOver, IQueryOver<TRoot>
	{

		private Task<IList<TRoot>> ListAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<TRoot>>(cancellationToken);
			}
			return criteria.ListAsync<TRoot>(cancellationToken);
		}

		private Task<IList<U>> ListAsync<U>(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<U>>(cancellationToken);
			}
			return criteria.ListAsync<U>(cancellationToken);
		}

		private Task<TRoot> SingleOrDefaultAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<TRoot>(cancellationToken);
			}
			return criteria.UniqueResultAsync<TRoot>(cancellationToken);
		}

		private Task<U> SingleOrDefaultAsync<U>(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<U>(cancellationToken);
			}
			return criteria.UniqueResultAsync<U>(cancellationToken);
		}

		Task<IList<TRoot>> IQueryOver<TRoot>.ListAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<TRoot>>(cancellationToken);
			}
			return ListAsync(cancellationToken);
		}

		Task<IList<U>> IQueryOver<TRoot>.ListAsync<U>(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<U>>(cancellationToken);
			}
			return ListAsync<U>(cancellationToken);
		}

		Task<int> IQueryOver<TRoot>.RowCountAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<int>(cancellationToken);
			}
			try
			{
				return ToRowCountQuery().SingleOrDefaultAsync<int>(cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<int>(ex);
			}
		}

		Task<long> IQueryOver<TRoot>.RowCountInt64Async(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<long>(cancellationToken);
			}
			try
			{
				return ToRowCountInt64Query().SingleOrDefaultAsync<long>(cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<long>(ex);
			}
		}

		Task<TRoot> IQueryOver<TRoot>.SingleOrDefaultAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<TRoot>(cancellationToken);
			}
			return SingleOrDefaultAsync(cancellationToken);
		}

		Task<U> IQueryOver<TRoot>.SingleOrDefaultAsync<U>(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<U>(cancellationToken);
			}
			return SingleOrDefaultAsync<U>(cancellationToken);
		}
	}
}
