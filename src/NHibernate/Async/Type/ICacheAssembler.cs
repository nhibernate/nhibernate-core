//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Engine;

namespace NHibernate.Type
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface ICacheAssembler
	{
		/// <summary> Return a cacheable "disassembled" representation of the object.</summary>
		/// <param name="value">the value to cache </param>
		/// <param name="session">the session </param>
		/// <param name="owner">optional parent entity object (needed for collections) </param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns> the disassembled, deep cloned state </returns>		
		Task<object> DisassembleAsync(object value, ISessionImplementor session, object owner, CancellationToken cancellationToken);

		/// <summary> Reconstruct the object from its cached "disassembled" state.</summary>
		/// <param name="cached">the disassembled state from the cache </param>
		/// <param name="session">the session </param>
		/// <param name="owner">the parent entity object </param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns> the the object </returns>
		Task<object> AssembleAsync(object cached, ISessionImplementor session, object owner, CancellationToken cancellationToken);

		/// <summary>
		/// Called before assembling a query result set from the query cache, to allow batch fetching
		/// of entities missing from the second-level cache.
		/// </summary>
		Task BeforeAssembleAsync(object cached, ISessionImplementor session, CancellationToken cancellationToken);
	}
}