//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Collection;
using NHibernate.Collection.Generic;
using NHibernate.Engine;
using NHibernate.Persister.Collection;

namespace NHibernate.Type
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class GenericMapType<TKey, TValue> : CollectionType
	{

		public override async Task<object> ReplaceElementsAsync(object original, object target, object owner, IDictionary copyCache, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var cp = session.Factory.GetCollectionPersister(Role);

			var targetPc = target as IPersistentCollection;
			var originalPc = original as IPersistentCollection;
			var iterOriginal = (IDictionary<TKey, TValue>)original;
			var clearTargetsDirtyFlag = ShouldTargetsDirtyFlagBeCleared(targetPc, originalPc, iterOriginal);

			var result = (IDictionary<TKey, TValue>)target;
			result.Clear();

			foreach (var me in iterOriginal)
			{
				var key = (TKey)await (cp.IndexType.ReplaceAsync(me.Key, null, session, owner, copyCache, cancellationToken)).ConfigureAwait(false);
				var value = (TValue)await (cp.ElementType.ReplaceAsync(me.Value, null, session, owner, copyCache, cancellationToken)).ConfigureAwait(false);
				result[key] = value;
			}

			if (clearTargetsDirtyFlag)
			{
				targetPc.ClearDirty();
			}

			return result;
		}
	}
}
