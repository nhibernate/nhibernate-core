//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Engine;
using NHibernate.Persister.Collection;

namespace NHibernate.Loader.Collection
{
	using System.Threading.Tasks;
	using System.Threading;
	internal partial class DynamicBatchingCollectionInitializer : AbstractBatchingCollectionInitializer
	{

		public override async Task InitializeAsync(object id, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			// first, figure out how many batchable ids we have...
			object[] batch = await (session.PersistenceContext.BatchFetchQueue.GetCollectionBatchAsync(CollectionPersister, id, _maxBatchSize, cancellationToken)).ConfigureAwait(false);
			var numberOfIds = DynamicBatchingHelper.GetIdsToLoad(batch, out var idsToLoad);
			if (numberOfIds <= 1)
			{
				await (_singleKeyLoader.LoadCollectionAsync(session, id, CollectionPersister.KeyType, cancellationToken)).ConfigureAwait(false);
				return;
			}

			await (_batchLoader.LoadCollectionBatchAsync(session, idsToLoad, CollectionPersister.KeyType, cancellationToken)).ConfigureAwait(false);
		}
	}
}
