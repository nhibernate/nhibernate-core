//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using NHibernate.Cache;
using NHibernate.Engine;
using NHibernate.Persister;
using NHibernate.Persister.Entity;
using NHibernate.SqlCommand;
using NHibernate.Transform;
using NHibernate.Type;

namespace NHibernate.Loader
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface ILoader
	{

		Task<object> GetRowFromResultSetAsync(DbDataReader resultSet, ISessionImplementor session,
		                           QueryParameters queryParameters, LockMode[] lockModeArray,
		                           EntityKey optionalObjectKey, IList hydratedObjects, EntityKey[] keys,
		                           bool returnProxies, IResultTransformer forcedResultTransformer,
		                           QueryCacheResultBuilder queryCacheResultBuilder,
		                           Action<IEntityPersister, CachePutData> cacheBatchingHandler, CancellationToken cancellationToken);

		Task InitializeEntitiesAndCollectionsAsync(IList hydratedObjects, 
		                                      DbDataReader reader, 
		                                      ISessionImplementor session, 
		                                      bool readOnly,
		                                      CacheBatcher cacheBatcher, CancellationToken cancellationToken);

		/// <summary>
		/// Called by subclasses that load collections
		/// </summary>
		Task LoadCollectionAsync(ISessionImplementor session, 
		                    object id, 
		                    IType type, CancellationToken cancellationToken);

		/// <summary>
		/// Called by wrappers that batch initialize collections
		/// </summary>
		Task LoadCollectionBatchAsync(ISessionImplementor session, 
		                         object[] ids, 
		                         IType type, CancellationToken cancellationToken);
	}
}
