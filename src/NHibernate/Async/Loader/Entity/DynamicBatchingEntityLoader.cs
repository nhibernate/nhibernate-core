//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using NHibernate.Engine;
using NHibernate.Persister.Entity;

namespace NHibernate.Loader.Entity
{
	using System.Threading.Tasks;
	using System.Threading;
	internal partial class DynamicBatchingEntityLoader : AbstractBatchingEntityLoader
	{

		public override async Task<object> LoadAsync(object id, object optionalObject, ISessionImplementor session, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			object[] batch = await (session.PersistenceContext.BatchFetchQueue.GetEntityBatchAsync(Persister, id, _maxBatchSize, cancellationToken)).ConfigureAwait(false);

			var numberOfIds = DynamicBatchingHelper.GetIdsToLoad(batch, out var idsToLoad);
			if (numberOfIds <= 1)
			{
				return await (_singleKeyLoader.LoadAsync(id, optionalObject, session, cancellationToken)).ConfigureAwait(false);
			}

			QueryParameters qp = BuildQueryParameters(id, idsToLoad, optionalObject);
			IList results = await (_dynamicEntityLoader.DoEntityBatchFetchAsync(session, qp, cancellationToken)).ConfigureAwait(false);
			return GetObjectFromList(results, id, session);
		}
	}
}
