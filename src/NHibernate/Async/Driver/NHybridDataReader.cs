//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Data;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;

namespace NHibernate.Driver
{
	public partial class NHybridDataReader : DbDataReader
	{

		/// <summary>
		/// Initializes a new instance of the <see cref="NHybridDataReader"/> class.
		/// </summary>
		/// <param name="reader">The underlying DbDataReader to use.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public static Task<NHybridDataReader> CreateAsync(DbDataReader reader, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<NHybridDataReader>(cancellationToken);
			}
			return CreateAsync(reader, false, cancellationToken);
		}

		/// <summary>
		/// Initializes a new instance of the NHybridDataReader class.
		/// </summary>
		/// <param name="reader">The underlying DbDataReader to use.</param>
		/// <param name="inMemory"><see langword="true" /> if the contents of the DbDataReader should be read into memory right away.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public static async Task<NHybridDataReader> CreateAsync(DbDataReader reader, bool inMemory, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var dataReader = new NHybridDataReader();
			if (inMemory)
			{
				dataReader._reader = await (NDataReader.CreateAsync(reader, false, cancellationToken)).ConfigureAwait(false);
			}
			else
			{
				dataReader._reader = reader;
			}
			return dataReader;
		}

		/// <summary>
		/// Reads all of the contents into memory because another <see cref="DbDataReader"/>
		/// needs to be opened.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <remarks>
		/// This will result in a no op if the reader is closed or is already in memory.
		/// </remarks>
		public async Task ReadIntoMemoryAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (_reader.IsClosed == false && _reader.GetType() != typeof(NDataReader))
			{
				if (log.IsDebugEnabled())
				{
					log.Debug("Moving DbDataReader into an NDataReader.  It was converted in midstream {0}", _isMidstream);
				}
				_reader = await (NDataReader.CreateAsync(_reader, _isMidstream, cancellationToken)).ConfigureAwait(false);
			}
		}
	}
}
