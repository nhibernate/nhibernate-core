//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using NHibernate.Action;
using NHibernate.Cache;
using NHibernate.Type;

namespace NHibernate.Engine
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class ActionQueue
	{
	
		private async Task ExecuteActionsAsync(IList list, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			int size = list.Count;
			for (int i = 0; i < size; i++)
				await (ExecuteAsync((IExecutable)list[i], cancellationToken)).ConfigureAwait(false);

			list.Clear();
			await (session.Batcher.ExecuteBatchAsync(cancellationToken)).ConfigureAwait(false);
		}

		public async Task ExecuteAsync(IExecutable executable, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			try
			{
				await (executable.ExecuteAsync(cancellationToken)).ConfigureAwait(false);
			}
			finally
			{
				RegisterCleanupActions(executable);
			}
		}

		/// <summary> 
		/// Perform all currently queued entity-insertion actions.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public Task ExecuteInsertsAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return ExecuteActionsAsync(insertions, cancellationToken);
		}

		/// <summary> 
		/// Perform all currently queued actions. 
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		public async Task ExecuteActionsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (ExecuteActionsAsync(insertions, cancellationToken)).ConfigureAwait(false);
			await (ExecuteActionsAsync(updates, cancellationToken)).ConfigureAwait(false);
			await (ExecuteActionsAsync(collectionRemovals, cancellationToken)).ConfigureAwait(false);
			await (ExecuteActionsAsync(collectionUpdates, cancellationToken)).ConfigureAwait(false);
			await (ExecuteActionsAsync(collectionCreations, cancellationToken)).ConfigureAwait(false);
			await (ExecuteActionsAsync(deletions, cancellationToken)).ConfigureAwait(false);
		}
	}
}
