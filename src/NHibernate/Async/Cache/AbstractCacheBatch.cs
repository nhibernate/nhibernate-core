//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Text;
using NHibernate.Engine;

namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	using System.Threading;
	internal abstract partial class AbstractCacheBatch
	{

		public abstract Task ExecuteAsync(CancellationToken cancellationToken);
	}

	internal abstract partial class AbstractCacheBatch<TData> : AbstractCacheBatch
	{

		public override sealed Task ExecuteAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				return ExecuteAsync(_batch.ToArray(), cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		protected abstract Task ExecuteAsync(TData[] data, CancellationToken cancellationToken);
	}
}
