//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	using System.Threading;
	internal partial class ObsoleteCacheWrapper : CacheBase
	{

		public override Task<object> GetAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _cache.GetAsync(key, cancellationToken);
		}

		public override Task PutAsync(object key, object value, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _cache.PutAsync(key, value, cancellationToken);
		}

		public override Task RemoveAsync(object key, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _cache.RemoveAsync(key, cancellationToken);
		}

		public override Task ClearAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _cache.ClearAsync(cancellationToken);
		}

		public override async Task<object> LockAsync(object key, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (_cache.LockAsync(key, cancellationToken)).ConfigureAwait(false);
			return null;
		}

		public override Task UnlockAsync(object key, object lockValue, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			return _cache.UnlockAsync(key, cancellationToken);
		}
	}
}
