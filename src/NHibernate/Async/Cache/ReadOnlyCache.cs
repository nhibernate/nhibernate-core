//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NHibernate.Cache.Access;

namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class ReadOnlyCache : ICacheConcurrencyStrategy
	{

		public async Task<object> GetAsync(CacheKey key, long timestamp)
		{
			object result = await (cache.GetAsync(key)).ConfigureAwait(false);
			if (result != null && log.IsDebugEnabled)
			{
				log.Debug("Cache hit: " + key);
			}
			return result;	
		}

		/// <summary>
		/// Unsupported!
		/// </summary>
		public Task<ISoftLock> LockAsync(CacheKey key, object version)
		{
			try
			{
				return Task.FromResult<ISoftLock>(Lock(key, version));
			}
			catch (Exception ex)
			{
				return Task.FromException<ISoftLock>(ex);
			}
		}

		public async Task<bool> PutAsync(CacheKey key, object value, long timestamp, object version, IComparer versionComparator,
						bool minimalPut)
		{
			if (timestamp == long.MinValue)
			{
				// MinValue means cache is disabled
				return false;
			}

			if (minimalPut && await (cache.GetAsync(key)).ConfigureAwait(false) != null)
			{
				if (log.IsDebugEnabled)
				{
					log.Debug("item already cached: " + key);
				}
				return false;
			}
			if (log.IsDebugEnabled)
			{
				log.Debug("Caching: " + key);
			}
			await (cache.PutAsync(key, value)).ConfigureAwait(false);
			return true;
		}

		/// <summary>
		/// Unsupported!
		/// </summary>
		public Task ReleaseAsync(CacheKey key, ISoftLock @lock)
		{
			try
			{
				Release(key, @lock);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task ClearAsync()
		{
			return cache.ClearAsync();
		}

		public Task RemoveAsync(CacheKey key)
		{
			return cache.RemoveAsync(key);
		}

		/// <summary>
		/// Unsupported!
		/// </summary>
		public Task<bool> AfterUpdateAsync(CacheKey key, object value, object version, ISoftLock @lock)
		{
			try
			{
				return Task.FromResult<bool>(AfterUpdate(key, value, version, @lock));
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		/// <summary>
		/// Do nothing.
		/// </summary>
		public Task<bool> AfterInsertAsync(CacheKey key, object value, object version)
		{
			try
			{
				return Task.FromResult<bool>(AfterInsert(key, value, version));
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}

		/// <summary>
		/// Do nothing.
		/// </summary>
		public Task EvictAsync(CacheKey key)
		{
			try
			{
				Evict(key);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
			// NOOP
		}

		/// <summary>
		/// Unsupported!
		/// </summary>
		public Task<bool> UpdateAsync(CacheKey key, object value, object currentVersion, object previousVersion)
		{
			try
			{
				return Task.FromResult<bool>(Update(key, value, currentVersion, previousVersion));
			}
			catch (Exception ex)
			{
				return Task.FromException<bool>(ex);
			}
		}
	}
}
