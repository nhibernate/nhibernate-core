//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial interface ICache
	{
		/// <summary>
		/// Get the object from the Cache
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		Task<object> GetAsync(object key);

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <param name="value"></param>
		Task PutAsync(object key, object value);

		/// <summary>
		/// Remove an item from the Cache.
		/// </summary>
		/// <param name="key">The Key of the Item in the Cache to remove.</param>
		/// <exception cref="CacheException"></exception>
		Task RemoveAsync(object key);

		/// <summary>
		/// Clear the Cache
		/// </summary>
		/// <exception cref="CacheException"></exception>
		Task ClearAsync();

		/// <summary>
		/// If this is a clustered cache, lock the item
		/// </summary>
		/// <param name="key">The Key of the Item in the Cache to lock.</param>
		/// <exception cref="CacheException"></exception>
		Task LockAsync(object key);

		/// <summary>
		/// If this is a clustered cache, unlock the item
		/// </summary>
		/// <param name="key">The Key of the Item in the Cache to unlock.</param>
		/// <exception cref="CacheException"></exception>
		Task UnlockAsync(object key);
	}
}