//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Text;
using NHibernate.Cache.Entry;

namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface IBatchableCacheConcurrencyStrategy : ICacheConcurrencyStrategy
	{
		/// <summary>
		/// Attempt to retrieve multiple objects from the Cache
		/// </summary>
		/// <param name="keys">The keys (id) of the objects to get out of the Cache.</param>
		/// <param name="timestamp">A timestamp prior to the transaction start time</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>An array of cached objects or <see langword="null" /></returns>
		/// <exception cref="CacheException"></exception>
		Task<object[]> GetManyAsync(CacheKey[] keys, long timestamp, CancellationToken cancellationToken);

		/// <summary>
		/// Attempt to cache objects, after loading them from the database.
		/// </summary>
		/// <param name="keys">The keys (id) of the objects to put in the Cache.</param>
		/// <param name="values">The objects to put in the cache.</param>
		/// <param name="timestamp">A timestamp prior to the transaction start time.</param>
		/// <param name="versions">The version numbers of the objects we are putting.</param>
		/// <param name="versionComparers">The comparers to be used to compare version numbers</param>
		/// <param name="minimalPuts">Indicates that the cache should avoid a put if the item is already cached.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns><see langword="true" /> if the objects were successfully cached.</returns>
		/// <exception cref="CacheException"></exception>
		Task<bool[]> PutManyAsync(CacheKey[] keys, object[] values, long timestamp, object[] versions, IComparer[] versionComparers,
								  bool[] minimalPuts, CancellationToken cancellationToken);
	}
}
