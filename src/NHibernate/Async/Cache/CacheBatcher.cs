//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Diagnostics;
using NHibernate.Engine;
using NHibernate.Persister.Collection;
using NHibernate.Persister.Entity;

namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	using System.Threading;
	public sealed partial class CacheBatcher
	{

		/// <summary>
		/// Adds a put operation to the batch. If the batch size reached the persister batch
		/// size, the batch will be executed.
		/// </summary>
		/// <param name="persister">The entity persister.</param>
		/// <param name="data">The data to put in the cache.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		internal async Task AddToBatchAsync(IEntityPersister persister, CachePutData data, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (ShouldExecuteBatch(persister, _putBatch))
			{
				await (ExecuteBatchAsync(cancellationToken)).ConfigureAwait(false);
				_currentPersister = persister;
				_currentBatch = _putBatch = new CachePutBatch(_session, persister.Cache);
			}
			if (Log.IsDebugEnabled())
			{
				Log.Debug("Adding a put operation to batch for entity {0} and key {1}", persister.EntityName, data.Key);
			}
			_putBatch.Add(data);
		}

		/// <summary>
		/// Adds a put operation to the batch. If the batch size reached the persister batch
		/// size, the batch will be executed.
		/// </summary>
		/// <param name="persister">The collection persister.</param>
		/// <param name="data">The data to put in the cache.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		internal async Task AddToBatchAsync(ICollectionPersister persister, CachePutData data, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (ShouldExecuteBatch(persister, _putBatch))
			{
				await (ExecuteBatchAsync(cancellationToken)).ConfigureAwait(false);
				_currentPersister = persister;
				_currentBatch = _putBatch = new CachePutBatch(_session, persister.Cache);
			}
			if (Log.IsDebugEnabled())
			{
				Log.Debug("Adding a put operation to batch for collection role {0} and key {1}", persister.Role, data.Key);
			}
			_putBatch.Add(data);
		}

		/// <summary>
		/// Executes the current batch.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		internal async Task ExecuteBatchAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (_currentBatch == null || _currentBatch.BatchSize == 0)
			{
				return;
			}

			try
			{
				Stopwatch duration = null;
				if (Log.IsDebugEnabled())
				{
					duration = Stopwatch.StartNew();
				}
				await (_currentBatch.ExecuteAsync(cancellationToken)).ConfigureAwait(false);
				if (Log.IsDebugEnabled() && duration != null)
				{
					Log.Debug("ExecuteBatch for {0} keys took {1} ms", _currentBatch.BatchSize, duration.ElapsedMilliseconds);
				}
			}
			finally
			{
				Cleanup();
			}
		}
	}
}
