//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Transform;

namespace NHibernate.Impl
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class FutureBatch<TQueryApproach, TMultiApproach>
	{

		private async Task<IList> GetResultsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (results != null)
				return results;

			var multiApproach = CreateMultiApproach(isCacheable, cacheRegion);
			var needTransformer = false;
			foreach (var query in queries)
			{
				AddTo(multiApproach, query.Query, query.ResultType);
				if (query.Future?.ExecuteOnEval != null)
					needTransformer = true;
			}

			if (needTransformer)
				AddResultTransformer(
					multiApproach, 
					new FutureResultsTransformer(queries));

			results = await (GetResultsFromAsync(multiApproach, cancellationToken)).ConfigureAwait(false);
			ClearCurrentFutureBatch();
			return results;
		}

		private async Task<IEnumerable<TResult>> GetCurrentResultAsync<TResult>(int currentIndex, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			return ((IList) (await (GetResultsAsync(cancellationToken)).ConfigureAwait(false))[currentIndex]).Cast<TResult>();
		}
		protected abstract Task<IList> GetResultsFromAsync(TMultiApproach multiApproach, CancellationToken cancellationToken);
	}
}
