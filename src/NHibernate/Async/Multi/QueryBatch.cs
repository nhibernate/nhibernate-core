//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using NHibernate.Driver;
using NHibernate.Engine;
using NHibernate.Exceptions;

namespace NHibernate.Multi
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class QueryBatch : IQueryBatch
	{

		/// <inheritdoc />
		public async Task ExecuteAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (_queries.Count == 0)
				return;
			using (Session.BeginProcess())
			{
				var sessionFlushMode = Session.FlushMode;
				if (FlushMode.HasValue)
					Session.FlushMode = FlushMode.Value;
				try
				{
					Init();

					if (!Session.Factory.ConnectionProvider.Driver.SupportsMultipleQueries)
					{
						foreach (var query in _queries)
						{
							await (query.ExecuteNonBatchedAsync(cancellationToken)).ConfigureAwait(false);
						}

						return;
					}

					await (ExecuteBatchedAsync(cancellationToken)).ConfigureAwait(false);
				}
				finally
				{
					if (_autoReset)
					{
						_queries.Clear();
						_queriesByKey.Clear();
					}
					else
						_executed = true;

					if (FlushMode.HasValue)
						Session.FlushMode = sessionFlushMode;
				}
			}
		}

		/// <inheritdoc />
		public Task<IList<TResult>> GetResultAsync<TResult>(int queryIndex, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<TResult>>(cancellationToken);
			}
			return GetResultsAsync<TResult>(_queries[queryIndex], cancellationToken);
		}

		/// <inheritdoc />
		public Task<IList<TResult>> GetResultAsync<TResult>(string querykey, CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<IList<TResult>>(cancellationToken);
			}
			return GetResultsAsync<TResult>(_queriesByKey[querykey], cancellationToken);
		}

		private async Task<IList<TResult>> GetResultsAsync<TResult>(IQueryBatchItem query, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (!_executed)
				await (ExecuteAsync(cancellationToken)).ConfigureAwait(false);
			return ((IQueryBatchItem<TResult>) query).GetResults();
		}

		private async Task CombineQueriesAsync(IResultSetsCommand resultSetsCommand, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			foreach (var multiSource in _queries)
			foreach (var cmd in await (multiSource.GetCommandsAsync(cancellationToken)).ConfigureAwait(false))
			{
				resultSetsCommand.Append(cmd);
			}
		}

		protected async Task ExecuteBatchedAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var querySpaces = new HashSet<string>(_queries.SelectMany(t => t.GetQuerySpaces()));
			if (querySpaces.Count > 0)
			{
				await (Session.AutoFlushIfRequiredAsync(querySpaces, cancellationToken)).ConfigureAwait(false);
			}

			var resultSetsCommand = Session.Factory.ConnectionProvider.Driver.GetResultSetsCommand(Session);
			// CombineQueries queries the second level cache, which may contain stale data in regard to
			// the session changes. For having them invalidated, auto-flush must have been handled before
			// calling CombineQueries.
			await (CombineQueriesAsync(resultSetsCommand, cancellationToken)).ConfigureAwait(false);

			bool statsEnabled = Session.Factory.Statistics.IsStatisticsEnabled;
			Stopwatch stopWatch = null;
			if (statsEnabled)
			{
				stopWatch = new Stopwatch();
				stopWatch.Start();
			}

			if (Log.IsDebugEnabled())
			{
				Log.Debug("Multi query with {0} queries: {1}", _queries.Count, resultSetsCommand.Sql);
			}

			int rowCount = 0;
			try
			{
				if (resultSetsCommand.HasQueries)
				{
					using (var reader = await (resultSetsCommand.GetReaderAsync(Timeout, cancellationToken)).ConfigureAwait(false))
					{
						foreach (var multiSource in _queries)
						{
							rowCount += await (multiSource.ProcessResultsSetAsync(reader, cancellationToken)).ConfigureAwait(false);
						}
					}
				}

				foreach (var multiSource in _queries)
				{
					await (multiSource.ProcessResultsAsync(cancellationToken)).ConfigureAwait(false);
				}
			}
			catch (OperationCanceledException) { throw; }
			catch (Exception sqle)
			{
				Log.Error(sqle, "Failed to execute multi query: [{0}]", resultSetsCommand.Sql);
				throw ADOExceptionHelper.Convert(
					Session.Factory.SQLExceptionConverter,
					sqle,
					"Failed to execute multi query",
					resultSetsCommand.Sql);
			}

			if (statsEnabled)
			{
				stopWatch.Stop();
				Session.Factory.StatisticsImplementor.QueryExecuted(
					$"{_queries.Count} queries",
					rowCount,
					stopWatch.Elapsed);
			}
		}
	}
}
