//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;

namespace NHibernate.Multi
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface IQueryBatch
	{
		/// <summary>
		/// Executes the batch.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task ExecuteAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Gets a query result, triggering execution of the batch if it was not already executed.
		/// </summary>
		/// <param name="queryIndex">The index of the query for which results are to be obtained.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <typeparam name="TResult">The type of the result elements of the query.</typeparam>
		/// <returns>A query result.</returns>
		/// <remarks><paramref name="queryIndex"/> is <c>0</c> based and matches the order in which queries have been
		/// added into the batch.</remarks>
		Task<IList<TResult>> GetResultAsync<TResult>(int queryIndex, CancellationToken cancellationToken);

		/// <summary>
		/// Gets a query result, triggering execution of the batch if it was not already executed.
		/// </summary>
		/// <param name="querykey">The key of the query for which results are to be obtained.</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <typeparam name="TResult">The type of the result elements of the query.</typeparam>
		/// <returns>A query result.</returns>
		Task<IList<TResult>> GetResultAsync<TResult>(string querykey, CancellationToken cancellationToken);
	}
}
