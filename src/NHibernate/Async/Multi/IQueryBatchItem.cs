//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;
using NHibernate.Engine;
using NHibernate.SqlCommand;

namespace NHibernate.Multi
{
	using System.Threading.Tasks;
	using System.Threading;

	public partial interface IQueryBatchItem
	{
		
		/// <summary>
		/// Returns commands generated by query
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task<IEnumerable<ISqlCommand>> GetCommandsAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Executed after all commands in batch are processed
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task ProcessResultsAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Immediate query execution in case the dialect does not support batches
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task ExecuteNonBatchedAsync(CancellationToken cancellationToken);
	}
}
