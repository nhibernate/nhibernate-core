//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using NHibernate.Cache;
using NHibernate.Engine;
using NHibernate.SqlCommand;
using NHibernate.Util;

namespace NHibernate.Multi
{
	using System.Threading.Tasks;
	using System.Threading;
	public abstract partial class QueryBatchItemBase<TResult> : IQueryBatchItem<TResult>
	{

		/// <summary>
		/// Gets the commands to execute for getting the not-already cached results of this query. Does retrieves
		/// already cached results by side-effect.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>The commands for obtaining the results not already cached.</returns>
		public async Task<IEnumerable<ISqlCommand>> GetCommandsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var yields = new List<ISqlCommand>();
			for (var index = 0; index < _queryInfos.Count; index++)
			{
				var qi = _queryInfos[index];

				if (qi.Loader.IsCacheable(qi.Parameters))
				{
					// Check if the results are available in the cache
					qi.Cache = Session.Factory.GetQueryCache(qi.Parameters.CacheRegion);
					qi.CacheKey = qi.Loader.GenerateQueryKey(Session, qi.Parameters);
					var resultsFromCache = await (qi.Loader.GetResultFromQueryCacheAsync(Session, qi.Parameters, qi.QuerySpaces, qi.Cache, qi.CacheKey, cancellationToken)).ConfigureAwait(false);

					if (resultsFromCache != null)
					{
						// Cached results available, skip the command for them and stores them.
						qi.Cache = null;
						_loaderResults[index] = resultsFromCache;
						continue;
					}
				}
			yields.Add(qi.Loader.CreateSqlCommand(qi.Parameters, Session));
			}
			return yields;
		}

		public async Task ProcessResultsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			for (int i = 0; i < _queryInfos.Count; i++)
			{
				var queryInfo = _queryInfos[i];
				if (_subselectResultKeys[i] != null)
				{
					queryInfo.Loader.CreateSubselects(_subselectResultKeys[i], queryInfo.Parameters, Session);
				}

				// Handle cache if cacheable.
				if (queryInfo.Cache != null)
				{
					await (queryInfo.Loader.PutResultInQueryCacheAsync(Session, queryInfo.Parameters, queryInfo.Cache, queryInfo.CacheKey, _loaderResults[i], cancellationToken)).ConfigureAwait(false);
				}
			}
			AfterLoadCallback?.Invoke(GetResults());
		}

		public async Task ExecuteNonBatchedAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			_finalResults = await (GetResultsNonBatchedAsync(cancellationToken)).ConfigureAwait(false);
			AfterLoadCallback?.Invoke(_finalResults);
		}

		protected abstract Task<IList<TResult>> GetResultsNonBatchedAsync(CancellationToken cancellationToken);
	}
}
