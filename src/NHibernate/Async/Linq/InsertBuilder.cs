//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using System.Linq.Expressions;

namespace NHibernate.Linq
{
	using System.Threading.Tasks;
	using System.Threading;

	public partial class InsertBuilder<TSource, TTarget>
	{

		/// <summary>
		/// Insert the entities. The insert operation is performed in the database without reading the entities out of it. Will use
		/// <c>INSERT INTO [...] SELECT FROM [...]</c> in the database.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>The number of inserted entities.</returns>
		public Task<int> InsertAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<int>(cancellationToken);
			}
			try
			{
				return _source.ExecuteInsertAsync<TSource, TTarget>(DmlExpressionRewriter.PrepareExpression<TSource>(_source.Expression, _assignments.List), cancellationToken);
			}
			catch (Exception ex)
			{
				return Task.FromException<int>(ex);
			}
		}
	}
}