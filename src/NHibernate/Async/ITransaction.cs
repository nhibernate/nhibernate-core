//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data;
using System.Data.Common;
using NHibernate.Transaction;

namespace NHibernate
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface ITransaction : IDisposable
	{

		/// <summary>
		/// Flush the associated <c>ISession</c> and end the unit of work.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <remarks>
		/// This method will commit the underlying transaction if and only if the transaction
		/// was initiated by this object.
		/// </remarks>
		Task CommitAsync(CancellationToken cancellationToken = default(CancellationToken));

		/// <summary>
		/// Force the underlying transaction to roll back.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		Task RollbackAsync(CancellationToken cancellationToken = default(CancellationToken));
	}
}
