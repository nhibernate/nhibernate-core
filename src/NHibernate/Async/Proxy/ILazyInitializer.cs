//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Engine;

namespace NHibernate.Proxy
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial interface ILazyInitializer
	{
		/// <summary>
		/// Perform an ImmediateLoad of the actual object for the Proxy.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <exception cref="HibernateException">
		/// Thrown when the Proxy has no Session or the Session is closed or disconnected.
		/// </exception>
		Task InitializeAsync(CancellationToken cancellationToken);

		/// <summary>
		/// Return the underlying persistent object, initializing if necessary.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>The persistent object this proxy is proxying.</returns>
		Task<object> GetImplementationAsync(CancellationToken cancellationToken);
	}
}
