using System;
using System.Collections.Generic;

namespace NHibernate.Test.NHSpecificTest.NH1159
{
	/// <summary>
	///	Generated by MyGeneration using the NHibernate Object Mapping template
	/// </summary>
	[Serializable]
	public class ContactTitle
	{
		#region Private Members
		private bool isChanged;

		private Int64 id;
		private IList<Contact> contactList;
		private string descr;
		#endregion

		#region Default ( Empty ) Class Constuctor
		/// <summary>
		/// default constructor
		/// </summary>
		public ContactTitle()
		{
			id = 0;
			contactList = new List<Contact>();
			descr = String.Empty;
		}
		#endregion // End of Default ( Empty ) Class Constuctor

		#region Required Fields Only Constructor
		/// <summary>
		/// required (not null) fields only constructor
		/// </summary>
		public ContactTitle(
			string descr)
			: this()
		{
			this.descr = descr;
		}
		#endregion // End Required Fields Only Constructor

		#region Public Properties

		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 Id
		{
			get { return id; }
			set
			{
				isChanged |= (id != value);
				id = value;
			}
		}

		public virtual IList<Contact> ContactList
		{
			get
			{
				return contactList;
			}
			set
			{
				contactList = value;
			}
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual string Descr
		{
			get { return descr; }

			set
			{
				if (value == null)
					throw new ArgumentOutOfRangeException("Null value not allowed for Descr", value, "null");

				if (value.Length > 50)
					throw new ArgumentOutOfRangeException("Invalid value for Descr", value, value.ToString());

				isChanged |= (descr != value); descr = value;
			}
		}

		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return isChanged; }
		}

		#endregion

		#region Equals And HashCode Overrides
		/// <summary>
		/// local implementation of Equals based on unique value members
		/// </summary>
		public override bool Equals(object obj)
		{
			if (this == obj) return true;
			if ((obj == null) || (obj.GetType() != this.GetType())) return false;
			ContactTitle castObj = (ContactTitle)obj;
			return (castObj != null) &&
				(this.id == castObj.Id);
		}

		/// <summary>
		/// local implementation of GetHashCode based on unique value members
		/// </summary>
		public override int GetHashCode()
		{
			int hash = 57;
			hash = 27 * hash * id.GetHashCode();
			return hash;
		}
		#endregion

		public override string ToString()
		{
			return id.ToString() + " " + descr;
		}
	}
}
