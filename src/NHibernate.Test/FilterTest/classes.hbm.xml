<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2"
				   assembly="NHibernate.Test" 
				   namespace="NHibernate.Test.FilterTest">

	<class name="Category" table="CATEGORY">
		<id name="Id" column="CAT_ID" >
			<generator class="native"/>
		</id>

		<property name="Name" type="string"/>
		<property name="EffectiveStartDate" column="eff_start_dt" type="Date"/>
		<property name="EffectiveEndDate" column="eff_end_dt" type="Date"/>

		<set cascade="none" inverse="true" name="Products" table="PROD_CAT">
			<key column="CAT_ID"/>
			<many-to-many column="PROD_ID" class="Product"/>
		</set>

		<filter name="effectiveDate" condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>

	</class>

	<class name="Department" table="DEPARTMENT">
		<id name="Id" column="DEPT_ID" type="long">
			<generator class="native"/>
		</id>

		<property name="Name" column="REG" type="string"/>

		<set name="Salespersons" cascade="save-update" inverse="true">
			<key column="DEPT_ID"/>
			<one-to-many class="Salesperson"/>
			<filter name="seniorSalespersons"><![CDATA[`hire dt` < :asOfDate]]></filter>
		</set>
	</class>

	<class name="LineItem" table="ORDER_ITEM">
		<id name="Id" column="ITEM_ID" >
			<generator class="native"/>
		</id>

		<many-to-one name="Order" class="Order" column="ORDER_ID" cascade="none"/>
		<property name="Sequence" column="SEQ" type="int"/>
		<many-to-one name="Product" class="Product" column="PRODUCT_ID" cascade="none"/>
		<property name="Quantity" column="AMT" type="long"/>
	</class>

	<class name="Order" table="T_ORDER">
		<id name="Id" column="ORDER_ID" type="long">
			<generator class="native"/>
		</id>

		<property name="Region" column="REG" type="string"/>
		<property name="Buyer" column="BUYER" type="string"/>
		<property name="PlacementDate" column="`ord dt`" type="Date"/>
		<property name="FulfillmentDate" column="`close dt`" type="Date"/>

		<many-to-one name="Salesperson" class="Salesperson" column="SALES_PERSON_ID"/>

		<list cascade="all-delete-orphan" inverse="true" name="LineItems">
			<key column="ORDER_ID"/>
			<index column="SEQ"/>
			<one-to-many class="LineItem"/>
		</list>

		<filter name="region" condition="REG = :region"/>
		<filter name="fulfilledOrders"><![CDATA[`close dt` < :asOfDate]]></filter>
	</class>

	<class name="Product" table="PRODUCT">
		<id name="Id" column="PROD_ID" >
			<generator class="native"/>
		</id>

		<property name="Name" type="string"/>
		<property name="StockNumber" column="STOCK_NUM" type="int"/>

		<property name="EffectiveStartDate" column="eff_start_dt" type="Date"/>
		<property name="EffectiveEndDate" column="eff_end_dt" type="Date"/>

		<property name="ProductGuid"/>

		<set cascade="none" inverse="true" name="OrderLineItems">
			<key column="PROD_ID"/>
			<one-to-many class="LineItem"/>
		</set>

		<set cascade="all" inverse="false" name="Categories" fetch="join" table="PROD_CAT" >
			<key column="PROD_ID"/>
			<many-to-many class="Category" column="CAT_ID" fetch="join" >
				<filter name="effectiveDate" condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
				<filter name="cat" condition="CAT_ID = :catId"/>
			</many-to-many>
		</set>

		<filter name="effectiveDate" condition=":asOfDate BETWEEN eff_start_dt and eff_end_dt"/>
		<filter name="guidlist" condition="ProductGuid IN (:guids)"/>
	</class>

	<class name="Salesperson" table="SALES_PERSON">
		<id name="Id" column="SALES_PERSON_ID" >
			<generator class="native"/>
		</id>

		<property name="Name" column="NAME" type="string"/>
		<property name="Region" column="REG" type="string"/>

		<many-to-one name="Department" cascade="none" class="Department" column="DEPT_ID"/>

		<property name="HireDate" column="`hire dt`" type="Date"/>

		<set name="Orders" cascade="none" inverse="true" fetch="join">
			<key column="SALES_PERSON_ID"/>
			<one-to-many class="Order"/>
			<filter name="region" condition="REG = :region"/>
			<filter name="fulfilledOrders"><![CDATA[`close dt` < :asOfDate]]></filter>
		</set>

		<filter name="region" condition="REG = :region"/>
		<filter name="regionlist" condition="REG IN (:regions)"/>
	</class>

</hibernate-mapping>
