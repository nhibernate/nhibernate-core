//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Type;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.TypesTest
{
	using System.Threading.Tasks;
	[TestFixture]
	public class StringTypeFixtureAsync : TypeFixtureBase
	{
		protected override string TypeName
		{
			get { return "String"; }
		}

		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			{
				s.CreateQuery("delete from StringClass").ExecuteUpdate();
			}
		}

		[Test]
		public async Task InsertNullValueAsync()
		{
			using (ISession s = OpenSession())
			{
				StringClass b = new StringClass();
				b.StringValue = null;
				await (s.SaveAsync(b));
				await (s.FlushAsync());
			}

			using (ISession s = OpenSession())
			{
				StringClass b = (StringClass) await (s.CreateCriteria(typeof(StringClass)).UniqueResultAsync());
				Assert.That(b.StringValue, Is.Null);
			}
		}

		[Test]
		public async Task InsertUnicodeValueAsync()
		{
			const string unicode = "길동 최고 新闻 地图 ます プル éèêëîïôöõàâäåãçùûü бджзй αβ ខគឃ ضذخ";
			using (var s = OpenSession())
			{
				var b = new StringClass { StringValue = unicode };
				await (s.SaveAsync(b));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var b = await (s.Query<StringClass>().SingleAsync());
				Assert.That(b.StringValue, Is.EqualTo(unicode));
			}
		}
	}
}
