//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Data;
using System.Xml.Linq;
using NHibernate.Driver;
using NHibernate.Engine;
using NHibernate.SqlTypes;
using NHibernate.Type;
using NUnit.Framework;

namespace NHibernate.Test.TypesTest
{
  using System.Threading.Tasks;
  [TestFixture]
	public class XDocTypeFixtureAsync : TypeFixtureBase
	{
		protected override string TypeName
		{
			get { return "XDoc"; }
		}

		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return TestDialect.SupportsSqlType(new SqlType(DbType.Xml));
		}

		protected override bool AppliesTo(ISessionFactoryImplementor factory)
		{
			// No Xml support with Odbc (and likely OleDb too).
			return factory.ConnectionProvider.Driver is SqlClientDriver;
		}

		[Test]
		public async Task ReadWriteAsync()
		{
			using (var s = OpenSession())
			{
				var docEntity = new XDocClass {Id = 1 };
		docEntity.Document = XDocument.Parse("<MyNode>my Text</MyNode>");
				await (s.SaveAsync(docEntity));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var docEntity = await (s.GetAsync<XDocClass>(1));
				var document = docEntity.Document;
				Assert.That(document, Is.Not.Null);
				Assert.That(document.Document.Root.ToString(SaveOptions.DisableFormatting), Does.Contain("<MyNode>my Text</MyNode>"));
			  var xmlElement = new XElement("Pizza", new XAttribute("temp", "calda"));
		document.Document.Root.Add(xmlElement);
				await (s.SaveAsync(docEntity));
				await (s.FlushAsync());
			}
			using (var s = OpenSession())
			{
				var docEntity = await (s.GetAsync<XDocClass>(1));
		var document = docEntity.Document;
		Assert.That(document.Document.Root.ToString(SaveOptions.DisableFormatting), Does.Contain("Pizza temp=\"calda\""));
				await (s.DeleteAsync(docEntity));
				await (s.FlushAsync());
			}
		}

		[Test]
		public async Task InsertNullValueAsync()
		{
			using (ISession s = OpenSession())
			{
				var docEntity = new XDocClass { Id = 1 };
				docEntity.Document = null;
				await (s.SaveAsync(docEntity));
				await (s.FlushAsync());
			}

			using (ISession s = OpenSession())
			{
				var docEntity = await (s.GetAsync<XDocClass>(1));
				Assert.That(docEntity.Document, Is.Null);
				await (s.DeleteAsync(docEntity));
				await (s.FlushAsync());
			}
		}
	}
}
