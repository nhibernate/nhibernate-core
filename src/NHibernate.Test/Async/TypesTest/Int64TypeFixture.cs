//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Type;
using NUnit.Framework;
using NHibernate.Engine;

namespace NHibernate.Test.TypesTest
{
	using System.Threading.Tasks;
	using System.Threading;
	/// <summary>
	/// Summary description for Int64TypeFixture.
	/// </summary>
	[TestFixture]
	public class Int64TypeFixtureAsync: TestCase
	{
		[Test]
		public async Task NextAsync()
		{
			Int64Type type = NHibernateUtil.Int64;
			object current = (long)1;
			object next = await (type.NextAsync(current, null, CancellationToken.None));

			Assert.IsTrue(next is Int64, "Next should be Int64");
			Assert.AreEqual((long)2, (long)next, "current should have been incremented to 2");
		}

		[Test]
		public async Task SeedAsync()
		{
			Int64Type type = NHibernateUtil.Int64;
			Assert.IsTrue(await (type.SeedAsync(null, CancellationToken.None)) is Int64, "seed should be int64");
		}

		[Test]
		public async Task NullableWrapperDirtyAsync()
		{
			Int64Type type = NHibernateUtil.Int64;

			long? nullLong = null;
			long? valueLong = 5;
			long? fiveAgain = 5;
			using (ISession s = OpenSession())
			{
				Assert.IsTrue(await (type.IsDirtyAsync(nullLong, valueLong, (ISessionImplementor)s, CancellationToken.None)), "should be dirty - null to '5'");
				Assert.IsFalse(await (type.IsDirtyAsync(valueLong, fiveAgain, (ISessionImplementor)s, CancellationToken.None)), "should not be dirty - 5 to 5");
			}
		}

		protected override string[] Mappings => Array.Empty<string>();
	}
}
