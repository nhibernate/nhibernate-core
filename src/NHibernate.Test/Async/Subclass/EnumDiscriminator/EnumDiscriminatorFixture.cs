//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.Subclass.EnumDiscriminator
{
	using System.Threading.Tasks;
	[TestFixture]
	public class EnumDiscriminatorFixtureAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override string[] Mappings
		{
			get { return new String[] {"Subclass.EnumDiscriminator.EnumDiscriminator.hbm.xml"}; }
		}

		[Test]
		public async Task PersistsDefaultDiscriminatorValueAsync()
		{
			Foo foo = new Foo();
			foo.Id = 1;

			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(foo));
				await (s.FlushAsync());
			}

			using (ISession s = OpenSession())
			{
				Baz baz = await (s.LoadAsync<Baz>(1L));
				Assert.AreEqual(Colors.Green, baz.Color);
			}
		}

		[Test]
		public async Task CanConvertOneTypeToAnotherAsync()
		{
			Foo foo = new Foo();
			foo.Id = 1;

			using (ISession s = OpenSession())
			{
				await (s.SaveAsync(foo));
				await (s.FlushAsync());
			}

			using (ISession s = OpenSession())
			{
				Baz baz = await (s.LoadAsync<Baz>(1L));
				baz.Color = Colors.Blue;
				await (s.SaveAsync(baz));
				await (s.FlushAsync());
			}

			using (ISession s = OpenSession())
			{
				Bar bar = await (s.LoadAsync<Bar>(1L));
			}
		}

		protected override void OnTearDown()
		{
			using (ISession s = OpenSession())
			{
				s.Delete("from Baz");
				s.Flush();
			}
		}
	}
}