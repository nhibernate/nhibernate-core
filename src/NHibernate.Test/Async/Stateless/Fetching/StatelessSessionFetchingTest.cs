//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using log4net;
using NUnit.Framework;

namespace NHibernate.Test.Stateless.Fetching
{
	using System.Threading;
	[TestFixture]
	public class StatelessSessionFetchingTestAsync : TestCase
	{

		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override string[] Mappings
		{
			get
			{
				return new[] { "Stateless.Fetching.Mappings.hbm.xml" };
			}
		}

		[Test]
		public async System.Threading.Tasks.Task DynamicFetchAsync()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				DateTime now = DateTime.Now;
				User me = new User("me");
				User you = new User("you");
				Resource yourClock = new Resource("clock", you);
				Task task = new Task(me, "clean", yourClock, now); // :)
				await (s.SaveAsync(me));
				await (s.SaveAsync(you));
				await (s.SaveAsync(yourClock));
				await (s.SaveAsync(task));
				await (tx.CommitAsync());
			}

			using (IStatelessSession ss = Sfi.OpenStatelessSession())
			using (ITransaction tx = ss.BeginTransaction())
			{
				ss.BeginTransaction();
				Task taskRef =
					(Task)await (ss.CreateQuery("from Task t join fetch t.Resource join fetch t.User").UniqueResultAsync());
				Assert.That(taskRef, Is.Not.Null);
				Assert.That(NHibernateUtil.IsInitialized(taskRef), Is.True);
				Assert.That(NHibernateUtil.IsInitialized(taskRef.User), Is.True);
				Assert.That(NHibernateUtil.IsInitialized(taskRef.Resource), Is.True);
				Assert.That(NHibernateUtil.IsInitialized(taskRef.Resource.Owner), Is.False);
				await (tx.CommitAsync());
			}

			await (cleanupAsync());
		}

		private async System.Threading.Tasks.Task cleanupAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				s.BeginTransaction();
				await (s.CreateQuery("delete Task").ExecuteUpdateAsync(cancellationToken));
				await (s.CreateQuery("delete Resource").ExecuteUpdateAsync(cancellationToken));
				await (s.CreateQuery("delete User").ExecuteUpdateAsync(cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}
	}
}
