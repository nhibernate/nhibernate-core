//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.QueryTest
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class AggregateReturnTypesFixtureAsync : TestCase
	{
		protected override string[] Mappings
		{
			get { return new string[] {"QueryTest.Aggregated.hbm.xml"}; }
		}

		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override void OnSetUp()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				Aggregated agg = new Aggregated();
				agg.AByte = 10;
				agg.AShort = 20;
				agg.AnInt = 30;
				agg.ALong = 40;
				agg.AFloat = 50.5f;
				agg.ADouble = 60.6;
				agg.ADecimal = 70.707m;

				s.Save(agg);
				tx.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				s.Delete("from Aggregated");
				tx.Commit();
			}
		}

		private async Task<System.Type> AggregateTypeAsync(string expr, CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			{
				return (await (s.CreateQuery("select " + expr + " from Aggregated a").UniqueResultAsync(cancellationToken))).GetType();
			}
		}

		private async Task CheckTypeAsync(string expr, System.Type type, CancellationToken cancellationToken = default(CancellationToken))
		{
			Assert.AreSame(type, await (AggregateTypeAsync(expr, cancellationToken)));
		}

		[Test]
		public async Task SumAsync()
		{
			await (CheckTypeAsync("sum(a.AByte)", typeof(UInt64)));

			await (CheckTypeAsync("sum(a.AShort)", typeof(Int64)));
			await (CheckTypeAsync("sum(a.AnInt)", typeof(Int64)));
			await (CheckTypeAsync("sum(a.ALong)", typeof(Int64)));

			await (CheckTypeAsync("sum(a.AFloat)", typeof(Double)));
			await (CheckTypeAsync("sum(a.ADouble)", typeof(Double)));

			await (CheckTypeAsync("sum(a.ADecimal)", typeof(Decimal)));
		}

		[Test]
		public async Task AvgAsync()
		{
			await (CheckTypeAsync("avg(a.AByte)", typeof(Double)));

			await (CheckTypeAsync("avg(a.AShort)", typeof(Double)));
			await (CheckTypeAsync("avg(a.AnInt)", typeof(Double)));
			await (CheckTypeAsync("avg(a.ALong)", typeof(Double)));

			await (CheckTypeAsync("avg(a.AFloat)", typeof(Double)));
			await (CheckTypeAsync("avg(a.ADouble)", typeof(Double)));

			await (CheckTypeAsync("avg(a.ADecimal)", typeof(Double)));
		}

		[Test]
		public async Task MinAsync()
		{
			await (CheckTypeAsync("min(a.AByte)", typeof(Byte)));

			await (CheckTypeAsync("min(a.AShort)", typeof(Int16)));
			await (CheckTypeAsync("min(a.AnInt)", typeof(Int32)));
			await (CheckTypeAsync("min(a.ALong)", typeof(Int64)));

			await (CheckTypeAsync("min(a.AFloat)", typeof(Single)));
			await (CheckTypeAsync("min(a.ADouble)", typeof(Double)));

			await (CheckTypeAsync("min(a.ADecimal)", typeof(Decimal)));
		}

		[Test]
		public async Task MaxAsync()
		{
			await (CheckTypeAsync("max(a.AByte)", typeof(Byte)));

			await (CheckTypeAsync("max(a.AShort)", typeof(Int16)));
			await (CheckTypeAsync("max(a.AnInt)", typeof(Int32)));
			await (CheckTypeAsync("max(a.ALong)", typeof(Int64)));

			await (CheckTypeAsync("max(a.AFloat)", typeof(Single)));
			await (CheckTypeAsync("max(a.ADouble)", typeof(Double)));

			await (CheckTypeAsync("max(a.ADecimal)", typeof(Decimal)));
		}
	}
}