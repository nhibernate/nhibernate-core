//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using NHibernate.Engine;
using NHibernate.Impl;
using NHibernate.Transform;
using NHibernate.Util;
using NUnit.Framework;

namespace NHibernate.Test.QueryTest
{
	using System.Threading.Tasks;
	[TestFixture]
	public class DetachedQueryFixtureAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override string[] Mappings
		{
			get { return new string[] { "QueryTest.DetachedQueryTest.hbm.xml" }; }
		}

		public const int totalFoo = 15;

		protected override void OnSetUp()
		{
			using (var s = OpenSession())
			using(var tx = s.BeginTransaction())
			{
				for (int i = 0; i < totalFoo; i++)
				{
					Foo f = new Foo("N" + i, "D" + i, i);
					s.Save(f);
				}
				tx.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			using(var tx = s.BeginTransaction())
			{
				s.Delete("from Foo");
				tx.Commit();
			}
		}

		[Test]
		public async Task ExecutableQueryAsync()
		{
			// Simply fetch
			IDetachedQuery dq = new DetachedQuery("from Foo");
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList l = await (q.ListAsync());
				Assert.AreEqual(totalFoo, l.Count);
			}

			// With Typed Parameters
			dq = new DetachedQuery("from Foo f where f.Name=:pn and f.Description=:pd");
			dq.SetString("pn", "N2").SetString("pd", "D2");
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.AreEqual(1, l.Count);
				Assert.AreEqual("N2", l[0].Name);
				Assert.AreEqual("D2", l[0].Description);
			}

			// With UnTyped Parameters
			dq = new DetachedQuery("from Foo f where f.Name=:pn and f.Description=:pd");
			dq.SetParameter("pn", "N2").SetParameter("pd", "D2");
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.AreEqual(1, l.Count);
				Assert.AreEqual("N2", l[0].Name);
				Assert.AreEqual("D2", l[0].Description);
			}

			// With UnTyped Parameter List
			dq = new DetachedQuery("from Foo f where f.IntValue in (:pn)");
			dq.SetParameterList("pn", new int[] { 2, 3 });
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.That(l.Count, Is.EqualTo(2));

				Assert.That(l.Contains(new Foo("N2", "D2")), Is.True);
				Assert.That(l.Contains(new Foo("N3", "D3")), Is.True);
			}

			// Pagination
			dq = new DetachedQuery("from Foo f order by f.IntValue");
			dq.SetFirstResult(0).SetMaxResults(2);
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.AreEqual(2, l.Count);
				Assert.AreEqual("N0", l[0].Name);
				Assert.AreEqual("N1", l[1].Name);
			}
			dq.SetFirstResult(2).SetMaxResults(1);
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.AreEqual(1, l.Count);
				Assert.AreEqual("N2", l[0].Name);
			}
		}

		[Test]
		public async Task ExecutableNamedQueryAsync()
		{
			IDetachedQuery dq = new DetachedNamedQuery("Foo.WithParameters");
			dq.SetString("pn", "N2");
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<Foo> l = await (q.ListAsync<Foo>());
				Assert.AreEqual(1, l.Count);
				Assert.AreEqual("N2", l[0].Name);
				Assert.AreEqual("D2", l[0].Description);
			}
			// reusing same IDetachedQuery
			dq.SetString("pn", "@All@");
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList l = await (q.ListAsync());
				Assert.AreEqual(totalFoo, l.Count);
			}
		}

		[Test]
		public async Task ResultTransformerAsync()
		{
			IDetachedQuery dq = new DetachedNamedQuery("NoFoo.SQL.Parameters");
			dq.SetString("p1", "%1_")
				.SetResultTransformer(new AliasToBeanResultTransformer(typeof(NoFoo)));
			using (ISession s = OpenSession())
			{
				IQuery q = dq.GetExecutableQuery(s);
				IList<NoFoo> l = await (q.ListAsync<NoFoo>());
				Assert.AreEqual(5, l.Count);
			}
		}

		[Test]
		public async Task SerializableAsync()
		{
			DetachedQuery dq = new DetachedQuery("from Foo f where f.Name=:pn and f.Description=:pd");
			dq.SetString("pn", "N2").SetString("pd", "D2");
			byte[] bytes = SerializationHelper.Serialize(dq);

			DetachedQuery dqs = (DetachedQuery)SerializationHelper.Deserialize(bytes);

			using (ISession s = OpenSession())
			{
				await (dqs.GetExecutableQuery(s).ListAsync());
			}
		}

		private class TestDetachedQuery : AbstractDetachedQuery
		{
			public Dictionary<int, object> PosUntypeParams
			{
				get { return posUntypeParams; }
			}

			public Dictionary<string, object> NamedUntypeParams
			{
				get { return namedUntypeParams; }
			}

			public IList OptionalUntypeParams
			{
				get { return optionalUntypeParams; }
			}

			public Dictionary<int, TypedValue> PosParams
			{
				get { return posParams; }
			}

			public Dictionary<string, TypedValue> NamedParams
			{
				get { return namedParams; }
			}

			public Dictionary<string, LockMode> LockModes
			{
				get { return lockModes; }
			}

			public RowSelection Selection
			{
				get { return selection; }
			}

			public bool Cacheable
			{
				get { return cacheable; }
			}

			public string CacheRegion
			{
				get { return cacheRegion; }
			}

			public bool ReadOnly
			{
				get { return readOnly; }
			}

			public FlushMode FlushMode
			{
				get { return flushMode; }
			}

			public IResultTransformer ResultTransformer
			{
				get { return resultTransformer; }
			}

			public bool ShouldIgnoredUnknownNamedParameters
			{
				get { return shouldIgnoredUnknownNamedParameters; }
			}

			public Dictionary<string, IEnumerable> NamedUntypeListParams
			{
				get { return namedUntypeListParams; }
			}

			public Dictionary<string, TypedValue> NamedListParams
			{
				get { return namedListParams; }
			}

			public override IQuery GetExecutableQuery(ISession session)
			{
				throw new NotImplementedException("The method or operation is not implemented.");
			}

			public new void CopyTo(IDetachedQuery destination)
			{
				base.CopyTo(destination);
			}

			public void OverrideInfoFrom(IDetachedQueryImplementor origin)
			{
				(this as IDetachedQueryImplementor).OverrideInfoFrom(origin);
			}

			public string Comment
			{
				get { return comment; }
			}
		}
	}
}
