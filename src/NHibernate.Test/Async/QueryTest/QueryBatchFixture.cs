//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NHibernate.Cfg;
using NHibernate.Criterion;
using NHibernate.Multi;
using NHibernate.Test.SecondLevelCacheTests;
using NUnit.Framework;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.Test.QueryTest
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class QueryBatchFixtureAsync : TestCase
	{
		// This fixture aggregates most of the tests from MultiCriteriaFixture, MultipleMixedQueriesFixture and
		// MultipleQueriesFixture, rewritten for using QueryBatch instead of obsoleted MultiCriteria/MultiQuery.

		protected override string MappingsAssembly => "NHibernate.Test";

		protected override string[] Mappings => new[] { "SecondLevelCacheTest.Item.hbm.xml" };

		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.GenerateStatistics, "true");
		}

		protected override void OnSetUp()
		{
			Sfi.Statistics.Clear();
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");
				session.Flush();
				transaction.Commit();
			}
		}

		#region Criteria

		[Test]
		public async Task CanExecuteMultipleCriteriaQueriesInSingleRoundTrip_InTransactionAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item
				{
					Id = 1,
					Name = "foo"
				};
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			using (var transaction = s.BeginTransaction())
			{
				var getItems = s.CreateCriteria(typeof(Item));
				var countItems = s.CreateCriteria(typeof(Item))
				                  .SetProjection(Projections.RowCount());

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<int>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));
				Assert.That(fromDb.Name, Is.EqualTo("foo"));

				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1));

				await (transaction.CommitAsync());
			}
		}

		[Test]
		public async Task CanExecuteMultipleCriteriaQueriesInSingleRoundTripAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var getItems = s.CreateCriteria(typeof(Item));
				var countItems = s.CreateCriteria(typeof(Item))
				                  .SetProjection(Projections.RowCount());

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<int>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1));
			}
		}

		[Test]
		public async Task CanUseSecondLevelCacheWithPositionalParametersAndCriteriaAsync()
		{
			await (Sfi.QueryCache.ClearAsync(CancellationToken.None));

			await (CreateItemsAsync());

			Sfi.Statistics.Clear();

			await (DoMultiCriteriaAndAssertAsync());

			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2));
		}

		[Test]
		public async Task CanGetMultiCriteriaFromSecondLevelCacheAsync()
		{
			await (CreateItemsAsync());
			//set the query in the cache
			await (DoMultiCriteriaAndAssertAsync());
			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2), "Cache puts");

			Sfi.Statistics.Clear();
			await (DoMultiCriteriaAndAssertAsync());
			Assert.That(Sfi.Statistics.PrepareStatementCount, Is.EqualTo(0), "Prepared statements");
			Assert.That(Sfi.Statistics.QueryCacheMissCount, Is.EqualTo(0), "Cache misses");
			Assert.That(Sfi.Statistics.QueryCacheHitCount, Is.EqualTo(2), "Cache hits");
		}

		[Test]
		public async Task CanUpdateStatisticsWhenGetMultiCriteriaFromSecondLevelCacheAsync()
		{
			await (CreateItemsAsync());

			await (DoMultiCriteriaAndAssertAsync());
			Assert.That(Sfi.Statistics.QueryCacheHitCount, Is.EqualTo(0));
			Assert.That(Sfi.Statistics.QueryCacheMissCount, Is.EqualTo(2));
			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2));

			await (DoMultiCriteriaAndAssertAsync());
			Assert.That(Sfi.Statistics.QueryCacheHitCount, Is.EqualTo(2));
			Assert.That(Sfi.Statistics.QueryCacheMissCount, Is.EqualTo(2));
			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2));
		}

		[Test]
		public async Task TwoMultiCriteriaWithDifferentPagingGetDifferentResultsWhenUsingCachedQueriesAsync()
		{
			await (CreateItemsAsync());
			using (var s = OpenSession())
			{
				var criteria = s.CreateCriteria(typeof(Item))
				                .Add(Restrictions.Gt("id", 50));
				var queries = s.CreateQueryBatch()
				               .Add<Item>(CriteriaTransformer.Clone(criteria).SetFirstResult(10).SetCacheable(true))
				               .Add<int>(
					               CriteriaTransformer
						               .Clone(criteria).SetProjection(Projections.RowCount()).SetCacheable(true));
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99));
			}

			using (var s = OpenSession())
			{
				var criteria = s.CreateCriteria(typeof(Item))
				                .Add(Restrictions.Gt("id", 50));
				var queries = s.CreateQueryBatch()
				               .Add<Item>(CriteriaTransformer.Clone(criteria).SetFirstResult(20).SetCacheable(true))
				               .Add<int>(
					               CriteriaTransformer
						               .Clone(criteria).SetProjection(Projections.RowCount()).SetCacheable(true));
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(
					items.Count,
					Is.EqualTo(79),
					"Should have gotten different result here, because the paging is different");
				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99));
			}
		}

		[Test]
		public async Task CanUseWithParameterizedCriteriaAndLimitAsync()
		{
			await (CreateItemsAsync());

			using (var s = OpenSession())
			{
				var criteria = s.CreateCriteria(typeof(Item))
				                .Add(Restrictions.Gt("id", 50));

				var queries = s.CreateQueryBatch()
				               .Add<Item>(
					               CriteriaTransformer.Clone(criteria)
					                                  .SetFirstResult(10))
				               .Add<int>(
					               CriteriaTransformer.Clone(criteria)
					                                  .SetProjection(Projections.RowCount()));
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99));
			}
		}

		[Test]
		public async Task CanUseCriteriaWithParameterListAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var criteria = s.CreateCriteria(typeof(Item))
				                .Add(
					                Restrictions.In(
						                "id",
						                new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }));
				var queries = s.CreateQueryBatch()
				               .Add<Item>(CriteriaTransformer.Clone(criteria))
				               .Add<int>(
					               CriteriaTransformer.Clone(criteria)
					                                  .SetProjection(Projections.RowCount()));

				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<int>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1));
			}
		}

		[Test]
		public async Task CanAddCriteriaWithKeyAndRetrieveResultsWithKeyAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var multiCriteria = session.CreateQueryBatch();

				var firstCriteria = session.CreateCriteria(typeof(Item))
				                           .Add(Restrictions.Lt("id", 50));

				var secondCriteria = session.CreateCriteria(typeof(Item));

				multiCriteria.Add<Item>("firstCriteria", firstCriteria);
				multiCriteria.Add<Item>("secondCriteria", secondCriteria);

				var secondResult = await (multiCriteria.GetResultAsync<Item>("secondCriteria", CancellationToken.None));
				var firstResult = await (multiCriteria.GetResultAsync<Item>("firstCriteria", CancellationToken.None));

				Assert.That(secondResult.Count, Is.GreaterThan(firstResult.Count));
			}
		}

		[Test]
		public async Task CanAddDetachedCriteriaWithKeyAndRetrieveResultsWithKeyAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var multiCriteria = session.CreateQueryBatch();

				var firstCriteria = DetachedCriteria.For(typeof(Item))
				                                    .Add(Restrictions.Lt("id", 50));

				var secondCriteria = DetachedCriteria.For(typeof(Item));

				multiCriteria.Add<Item>("firstCriteria", firstCriteria);
				multiCriteria.Add<Item>("secondCriteria", secondCriteria);

				var secondResult = await (multiCriteria.GetResultAsync<Item>("secondCriteria", CancellationToken.None));
				var firstResult = await (multiCriteria.GetResultAsync<Item>("firstCriteria", CancellationToken.None));

				Assert.That(secondResult.Count, Is.GreaterThan(firstResult.Count));
			}
		}

		[Test]
		public async Task ExecutingCriteriaThroughTransformsResultsAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var transformer = new ResultTransformerStub();
				var criteria = session.CreateCriteria(typeof(Item))
				                      .SetResultTransformer(transformer);
				var multiCriteria = session.CreateQueryBatch()
				                           .Add<object[]>(criteria);
				await (multiCriteria.GetResultAsync<object[]>(0, CancellationToken.None));

				Assert.That(transformer.WasTransformTupleCalled, Is.True, "Transform Tuple was not called");
				Assert.That(transformer.WasTransformListCalled, Is.True, "Transform List was not called");
			}
		}

		[Test]
		public async Task UsingManyParametersAndQueries_DoesNotCauseParameterNameCollisionsAsync()
		{
			//GH-1357
			using (var s = OpenSession())
			{
				var item = new Item { Id = 15 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var multi = s.CreateQueryBatch();

				for (var i = 0; i < 12; i++)
				{
					var criteria = s.CreateCriteria(typeof(Item));
					for (var j = 0; j < 12; j++)
					{
						criteria = criteria.Add(Restrictions.Gt("id", j));
					}

					// Parameter combining was used for cacheable queries, with previous implementation (multi-criteria)
					// Query batch does not do that, but still keeping the test.
					criteria.SetCacheable(true);

					multi.Add<Item>(criteria);
				}

				for (var i = 0; i < 12; i++)
				{
					Assert.That((await (multi.GetResultAsync<Item>(i, CancellationToken.None))).Count, Is.EqualTo(1));
				}
			}
		}

		//NH-2428 - Session.MultiCriteria and FlushMode.Auto inside transaction (GH865)
		[Test]
		public async Task MultiCriteriaAutoFlushAsync()
		{
			using (var s = OpenSession())
			using (var tx = s.BeginTransaction())
			{
				s.FlushMode = FlushMode.Auto;
				var p1 = new Item
				{
					Name = "Person name",
					Id = 15
				};
				await (s.SaveAsync(p1));
				await (s.FlushAsync());

				await (s.DeleteAsync(p1));
				var multi = s.CreateQueryBatch();
				multi.Add<int>(s.QueryOver<Item>().ToRowCountQuery());
				var count = (await (multi.GetResultAsync<int>(0, CancellationToken.None))).Single();
				await (tx.CommitAsync());

				Assert.That(count, Is.EqualTo(0), "Session wasn't auto flushed.");
			}
		}

		private async Task DoMultiCriteriaAndAssertAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var s = OpenSession())
			{
				var criteria = s.CreateCriteria(typeof(Item))
				                .Add(Restrictions.Gt("id", 50));
				var queries = s.CreateQueryBatch()
				               .Add<Item>(CriteriaTransformer.Clone(criteria).SetFirstResult(10).SetCacheable(true))
				               .Add<int>(
					               CriteriaTransformer
						               .Clone(criteria).SetProjection(Projections.RowCount()).SetCacheable(true));
				var items = await (queries.GetResultAsync<Item>(0, cancellationToken));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (queries.GetResultAsync<int>(1, cancellationToken))).Single();
				Assert.That(count, Is.EqualTo(99));
			}
		}

		#endregion

		#region HQL

		[Test]
		public async Task CanGetMultiHqlFromSecondLevelCacheAsync()
		{
			await (CreateItemsAsync());
			//set the query in the cache
			await (DoMultiHqlAndAssertAsync());

			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2), "Cache puts");

			Sfi.Statistics.Clear();
			await (DoMultiHqlAndAssertAsync());
			Assert.That(Sfi.Statistics.PrepareStatementCount, Is.EqualTo(0), "Prepared statements");
			Assert.That(Sfi.Statistics.QueryCacheMissCount, Is.EqualTo(0), "Cache misses");
			Assert.That(Sfi.Statistics.QueryCacheHitCount, Is.EqualTo(2), "Cache hits");
		}

		[Test]
		public async Task TwoMultiHqlWithDifferentPagingGetDifferentResultsWhenUsingCachedQueriesAsync()
		{
			await (CreateItemsAsync());
			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateQuery("from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetFirstResult(10)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateQuery("select count(*) from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));
				var items = await (multiQuery.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (multiQuery.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}

			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateQuery("from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetFirstResult(20)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateQuery("select count(*) from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));
				var items = await (multiQuery.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(
					items.Count,
					Is.EqualTo(79),
					"Should have gotten different result here, because the paging is different");
				var count = (await (multiQuery.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		[Test]
		public async Task CanUseSecondLevelCacheWithPositionalParametersAndHqlAsync()
		{
			await (Sfi.QueryCache.ClearAsync(CancellationToken.None));

			await (CreateItemsAsync());

			Sfi.Statistics.Clear();

			await (DoMultiHqlAndAssertAsync());

			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2));
		}

		[Test]
		public async Task CanUseHqlWithParameterizedQueriesAndLimitAsync()
		{
			await (CreateItemsAsync());

			using (var s = OpenSession())
			{
				var getItems = s.CreateQuery("from Item i where i.Id > :id")
				                .SetInt32("id", 50)
				                .SetFirstResult(10);
				var countItems = s.CreateQuery("select count(*) from Item i where i.Id > :id")
				                  .SetInt32("id", 50);

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<long>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		[Test]
		public async Task CanUseSetParameterListWithHqlAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var queries = s.CreateQueryBatch()
				               .Add<Item>(
					               s.CreateQuery("from Item i where i.id in (:items)")
					                .SetParameterList(
						                "items",
						                new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }))
				               .Add<long>(
					               s.CreateQuery("select count(*) from Item i where i.id in (:items)")
					                .SetParameterList(
						                "items",
						                new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }));

				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.First().Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1L));
			}
		}

		[Test]
		public async Task CanExecuteMultiplyHqlInSingleRoundTripAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var getItems = s.CreateQuery("from Item");
				var countItems = s.CreateQuery("select count(*) from Item");

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<long>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1L));
			}
		}

		[Test]
		public async Task CanAddHqlWithKeyAndRetrieveResultsWithKeyAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var multiQuery = session.CreateQueryBatch();

				var firstQuery = session.CreateQuery("from Item i where i.Id < :id")
				                        .SetInt32("id", 50);

				var secondQuery = session.CreateQuery("from Item");

				multiQuery.Add<Item>("first", firstQuery).Add<Item>("second", secondQuery);

				var secondResult = await (multiQuery.GetResultAsync<Item>("second", CancellationToken.None));
				var firstResult = await (multiQuery.GetResultAsync<Item>("first", CancellationToken.None));

				Assert.That(secondResult.Count, Is.GreaterThan(firstResult.Count));
			}
		}

		[Test]
		public async Task ExecutingHqlThroughMultiQueryTransformsResultsAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var transformer = new ResultTransformerStub();
				var criteria = session.CreateQuery("from Item")
				                      .SetResultTransformer(transformer);
				await (session.CreateQueryBatch()
				       .Add<object[]>(criteria)
				       .GetResultAsync<object[]>(0, CancellationToken.None));

				Assert.That(transformer.WasTransformTupleCalled, Is.True, "Transform Tuple was not called");
				Assert.That(transformer.WasTransformListCalled, Is.True, "Transform List was not called");
			}
		}

		private async Task DoMultiHqlAndAssertAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateQuery("from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetFirstResult(10)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateQuery("select count(*) from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));
				var items = await (multiQuery.GetResultAsync<Item>(0, cancellationToken));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (multiQuery.GetResultAsync<long>(1, cancellationToken))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		#endregion

		#region Mixed

		[Test]
		public void NH_1085_WillGiveReasonableErrorIfBadParameterNameAsync()
		{
			using (var s = Sfi.OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateSQLQuery("select * from ITEM where Id in (:ids)")
					                   .AddEntity(typeof(Item)))
				                  .Add<Item>(s.CreateQuery("from Item i where i.Id in (:ids2)"));
				var e = Assert.ThrowsAsync<QueryException>(() => multiQuery.ExecuteAsync(CancellationToken.None));
				Assert.That(
					e.Message,
					Is.EqualTo(
						"Not all named parameters have been set: ['ids'] [select * from ITEM where Id in (:ids)]"));
			}
		}

		[Test]
		public async Task CanGetMultiQueryFromSecondLevelCacheAsync()
		{
			await (CreateItemsAsync());
			//set the query in the cache
			await (DoMultiQueryAndAssertAsync());

			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2), "Cache puts");

			Sfi.Statistics.Clear();
			await (DoMultiQueryAndAssertAsync());
			Assert.That(Sfi.Statistics.PrepareStatementCount, Is.EqualTo(0), "Prepared statements");
			Assert.That(Sfi.Statistics.QueryCacheMissCount, Is.EqualTo(0), "Cache misses");
			Assert.That(Sfi.Statistics.QueryCacheHitCount, Is.EqualTo(2), "Cache hits");
		}

		[Test]
		public async Task CanSpecifyParameterOnMultiQueryWhenItIsNotUsedInAllQueriesAsync()
		{
			using (var s = OpenSession())
			{
				await (s.CreateQueryBatch()
				 .Add<Item>(s.CreateQuery("from Item"))
				 .Add<Item>(
					 s.CreateSQLQuery("select * from ITEM where Id = :id or Id = :id2")
					  .AddEntity(typeof(Item))
					  .SetParameter("id", 5)
					  .SetInt32("id2", 5))
				 .Add<Item>(
					 s.CreateQuery("from Item i where i.Id = :id2")
					  .SetInt32("id2", 5))
				 .ExecuteAsync(CancellationToken.None));
			}
		}

		[Test]
		public async Task TwoMultiQueriesWithDifferentPagingGetDifferentResultsWhenUsingCachedQueriesAsync()
		{
			await (CreateItemsAsync());
			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateQuery("from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetFirstResult(10)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateSQLQuery("select count(*) as itemCount from ITEM where Id > ?")
					                   .AddScalar("itemCount", NHibernateUtil.Int64)
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));

				var items = await (multiQuery.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (multiQuery.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}

			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateQuery("from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetFirstResult(20)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateSQLQuery("select count(*) as itemCount from ITEM where Id > ?")
					                   .AddScalar("itemCount", NHibernateUtil.Int64)
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));
				var items = await (multiQuery.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(
					items.Count,
					Is.EqualTo(79),
					"Should have gotten different result here, because the paging is different");
				var count = (await (multiQuery.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		[Test]
		public async Task CanUseSecondLevelCacheWithPositionalParametersAsync()
		{
			await (Sfi.QueryCache.ClearAsync(CancellationToken.None));

			await (CreateItemsAsync());

			Sfi.Statistics.Clear();

			await (DoMultiQueryAndAssertAsync());

			Assert.That(Sfi.Statistics.QueryCachePutCount, Is.EqualTo(2));
		}

		[Test]
		public async Task CanUseWithParameterizedQueriesAndLimitAsync()
		{
			await (CreateItemsAsync());

			using (var s = OpenSession())
			{
				var getItems = s.CreateSQLQuery("select * from ITEM where Id > :id")
				                .AddEntity(typeof(Item))
				                .SetFirstResult(10)
				                .SetInt32("id", 50);
				var countItems = s.CreateQuery("select count(*) from Item i where i.Id > :id")
				                  .SetInt32("id", 50);

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<long>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		[Test]
		public async Task CanUseSetParameterListAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var queries = s.CreateQueryBatch()
				               .Add<Item>(
					               s.CreateSQLQuery("select * from ITEM where Id in (:items)")
					                .AddEntity(typeof(Item))
					                .SetParameterList(
						                "items",
						                new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }))
				               .Add<long>(s.CreateQuery("select count(*) from Item i where i.id in (:items)")
				                     .SetParameterList(
					                     "items",
					                     new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 }));

				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1L));
			}
		}

		[Test]
		public async Task CanExecuteMultiplyQueriesInSingleRoundTripAsync()
		{
			using (var s = OpenSession())
			{
				var item = new Item { Id = 1 };
				await (s.SaveAsync(item));
				await (s.FlushAsync());
			}

			using (var s = OpenSession())
			{
				var getItems = s.CreateSQLQuery("select * from ITEM").AddEntity(typeof(Item));
				var countItems = s.CreateQuery("select count(*) from Item");

				var queries = s.CreateQueryBatch()
				               .Add<Item>(getItems)
				               .Add<long>(countItems);
				var items = await (queries.GetResultAsync<Item>(0, CancellationToken.None));
				var fromDb = items.First();
				Assert.That(fromDb.Id, Is.EqualTo(1));

				var count = (await (queries.GetResultAsync<long>(1, CancellationToken.None))).Single();
				Assert.That(count, Is.EqualTo(1L));
			}
		}

		[Test]
		public async Task CanAddIQueryWithKeyAndRetrieveResultsWithKeyAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var multiQuery = session.CreateQueryBatch();

				var firstQuery = session.CreateSQLQuery("select * from ITEM where Id < :id")
				                        .AddEntity(typeof(Item))
				                        .SetInt32("id", 50);

				var secondQuery = session.CreateQuery("from Item");

				multiQuery.Add<Item>("first", firstQuery).Add<Item>("second", secondQuery);

				var secondResult = await (multiQuery.GetResultAsync<Item>("second", CancellationToken.None));
				var firstResult = await (multiQuery.GetResultAsync<Item>("first", CancellationToken.None));

				Assert.That(secondResult.Count, Is.GreaterThan(firstResult.Count));
			}
		}

		[Test]
		public async Task ExecutingQueryThroughMultiQueryTransformsResultsAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var transformer = new ResultTransformerStub();
				var query = session.CreateSQLQuery("select * from ITEM")
				                   .AddEntity(typeof(Item))
				                   .SetResultTransformer(transformer);
				await (session.CreateQueryBatch()
				       .Add<object[]>(query)
				       .GetResultAsync<object[]>(0, CancellationToken.None));

				Assert.That(transformer.WasTransformTupleCalled, Is.True, "Transform Tuple was not called");
				Assert.That(transformer.WasTransformListCalled, Is.True, "Transform List was not called");
			}
		}

		[Test]
		public async Task CannotRetrieveResultWithUnknownKeyAsync()
		{
			await (CreateItemsAsync());

			using (var session = OpenSession())
			{
				var multiCriteria = session.CreateQueryBatch();

				var firstCriteria = session.CreateCriteria(typeof(Item))
				                           .Add(Restrictions.Lt("id", 50));

				multiCriteria.Add<Item>("firstCriteria", firstCriteria);

				Assert.That(
					() => multiCriteria.GetResultAsync<Item>("unknownKey", CancellationToken.None),
					Throws.InstanceOf<KeyNotFoundException>());
			}
		}

		private async Task DoMultiQueryAndAssertAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var s = OpenSession())
			{
				var multiQuery = s.CreateQueryBatch()
				                  .Add<Item>(
					                  s.CreateSQLQuery("select * from ITEM where Id > ?")
					                   .AddEntity(typeof(Item))
					                   .SetInt32(0, 50)
					                   .SetFirstResult(10)
					                   .SetCacheable(true))
				                  .Add<long>(
					                  s.CreateQuery("select count(*) from Item i where i.Id > ?")
					                   .SetInt32(0, 50)
					                   .SetCacheable(true));
				var items = await (multiQuery.GetResultAsync<Item>(0, cancellationToken));
				Assert.That(items.Count, Is.EqualTo(89));
				var count = (await (multiQuery.GetResultAsync<long>(1, cancellationToken))).Single();
				Assert.That(count, Is.EqualTo(99L));
			}
		}

		#endregion

		private async Task CreateItemsAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var s = OpenSession())
			using (var t = s.BeginTransaction())
			{
				for (var i = 0; i < 150; i++)
				{
					var item = new Item { Id = i };
					await (s.SaveAsync(item, cancellationToken));
				}

				await (t.CommitAsync(cancellationToken));
			}
		}
	}
}
