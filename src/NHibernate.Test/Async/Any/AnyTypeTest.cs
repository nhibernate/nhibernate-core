//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.Any
{
	using System.Threading.Tasks;
	[TestFixture]
	public class AnyTypeTestAsync : TestCase
	{
		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		protected override string[] Mappings
		{
			get { return new string[] {"Any.Person.hbm.xml"}; }
		}

		protected override string CacheConcurrencyStrategy
		{
			get { return null; }
		}

		[Test]
		public async Task FlushProcessingAsync()
		{
			//http://opensource.atlassian.com/projects/hibernate/browse/HHH-1663
			ISession session = OpenSession();
			session.BeginTransaction();
			Person person = new Person();
			Address address = new Address();
			person.Data = address;
			await (session.SaveOrUpdateAsync(person));
			await (session.SaveOrUpdateAsync(address));
			await (session.Transaction.CommitAsync());
			session.Close();

			session = OpenSession();
			session.BeginTransaction();
			person = (Person) await (session.LoadAsync(typeof (Person), person.Id));
			person.Name = "makingpersondirty";
			await (session.Transaction.CommitAsync());
			session.Close();

			session = OpenSession();
			session.BeginTransaction();
			await (session.DeleteAsync(person));
			await (session.DeleteAsync(address));
			await (session.Transaction.CommitAsync());
			session.Close();
		}
	}
}