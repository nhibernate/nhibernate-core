//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NHibernate.Mapping;
using NUnit.Framework;

namespace NHibernate.Test.TypeParameters
{
	using System.Threading.Tasks;
	[TestFixture]
	public class DefinedTypeForIdFixtureAsync : TestCase
	{
		protected override string[] Mappings
		{
			get { return new[] { "TypeParameters.EntityCustomId.hbm.xml" }; }
		}

		protected override string MappingsAssembly
		{
			get { return "NHibernate.Test"; }
		}

		[Test]
		[Description("Ensure the parametrized generator is working.")]
		public async Task SaveAsync()
		{
			object savedId1;
			object savedId2;

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				savedId1 = await (s.SaveAsync(new EntityCustomId()));
				savedId2 = await (s.SaveAsync(new EntityCustomId()));
				await (t.CommitAsync());
			}

			Assert.That(savedId1, Is.LessThan(200), "should be work with custo parameters");
			Assert.That(savedId1, Is.GreaterThan(99));
			Assert.That(savedId2, Is.EqualTo((int)savedId1 + 1));

			using (ISession s = OpenSession())
			using (ITransaction t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from EntityCustomId").ExecuteUpdateAsync());
				await (t.CommitAsync());
			}
		}
	}
}