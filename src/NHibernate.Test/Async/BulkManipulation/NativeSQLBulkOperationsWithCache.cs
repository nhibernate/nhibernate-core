//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using NHibernate.Cache;
using NHibernate.Cfg;
using NSubstitute;
using NUnit.Framework;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.Test.BulkManipulation
{
	using System.Threading.Tasks;
	[TestFixture]
	public class NativeSQLBulkOperationsWithCacheAsync : TestCase
	{
		protected override string MappingsAssembly => "NHibernate.Test";

		protected override string[] Mappings => new[] { "BulkManipulation.Vehicle.hbm.xml" };

		protected override void Configure(Configuration configuration)
		{
			cfg.SetProperty(Environment.UseQueryCache, "true");
			cfg.SetProperty(Environment.UseSecondLevelCache, "true");
			cfg.SetProperty(Environment.CacheProvider, typeof(SubstituteCacheProvider).AssemblyQualifiedName);
		}

		[Test]
		public async Task SimpleNativeSQLInsert_DoesNotEvictEntireCacheWhenQuerySpacesAreAddedAsync()
		{
			List<string> clearCalls = new List<string>();
			((SubstituteCacheProvider) Sfi.Settings.CacheProvider).OnClear(x =>
			{
				clearCalls.Add(x);
			});
			using (var s = OpenSession())
			{
				string ssql = "UPDATE Vehicle SET Vin='123' WHERE Vin='123c'";

				using (var t = s.BeginTransaction())
				{

					await (s.CreateSQLQuery(ssql).ExecuteUpdateAsync());
					await (t.CommitAsync());

					Assert.AreEqual(1, clearCalls.Count);
				}

				clearCalls.Clear();

				using (var t = s.BeginTransaction())
				{
					await (s.CreateSQLQuery(ssql).AddSynchronizedQuerySpace("Unknown").ExecuteUpdateAsync());
					await (t.CommitAsync());

					Assert.AreEqual(0, clearCalls.Count);
				}
			}
		}
	}
}
