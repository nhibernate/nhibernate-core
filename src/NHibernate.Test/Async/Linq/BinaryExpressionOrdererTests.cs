//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	[TestFixture]
	public class BinaryExpressionOrdererTestsAsync : LinqTestCase
	{
		[Test]
		public async Task ValuePropertySwapsToPropertyValueAsync()
		{
			var query = await ((from user in db.Users
						 where ("ayende" == user.Name)
						 select user).ToListAsync());
			Assert.AreEqual(1, query.Count);
		}

		[Test]
		public async Task PropertyValueDoesntSwapsAsync()
		{
            var query = await ((from user in db.Users
						 where (user.Name == "ayende")
						 select user).ToListAsync());
			Assert.AreEqual(1, query.Count);
		}

		[Test]
		public async Task PropertyPropertyDoesntSwapAsync()
		{
            var query = await ((from user in db.Users
						 where (user.Name == user.Name)
						 select user).ToListAsync());
			Assert.AreEqual(3, query.Count);
		}

        [Test]
		public async Task EqualsSwapsToEqualsAsync()
		{
            var query = await ((from user in db.Users
						 where ("ayende" == user.Name)
						 select user).ToListAsync());
			Assert.AreEqual(1, query.Count);
		}

		[Test]
		public async Task NotEqualsSwapsToNotEqualsAsync()
		{
            var query = await ((from user in db.Users
						 where ("ayende" != user.Name)
						 select user).ToListAsync());
			Assert.AreEqual(2, query.Count);
		}

		[Test]
		public async Task GreaterThanSwapsToLessThanAsync()
		{
            var query = await ((from user in db.Users
						 where (3 > user.Id)
						 select user).ToListAsync());
			Assert.AreEqual(2, query.Count);
		}

		[Test]
		public async Task GreaterThanOrEqualToSwapsToLessThanOrEqualToAsync()
		{
            var query = await ((from user in db.Users
						 where (2 >= user.Id)
						 select user).ToListAsync());
			Assert.AreEqual(2, query.Count);
		}

		[Test]
		public async Task LessThanSwapsToGreaterThanAsync()
		{
            var query = await ((from user in db.Users
						 where (1 < user.Id)
						 select user).ToListAsync());
			Assert.AreEqual(2, query.Count);
		}

		[Test]
		public async Task LessThanOrEqualToSwapsToGreaterThanOrEqualToAsync()
		{
            var query = await ((from user in db.Users
						 where (2 <= user.Id)
						 select user).ToListAsync());
			Assert.AreEqual(2, query.Count);
		}

		[Test]
		public async Task ValuePropertySwapsToPropertyValueUsingEqualsFromConstantAsync()
		{
			// check NH-2440
			var query = await ((from user in db.Users
									 where ("ayende".Equals(user.Name))
									 select user).ToListAsync());
			Assert.AreEqual(1, query.Count);
		}

		[Test]
		public async Task ValuePropertySwapsToPropertyValueUsingEqualsToConstantAsync()
		{
			// check NH-2440
			var query = await ((from user in db.Users
									 where (user.Name.Equals("ayende"))
									 select user).ToListAsync());
			Assert.AreEqual(1, query.Count);
		}
	}
}