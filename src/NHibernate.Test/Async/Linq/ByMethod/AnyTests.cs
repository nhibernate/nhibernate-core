//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.Linq.ByMethod
{
	using System.Threading.Tasks;
	[TestFixture]
	public class AnyTestsAsync : LinqTestCase
	{
		[Test]
		public async Task AnySublistAsync()
		{
			var orders = await (db.Orders.Where(o => o.OrderLines.Any(ol => ol.Quantity == 5)).ToListAsync());
			Assert.That(orders.Count, Is.EqualTo(61));

			orders = await (db.Orders.Where(o => o.OrderLines.Any(ol => ol.Order == null)).ToListAsync());
			Assert.That(orders.Count, Is.EqualTo(0));
		}

		[Test]
		public async Task NestedAnyAsync()
		{
			var test = await ((from c in db.Customers
						where c.ContactName == "Bob" &&
							  (c.CompanyName == "NormalooCorp" ||
							   c.Orders.Any(o => o.OrderLines.Any(ol => ol.Discount < 20 && ol.Discount >= 10)))
						select c).ToListAsync());

			Assert.That(test.Count, Is.EqualTo(0));
		}

		[Test]
		public async Task ManyToManyAnyAsync()
		{
			var test = db.Orders.Where(o => o.Employee.FirstName == "test");
			var result = await (test.Where(o => o.Employee.Territories.Any(t => t.Description == "test")).ToListAsync());

			Assert.That(result.Count, Is.EqualTo(0));
		}

		[Test(Description = "NH-2654")]
		public async Task AnyWithCountAsync()
		{
			if (!Dialect.SupportsScalarSubSelects)
				Assert.Ignore("Dialect does not support scalar sub-selects");

			var result = await (db.Orders
				.AnyAsync(p => p.OrderLines.Count == 0));

			Assert.That(result, Is.False);
		}

		[Test]
		public void AnyWithFetchAsync()
		{
			//NH-3241
			Assert.DoesNotThrowAsync(async () =>
				{
				var result = await (db.Orders.Fetch(x => x.Customer).FetchMany(x => x.OrderLines).AnyAsync());
				}
			);
		}

		[Test]
		public void AnyWithFetchInSubQueryAsync()
		{
			Assert.DoesNotThrowAsync(async () =>
				{
					var result = await (db.Orders
					               .Where(x => x.Customer.CustomerId == "Test")
					               .Fetch(x => x.Customer)
					               .FetchMany(x => x.OrderLines)
					               .Where(x => x.Freight > 1)
					               .CountAsync());
				}
			);
		}
	}
}
