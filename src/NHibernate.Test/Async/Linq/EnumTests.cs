//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NHibernate.DomainModel.Northwind.Entities;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.Linq
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class EnumTestsAsync : LinqTestCase
	{
		[Test]
		public async Task CanQueryOnEnumStoredAsInt32_High_1Async()
		{
			await (CanQueryOnEnumStoredAsInt32Async(EnumStoredAsInt32.High, 1));
		}

		[Test]
		public async Task CanQueryOnEnumStoredAsInt32_Unspecified_2Async()
		{
			await (CanQueryOnEnumStoredAsInt32Async(EnumStoredAsInt32.Unspecified, 2));
		}


		public async Task CanQueryOnEnumStoredAsInt32Async(EnumStoredAsInt32 type, int expectedCount, CancellationToken cancellationToken = default(CancellationToken))
		{
			var query = await ((from user in db.Users
						 where user.Enum2 == type
						 select user).ToListAsync(cancellationToken));

			Assert.AreEqual(expectedCount, query.Count);
		}

		[Test]
		public async Task CanQueryOnEnumStoredAsString_Meduim_2Async()
		{
			await (CanQueryOnEnumStoredAsStringAsync(EnumStoredAsString.Medium, 2));

		}

		[Test]
		public async Task CanQueryOnEnumStoredAsString_Small_1Async()
		{
			await (CanQueryOnEnumStoredAsStringAsync(EnumStoredAsString.Small, 1));

		}

		public async Task CanQueryOnEnumStoredAsStringAsync(EnumStoredAsString type, int expectedCount, CancellationToken cancellationToken = default(CancellationToken))
		{
			var query = await ((from user in db.Users
						 where user.Enum1 == type
						 select user).ToListAsync(cancellationToken));

			Assert.AreEqual(expectedCount, query.Count);
		}
	}
}
