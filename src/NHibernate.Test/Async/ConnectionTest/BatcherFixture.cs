//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using NHibernate.Cfg;
using NHibernate.Util;
using NUnit.Framework;
using Environment = NHibernate.Cfg.Environment;

namespace NHibernate.Test.ConnectionTest
{
	using System.Threading.Tasks;
	[TestFixture]
	public class BatcherFixtureAsync : ConnectionManagementTestCase
	{
		protected override void Configure(Configuration config)
		{
			base.Configure(config);
			config.SetProperty(Environment.BatchSize, "10");
		}

		protected override ISession GetSessionUnderTest()
			=> OpenSession();

		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			{
				s.CreateQuery("delete from System.Object").ExecuteUpdate();
			}
		}

		[Test]
		public async Task CanCloseCommandsAndUseBatcherAsync()
		{
			using (var s = OpenSession())
			{
				// Need a generator strategy not causing insert at save.
				var silly = new YetAnother { Name = "Silly" };
				await (s.SaveAsync(silly));
				s.GetSessionImplementation().ConnectionManager.Batcher.CloseCommands();
				
				Assert.DoesNotThrowAsync(() => s.FlushAsync(), "Flush failure after closing commands.");
			}
		}
	}
}