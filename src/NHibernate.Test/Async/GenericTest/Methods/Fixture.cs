//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
using NHibernate.Criterion;
using NHibernate.DomainModel;
using NUnit.Framework;

namespace NHibernate.Test.GenericTest.Methods
{
	[TestFixture]
	public class FixtureAsync : TestCase
	{
		protected override string[] Mappings
		{
			get
			{
				return new string[] { "One.hbm.xml", "Many.hbm.xml", "Simple.hbm.xml" };
			}
		}

		private One one;

		protected override void OnSetUp()
		{
			base.OnSetUp();

			// create the objects to search on		
			one = new One();
			one.X = 20;
			one.Manies = new HashSet<Many>();

			Many many1 = new Many();
			many1.X = 10;
			many1.One = one;
			one.Manies.Add( many1 );

			Many many2 = new Many();
			many2.X = 20;
			many2.One = one;
			one.Manies.Add( many2 );

			var simple = new Simple(1) {Count = 1};

			using ( ISession s = OpenSession() )
			using( ITransaction t = s.BeginTransaction() )
			{
				s.Save( one );
				s.Save( many1 );
				s.Save( many2 );
				s.Save(simple, 1);
				t.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using( ISession session = OpenSession() )
			using( ITransaction tx = session.BeginTransaction() )
			{
				session.Delete( "from Many" );
				session.Delete( "from One" );
				session.Delete("from Simple");
				tx.Commit();
			}
			base.OnTearDown();
		}

		[Test]
		public async Task CriteriaAsync()
		{
			using( ISession s2 = OpenSession() )
			using( ITransaction t2 = s2.BeginTransaction() )
			{
				IList<One> results2 = await (s2.CreateCriteria( typeof( One ) )
					.Add( Expression.Eq( "X", 20 ) )
					.ListAsync<One>());

				Assert.AreEqual( 1, results2.Count );

				One one2 = results2[ 0 ];

				Assert.IsNotNull( one2, "Unable to load object" );
				Assert.AreEqual( one.X, one2.X, "Load failed" );
			}
		}

		[Test]
		public async Task QueryListAsync()
		{
			using( ISession s = OpenSession() )
			using( ITransaction t = s.BeginTransaction() )
			{
				IList<One> results = await (s.CreateQuery( "from One" ).ListAsync<One>());

				Assert.AreEqual( 1, results.Count );
			}
		}

		[Test]
		public async Task FilterAsync()
		{
			using( ISession s = OpenSession() )
			using( ITransaction t = s.BeginTransaction() )
			{
				One one2 = ( One ) await (s.CreateQuery( "from One" ).UniqueResultAsync());
				IList<Many> results = await ((await (s.CreateFilterAsync( one2.Manies, "where X = 10" )))
					.ListAsync<Many>());

				Assert.AreEqual( 1, results.Count );
				Assert.AreEqual( 10, results[ 0 ].X );
				await (t.CommitAsync());
			}
		}
	}
}
