//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Connection;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1985
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class SampleTestAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			// Test written with raw SQL queries, not compatible with all databases.
			return dialect is MsSql2000Dialect;
		}

		protected override void OnSetUp()
		{
			if (0 == ExecuteStatement("INSERT INTO DomainClass (Id, Label) VALUES (1, 'TEST record');"))
			{
				Assert.Fail("Insertion of test record failed.");
			}
		}

		protected override void OnTearDown()
		{
			base.OnTearDown();

			ExecuteStatement("DELETE FROM DomainClass WHERE Id=1;");
		}
		
		[Test]
		public async Task AllowDeletionOfImmutableObjectAsync()
		{
			using (ISession session = OpenSession())
			{
				Assert.DoesNotThrowAsync(async () =>
					{
						using (ITransaction trans = session.BeginTransaction())
						{
							var entity = await (session.GetAsync<DomainClass>(1));
							await (session.DeleteAsync(entity));

							await (trans.CommitAsync());
						}
					});
			}

			using (IConnectionProvider prov = ConnectionProviderFactory.NewConnectionProvider(cfg.Properties))
			{
				var conn = await (prov.GetConnectionAsync(CancellationToken.None));

				try
				{
					using (var comm = conn.CreateCommand())
					{
						comm.CommandText = "SELECT Id FROM DomainClass WHERE Id=1 AND Label='TEST record'";
						object result = await (comm.ExecuteScalarAsync());

						Assert.That(result == null, "Immutable object has not been deleted!");
					}
				}
				finally
				{
					prov.CloseConnection(conn);
				}
			}
		}
	}
}
