//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.GH1754
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		// Disable second level cache
		protected override string CacheConcurrencyStrategy => null;

		protected override void OnSetUp()
		{
			Sfi.Statistics.IsStatisticsEnabled = true;
		}

		protected override void OnTearDown()
		{
			Sfi.Statistics.IsStatisticsEnabled = false;
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.CreateQuery("delete from ChildEntity").ExecuteUpdate();
				session.CreateQuery("delete from System.Object").ExecuteUpdate();

				transaction.Commit();
			}
		}

		[Test]
		public async Task PersistIdentityDoNotImmediateExecuteQueryAsync()
		{
			using (var session = OpenSession())
			{
				Sfi.Statistics.Clear();
				await (session.PersistAsync(new Entity {Name = "Test"}));

				Assert.That(Sfi.Statistics.EntityInsertCount, Is.EqualTo(0));

				await (session.FlushAsync());

				Assert.That(Sfi.Statistics.EntityInsertCount, Is.EqualTo(1));
			}
		}

		[Test]
		public async Task PersistIdentityDoNotSaveIfSessionIsNotFlushedAsync()
		{
			using (var session = OpenSession())
			{
				await (session.PersistAsync(new Entity {Name = "Test"}));
			}

			using (var session = OpenSession())
			{
				var count = await (session.Query<Entity>().CountAsync());
				Assert.That(count, Is.EqualTo(0));
			}
		}

		// https://hibernate.atlassian.net/browse/HHH-12826
		[Test]
		public async Task CanAddChildAfterFlushAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				var child = new ChildEntity { Name = "Child" };
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					await (session.FlushAsync());
					parent.Children.Add(child);
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				Assert.That(parent.Children, Does.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		[Test]
		public async Task CanAddChildAfterFlushWithoutTransactionAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				var child = new ChildEntity { Name = "Child" };
				await (session.PersistAsync(parent));
				await (session.FlushAsync());
				parent.Children.Add(child);
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				Assert.That(parent.Children, Does.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		// https://hibernate.atlassian.net/browse/HHH-12846
		[Test]
		public async Task CanMergeWithTransientChildAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					await (t.CommitAsync());
				}

				var child = new ChildEntity { Name = "Child" };
				using (var t = session.BeginTransaction())
				{
					parent.Children.Add(child);
					await (session.MergeAsync(parent));
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				// Merge should duplicate child and leave original instance un-associated with the session.
				Assert.That(parent.Children, Does.Not.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		[Test]
		public async Task CanMergeWithTransientChildWithoutTransactionAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				await (session.PersistAsync(parent));
				await (session.FlushAsync());

				var child = new ChildEntity { Name = "Child" };
				parent.Children.Add(child);
				await (session.MergeAsync(parent));
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				// Merge should duplicate child and leave original instance un-associated with the session.
				Assert.That(parent.Children, Does.Not.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		[Test]
		public async Task CanChangeOwnershipOnFlushedParentsAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					await (session.PersistAsync(nextParent));
					parent.Children.Add(child);
					await (session.FlushAsync());
					nextParent.Children = parent.Children;
					parent.Children = new HashSet<ChildEntity>();
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipOnFlushedParentsWithoutTransactionAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				await (session.PersistAsync(parent));
				await (session.PersistAsync(nextParent));
				parent.Children.Add(child);
				await (session.FlushAsync());
				nextParent.Children = parent.Children;
				parent.Children = new HashSet<ChildEntity>();
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipFromFlushedParentToNonFlushedAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					parent.Children.Add(child);
					await (session.FlushAsync());
					await (session.PersistAsync(nextParent));
					nextParent.Children = parent.Children;
					parent.Children = new HashSet<ChildEntity>();
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipFromFlushedParentToNonFlushedWithoutTransactionAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				await (session.PersistAsync(parent));
				parent.Children.Add(child);
				await (session.FlushAsync());
				await (session.PersistAsync(nextParent));
				nextParent.Children = parent.Children;
				parent.Children = new HashSet<ChildEntity>();
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipFromNonFlushedParentToFlushedAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(nextParent));
					await (session.FlushAsync());
					await (session.PersistAsync(parent));
					parent.Children.Add(child);
					nextParent.Children = parent.Children;
					parent.Children = new HashSet<ChildEntity>();
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipFromNonFlushedParentToFlushedWithoutTransactionAsync()
		{
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				await (session.PersistAsync(nextParent));
				await (session.FlushAsync());
				await (session.PersistAsync(parent));
				parent.Children.Add(child);
				nextParent.Children = parent.Children;
				parent.Children = new HashSet<ChildEntity>();
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipOnNonFlushedParentsAsync()
		{
			// Seems moot but why not still checking this?
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					parent.Children.Add(child);
					await (session.PersistAsync(nextParent));
					nextParent.Children = parent.Children;
					parent.Children = new HashSet<ChildEntity>();
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}

		[Test]
		public async Task CanChangeOwnershipOnNonFlushedParentsWithoutTransactionAsync()
		{
			// Seems moot but why not still checking this?
			var parent = new EntityWithoutDeleteOrphan { Name = "Parent" };
			var nextParent = new EntityWithoutDeleteOrphan { Name = "NextParent" };
			var child = new ChildEntity { Name = "Child" };
			using (var session = OpenSession())
			{
				await (session.PersistAsync(parent));
				parent.Children.Add(child);
				await (session.PersistAsync(nextParent));
				nextParent.Children = parent.Children;
				parent.Children = new HashSet<ChildEntity>();
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(0));
				Assert.That(nextParent.Children, Has.Count.EqualTo(1));
				Assert.That(nextParent.Children, Does.Contain(child));
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0));
			}

			using (var session = OpenSession())
			{
				// Check after a reload
				parent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(parent.Id));
				nextParent = await (session.LoadAsync<EntityWithoutDeleteOrphan>(nextParent.Id));
				child = await (session.LoadAsync<ChildEntity>(child.Id));

				Assert.That(parent.Children, Has.Count.EqualTo(0), "Reloaded data");
				Assert.That(nextParent.Children, Has.Count.EqualTo(1), "Reloaded data");
				Assert.That(nextParent.Children, Does.Contain(child), "Reloaded data");
				Assert.That(nextParent.Children.Single().Id, Is.Not.EqualTo(0), "Reloaded data");
			}
		}
	}
}
