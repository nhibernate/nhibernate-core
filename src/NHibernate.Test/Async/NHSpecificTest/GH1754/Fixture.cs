//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.GH1754
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnSetUp()
		{
			Sfi.Statistics.IsStatisticsEnabled = true;
		}

		protected override void OnTearDown()
		{
			Sfi.Statistics.IsStatisticsEnabled = false;
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				// Firebird does not like deleting tables with auto-fk.
				foreach (var e in session.Query<Entity>())
				{
					e.Children.Clear();
				}
				session.Flush();

				session.CreateQuery("delete from System.Object").ExecuteUpdate();

				transaction.Commit();
			}
		}

		[Test]
		public async Task PersistIdentityDoNotImmediateExecuteQueryAsync()
		{
			using (var session = OpenSession())
			{
				Sfi.Statistics.Clear();
				await (session.PersistAsync(new Entity {Name = "Test"}));

				Assert.That(Sfi.Statistics.EntityInsertCount, Is.EqualTo(0));

				await (session.FlushAsync());

				Assert.That(Sfi.Statistics.EntityInsertCount, Is.EqualTo(1));
			}
		}

		[Test]
		public async Task PersistIdentityDoNotSaveIfSessionIsNotFlushedAsync()
		{
			using (var session = OpenSession())
			{
				await (session.PersistAsync(new Entity {Name = "Test"}));
			}

			using (var session = OpenSession())
			{
				var count = await (session.Query<Entity>().CountAsync());
				Assert.That(count, Is.EqualTo(0));
			}
		}

		// https://hibernate.atlassian.net/browse/HHH-12826
		[Test]
		public async Task CanAddChildAfterFlushAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				var child = new Entity { Name = "Child" };
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					await (session.FlushAsync());
					parent.Children.Add(child);
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				Assert.That(parent.Children, Does.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		[Test]
		public async Task CanAddChildAfterFlushWithoutTransactionAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				var child = new Entity { Name = "Child" };
				await (session.PersistAsync(parent));
				await (session.FlushAsync());
				parent.Children.Add(child);
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				Assert.That(parent.Children, Does.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		// https://hibernate.atlassian.net/browse/HHH-12846
		[Test]
		public async Task CanMergeWithTransientChildAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				using (var t = session.BeginTransaction())
				{
					await (session.PersistAsync(parent));
					await (t.CommitAsync());
				}

				var child = new Entity { Name = "Child" };
				using (var t = session.BeginTransaction())
				{
					parent.Children.Add(child);
					await (session.MergeAsync(parent));
					await (t.CommitAsync());
				}

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				// Merge should duplicate child and leave original instance un-associated with the session.
				Assert.That(parent.Children, Does.Not.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}

		[Test]
		public async Task CanMergeWithTransientChildWithoutTransactionAsync()
		{
			using (var session = OpenSession())
			{
				var parent = new Entity { Name = "Parent" };
				await (session.PersistAsync(parent));
				await (session.FlushAsync());

				var child = new Entity { Name = "Child" };
				parent.Children.Add(child);
				await (session.MergeAsync(parent));
				await (session.FlushAsync());

				Assert.That(parent.Children, Has.Count.EqualTo(1));
				// Merge should duplicate child and leave original instance un-associated with the session.
				Assert.That(parent.Children, Does.Not.Contain(child));
				Assert.That(parent.Children.Single().Id, Is.Not.EqualTo(0));
			}
		}
	}
}
