//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Linq;
using NHibernate.Mapping.ByCode;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3100
{
	using System.Threading.Tasks;

	[TestFixture]
	public class NullableBooleanFixtureAsync : TestCaseMappingByCode
	{
		protected override HbmMapping GetMappings()
		{
			var mapper = new ModelMapper();
			mapper.Class<Entity>(rc =>
			{
				rc.Id(x => x.Id, m => m.Generator(Generators.GuidComb));
				rc.Property(x => x.Flag);
			});

			return mapper.CompileMappingForAllExplicitlyAddedEntities();
		}

		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Save(new Entity {Flag = true});
				session.Save(new Entity {Flag = false});
				session.Save(new Entity {Flag = null});
				session.Flush();
				transaction.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");

				session.Flush();
				transaction.Commit();
			}
		}

		[Test]
		public async Task QueryWhereFlagIsTrueAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag == true).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(1));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsFalseAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag == false).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(1));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsNullAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag == null).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(1));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsNotTrueAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag != true).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(2));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsNotFalseAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag != false).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(2));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsNotNullAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag != null).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(2));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsEqualAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				// ReSharper disable once EqualExpressionComparison
				var result = await (session.Query<Entity>().Where(e => e.Flag == e.Flag).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(3));
			}
		}

		[Test]
		public async Task QueryWhereFlagIsNotEqualAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				// ReSharper disable once EqualExpressionComparison
				var result = await (session.Query<Entity>().Where(e => e.Flag != e.Flag).ToListAsync());

				Assert.That(result, Is.Empty);
			}
		}

		[Test]
		public async Task GetValueOrDefaultAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag.GetValueOrDefault()).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(1));
			}
		}

		[Test]
		public async Task GetValueOrDefaultFalseAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag.GetValueOrDefault(false)).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(1));
			}
		}

		[Test]
		public async Task GetValueOrDefaultTrueAsync()
		{
			using (var session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>().Where(e => e.Flag.GetValueOrDefault(true)).ToListAsync());

				Assert.That(result, Has.Count.EqualTo(2));
			}
		}
	}
}
