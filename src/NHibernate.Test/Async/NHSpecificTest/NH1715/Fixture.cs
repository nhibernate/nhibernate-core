//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1715
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnTearDown()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				s.Delete("from ClassA");
				tx.Commit();
			}
		}

		[Test]
		public async Task TimeSpanLargerThan2hAsync()
		{
			var time = new TimeSpan(0, 2, 1, 0);
			var entity = new ClassA {Time = time};
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.SaveAsync(entity));
				await (tx.CommitAsync());
			}

			using (ISession s = OpenSession())
			{
				Assert.AreEqual(time, (await (s.GetAsync<ClassA>(entity.Id))).Time);
			}
		}

		[Test]
		public async Task VerifyDaysShouldBeZeroInSmallTimeSpanAsync()
		{
			var time = new TimeSpan(1, 0, 0);
			var entity = new ClassA {Time = time};
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.SaveAsync(entity));
				await (tx.CommitAsync());
			}

			using (ISession s = OpenSession())
			{
				Assert.AreEqual(0, (await (s.GetAsync<ClassA>(entity.Id))).Time.Days);
			}
		}
	}
}