//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Criterion;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1760
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class SampleTestAsync : BugTestCase
	{
		private async Task FillDbAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var customer = new Customer {Name = "Alkampfer"};
				await (session.SaveAsync(customer, cancellationToken));
				var testClass = new TestClass { Id = new TestClassId { Customer = customer, SomeInt = 42 }, Value = "TESTVALUE" };
				await (session.SaveAsync(testClass, cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}

		private async Task CleanupAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				await (session.CreateQuery("delete from TestClass").ExecuteUpdateAsync(cancellationToken));
				await (session.CreateQuery("delete from Customer").ExecuteUpdateAsync(cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}

		[Test]
		public async Task CanUseCriteriaAsync()
		{
			await (FillDbAsync());
			int hqlCount;
			int criteriaCount;
			using (ISession session = OpenSession())
			{
				IList<TestClass> retvalue =
					await (session.CreateQuery("Select tc from TestClass tc join tc.Id.Customer cu where cu.Name = :name").SetString("name", "Alkampfer")
						.ListAsync<TestClass>());
				hqlCount = retvalue.Count;
			}

			using (ISession session = OpenSession())
			{
				ICriteria c =
					session.CreateCriteria(typeof (TestClass)).CreateAlias("Id.Customer", "IdCust").Add(Restrictions.Eq("IdCust.Name",
					                                                                                                    "Alkampfer"));
				IList<TestClass> retvalue = await (c.ListAsync<TestClass>());
				criteriaCount = retvalue.Count;
			}
			Assert.That(criteriaCount, Is.EqualTo(1));
			Assert.That(criteriaCount, Is.EqualTo(hqlCount));

			await (CleanupAsync());
		}

		[Test]
		public async Task TheJoinShouldBeOptionalAsync()
		{
			await (FillDbAsync());
			int criteriaCount;

			using (ISession session = OpenSession())
			{
				using (var ls = new SqlLogSpy())
				{
					ICriteria c = session.CreateCriteria(typeof(TestClass));
					IList<TestClass> retvalue = await (c.ListAsync<TestClass>());
					Assert.That(ls.GetWholeLog(), Does.Not.Contain("join"));
					criteriaCount = retvalue.Count;
				}
			}
			Assert.That(criteriaCount, Is.EqualTo(1));

			await (CleanupAsync());
		}
	}
}
