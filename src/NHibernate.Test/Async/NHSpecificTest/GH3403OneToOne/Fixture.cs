//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.GH3403OneToOne
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private Guid _id;

		protected override void OnSetUp()
		{
			using var session = OpenSession();
			using var transaction = session.BeginTransaction();
			var entity = new Entity1
			{
				Child = new Entity2()
			};

			entity.Child.Parent = entity;

			session.Save(entity);
			transaction.Commit();
			_id = entity.Id;
		}

		protected override void OnTearDown()
		{
			using var session = OpenSession();
			using var transaction = session.BeginTransaction();
			session.CreateQuery("delete from System.Object").ExecuteUpdate();

			transaction.Commit();
		}

		[Test]
		public async Task OrphanDeleteForDetachedOneToOneAsync()
		{
			Guid childId;
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var entity = await (session.GetAsync<Entity1>(_id));
				childId = entity.Child.Id;
				await (session.EvictAsync(entity.Child));
				entity.Child = null;

				await (session.FlushAsync());
				await (transaction.CommitAsync());
			}

			using (var session = OpenSession())
			{
				var entity = await (session.GetAsync<Entity1>(_id));
				Assert.That(entity, Is.Not.Null);
				Assert.That(entity.Child, Is.Null, "Unexpected child on parent");

				var child = await (session.GetAsync<Entity2>(childId));
				Assert.That(child , Is.Null, "Child is still in database");
			}
		}
	}
}
