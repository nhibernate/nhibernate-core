//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Data.Common;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1483
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnTearDown()
		{
			DeleteAll(true);
		}

		/// <summary>
		/// Tests that a Subclass can be loaded from second level cache as the specified 
		/// type of baseclass
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <typeparam name="TBaseClass">The type of the BaseClass to test.</typeparam>
		public async Task TestLoadFromSecondLevelCacheAsync<TBaseClass>(CancellationToken cancellationToken = default(CancellationToken)) where TBaseClass : BaseClass
		{
			//create a new persistent entity to work with
			Guid id = (await (CreateAndSaveNewSubclassAsync(cancellationToken))).Id;

			using (ISession session = OpenSession())
			{
				//make sure the entity can be pulled
				TBaseClass entity = await (session.GetAsync<TBaseClass>(id, cancellationToken));
				Assert.IsNotNull(entity);
			}

			//delete the subclass so we know we will be getting
			//it from the second level cache
			await (DeleteAllAsync(false, cancellationToken));

			using (ISession session = OpenSession())
			{
				//reload the subclass, this should pull it directly from cache
				TBaseClass restoredEntity = await (session.GetAsync<TBaseClass>(id, cancellationToken));

				Assert.IsNotNull(restoredEntity);
			}
		}

		/// <summary>
		/// Creates and save a new subclass to the database.
		/// </summary>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		/// <returns>the new persistent SubClass</returns>
		private async Task<SubClass> CreateAndSaveNewSubclassAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction trans = session.BeginTransaction())
				{
					SubClass entity = new SubClass();
					await (session.SaveAsync(entity, cancellationToken));
					await (trans.CommitAsync(cancellationToken));

					return entity;
				}
			}
		}

		/// <summary>
		/// Deletes all the baseclass entities from the persistence medium
		/// </summary>
		/// <param name="inNHibernateScope">whether to delete the entities though NHibernate
		/// scope our outside of the scope so that entities will still remain in the session cache</param>
		/// <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
		private async Task DeleteAllAsync(bool inNHibernateScope, CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				if (inNHibernateScope)
				{
					using (ITransaction trans = session.BeginTransaction())
					{
						await (session.DeleteAsync("from BaseClass", cancellationToken));
						await (trans.CommitAsync(cancellationToken));
					}
				}
				else
				{
					//delete directly from the db
					using (var cmd = session.Connection.CreateCommand())
					{
						cmd.CommandText = "DELETE FROM BaseClass";
						await (cmd.ExecuteNonQueryAsync(cancellationToken));
					}
				}
			}
		}

		/// <summary>
		/// Deletes all the baseclass entities from the persistence medium
		/// </summary>
		/// <param name="inNHibernateScope">whether to delete the entities though NHibernate
		/// scope our outside of the scope so that entities will still remain in the session cache</param>
		private void DeleteAll(bool inNHibernateScope)
		{
			using (ISession session = OpenSession())
			{
				if (inNHibernateScope)
				{
					using (ITransaction trans = session.BeginTransaction())
					{
						session.Delete("from BaseClass");
						trans.Commit();
					}
				}
				else
				{
					//delete directly from the db
					using (var cmd = session.Connection.CreateCommand())
					{
						cmd.CommandText = "DELETE FROM BaseClass";
						cmd.ExecuteNonQuery();
					}
				}
			}
		}

		/// <summary>
		/// Verifies that a subclass can be loaded from the second level cache
		/// </summary>
		[Test]
		public async Task LoadSubclassFromSecondLevelCacheAsync()
		{
			await (TestLoadFromSecondLevelCacheAsync<SubClass>());
		}

		/// <summary>
		/// Verifies that a subclass can be loaded from the second level cache
		/// </summary>
		[Test]
		public async Task LoadSubclassFromSecondLevelCacheAsBaseClassAsync()
		{
			await (TestLoadFromSecondLevelCacheAsync<BaseClass>());
		}
	}
}