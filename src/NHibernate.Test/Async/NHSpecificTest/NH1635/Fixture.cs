//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Text;
using NHibernate.Tool.hbm2ddl;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1635
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			// Mapping uses a scalar sub-select formula.
			return Dialect.SupportsScalarSubSelects;
		}

		private async Task CreateTestContextAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			var t1 = new ForumThread {Id = 1, Name = "Thread 1"};
			var t2 = new ForumThread {Id = 2, Name = "Thread 2"};
			var m1 = new ForumMessage {Id = 1, Name = "Thread 1: Message 1", ForumThread = t1};
			var m2 = new ForumMessage {Id = 2, Name = "Thread 1: Message 2", ForumThread = t1};
			var m3 = new ForumMessage {Id = 3, Name = "Thread 2: Message 1", ForumThread = t2};

			t1.Messages.Add(m1);
			t1.Messages.Add(m2);
			t2.Messages.Add(m3);

			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					await (session.SaveAsync(t1, cancellationToken));
					await (session.SaveAsync(t2, cancellationToken));

					await (transaction.CommitAsync(cancellationToken));
				}
			}
		}

		private async Task CleanUpAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				await (session.DeleteAsync("from ForumMessage", cancellationToken));
				await (session.DeleteAsync("from ForumThread", cancellationToken));
				await (session.FlushAsync(cancellationToken));
			}
		}

		protected override void CreateSchema()
		{
			var script = new StringBuilder();
			SchemaExport.Create(sl => script.Append(sl), true);
			Assert.That(script.ToString(), Does.Not.Contain("LatestMessage"));
		}

		[Test]
		public async Task TestAsync()
		{
			await (CreateTestContextAsync());
			using (ISession session = OpenSession())
			{
				var thread = await (session.GetAsync<ForumThread>(1));

				Assert.IsNotNull(thread.LatestMessage);
				Assert.IsTrue(thread.LatestMessage.Id == 2);

				await (session.FlushAsync());
			}
			await (CleanUpAsync());
		}
	}
}
