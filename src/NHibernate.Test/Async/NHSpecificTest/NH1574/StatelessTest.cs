//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1574
{
	using System.Threading.Tasks;
	[TestFixture]
	public class StatelessTestAsync : BugTestCase
	{
		[Test]
		public async Task StatelessManyToOneAsync()
		{
			using (ISession session = OpenSession())
			{
				var principal = new SpecializedPrincipal();
				var team = new SpecializedTeamStorage();
				principal.Team = team;
				await (session.SaveOrUpdateAsync(team));
				await (session.SaveOrUpdateAsync(principal));
				await (session.FlushAsync());
			}

			using (IStatelessSession session = Sfi.OpenStatelessSession())
			{
				IQuery query = session.CreateQuery("from SpecializedPrincipal p");
				IList<Principal> principals = await (query.ListAsync<Principal>());
				Assert.AreEqual(1, principals.Count);

				ITransaction trans = session.BeginTransaction();
				foreach (var principal in principals)
				{
					principal.Name = "Buu";
					await (session.UpdateAsync(principal));
				}
				await (trans.CommitAsync());
			}

			// cleanup
			using (ISession session = OpenSession())
			{
				await (session.DeleteAsync("from SpecializedTeamStorage"));
				await (session.DeleteAsync("from SpecializedPrincipal"));
				await (session.FlushAsync());
			}
		}
	}
}