//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Criterion;
using NHibernate.SqlCommand;
using NHibernate.Transform;

namespace NHibernate.Test.NHSpecificTest.NH3848
{
	using System.Threading.Tasks;
	using System.Threading;
	public class CriteriaTestFixtureAsync : FixtureAsync
	{
		protected override Task<IList<Customer>> GetCustomersWithOrdersEagerLoadedAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.Fetch("Orders")
						.SetResultTransformer(new DistinctRootEntityResultTransformer())
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingOnClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order", JoinType.LeftOuterJoin, Restrictions.Eq("Number", orderNumber))
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingFetchAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order", JoinType.InnerJoin, Restrictions.Eq("Number", orderNumber))
						.Fetch(SelectMode.Fetch, "Orders")
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingFetchAndWhereClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.Fetch(SelectMode.Fetch, "Orders")
						.CreateCriteria("Orders", JoinType.InnerJoin)
						.Add(Restrictions.Eq("Number", orderNumber))
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersAndCompaniesByOrderNumberUsingFetchAndWhereClauseAsync(ISession session, int orderNumber, string name, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order", JoinType.InnerJoin, Restrictions.Eq("Number", orderNumber))
						.Fetch(SelectMode.Fetch, "Orders")
						.CreateAlias("Companies", "company", JoinType.LeftOuterJoin, Restrictions.Eq("Name", name))
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersAndCompaniesByOrderNumberUsingFetchWithoutRestrictionsAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.Fetch(SelectMode.Fetch, "Orders")
						.CreateAlias("Orders", "order", JoinType.InnerJoin)
						.CreateAlias("Companies", "company", JoinType.LeftOuterJoin)
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersWithCompaniesByOrderNumberUsingOnClauseAsync(
			ISession session,
			int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order", JoinType.LeftOuterJoin, Restrictions.Eq("Number", orderNumber))
						.CreateAlias("Companies", "company", JoinType.LeftOuterJoin)
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingWhereClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateCriteria("Orders", "Order", JoinType.LeftOuterJoin)
						.Add(Restrictions.Eq("Number", orderNumber))
						.SetResultTransformer(new DistinctRootEntityResultTransformer())
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByNameUsingWhereClauseAsync(ISession session, string customerName, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order", JoinType.LeftOuterJoin)
						.Add(Restrictions.Eq("Name", "First Customer"))
						.SetResultTransformer(new DistinctRootEntityResultTransformer())
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingSubqueriesAndByNameUsingWhereClauseAsync(
			ISession session,
			int orderNumber,
			string customerName, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				var detachedCriteria =
					DetachedCriteria
						.For<Customer>()
						.CreateAlias("Orders", "order", JoinType.LeftOuterJoin, Restrictions.Eq("Number", orderNumber))
						.SetProjection(Projections.Id());

				return
					session
						.CreateCriteria<Customer>()
						.CreateAlias("Orders", "order1", JoinType.LeftOuterJoin)
						.Add(Subqueries.PropertyIn("Id", detachedCriteria))
						.Add(Restrictions.Eq("Name", customerName))
						.SetResultTransformer(new DistinctRootEntityResultTransformer())
						.ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetAllCustomersAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return session.CreateCriteria<Customer>().ListAsync<Customer>(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}
	}
}
