//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Criterion;
using NHibernate.SqlCommand;
using NHibernate.Transform;

namespace NHibernate.Test.NHSpecificTest.NH3848
{
	using System.Threading.Tasks;
	using System.Threading;
	public class QueryOverTestFixtureAsync : FixtureAsync
	{
		protected override Task<IList<Customer>> GetCustomersWithOrdersEagerLoadedAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return
				session
					.QueryOver<Customer>()
					.Fetch(SelectMode.Fetch, n => n.Orders)
					.TransformUsing(new DistinctRootEntityResultTransformer())
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingOnClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				return
				session
					.QueryOver<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.LeftOuterJoin,
						Restrictions.Eq("Number", orderNumber))
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingFetchAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;

				return
				session
					.QueryOver<Customer>()
					.JoinQueryOver(ec => ec.Orders, () => ordersAlias, JoinType.InnerJoin, Restrictions.Eq("Number", orderNumber))
					.Fetch(SelectMode.Fetch, () => ordersAlias)
					.TransformUsing(Transformers.DistinctRootEntity)
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingFetchAndWhereClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;

				return
				session
					.QueryOver<Customer>()
					.JoinQueryOver(ec => ec.Orders, () => ordersAlias, JoinType.InnerJoin)
					.Where(Restrictions.Eq("Number", orderNumber))
					.Fetch(SelectMode.Fetch, () => ordersAlias)
					.TransformUsing(Transformers.DistinctRootEntity)
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersAndCompaniesByOrderNumberUsingFetchAndWhereClauseAsync(ISession session, int orderNumber, string name, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				Company companiesAlias = null;

				return
				session
					.QueryOver<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.InnerJoin,
						Restrictions.Eq("Number", orderNumber))
					.Fetch(SelectMode.Fetch, () => ordersAlias)
					.JoinAlias(
						n => n.Companies,
						() => companiesAlias,
						JoinType.LeftOuterJoin,
						Restrictions.Eq("Name", name))
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersAndCompaniesByOrderNumberUsingFetchWithoutRestrictionsAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				Company companiesAlias = null;

				return
				session
					.QueryOver<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.InnerJoin)
					.Fetch(SelectMode.Fetch, () => ordersAlias)
					.JoinAlias(
						n => n.Companies,
						() => companiesAlias,
						JoinType.LeftOuterJoin)
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersWithCompaniesByOrderNumberUsingOnClauseAsync(
			ISession session,
			int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				Company companiesAlias = null;

				return
				session
					.QueryOver<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.LeftOuterJoin,
						Restrictions.Eq("Number", orderNumber))
					.JoinAlias(
						n => n.Companies,
						() => companiesAlias,
						JoinType.LeftOuterJoin)
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingWhereClauseAsync(ISession session, int orderNumber, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				return
				session
					.QueryOver<Customer>()
					.JoinQueryOver(n => n.Orders, () => ordersAlias, JoinType.LeftOuterJoin)
					.Where(Restrictions.Eq("Number", orderNumber))
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByNameUsingWhereClauseAsync(ISession session, string customerName, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				return
				session
					.QueryOver<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.LeftOuterJoin)
					.Where(Restrictions.Eq("Name", customerName))
					.TransformUsing(new DistinctRootEntityResultTransformer())
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetCustomersByOrderNumberUsingSubqueriesAndByNameUsingWhereClauseAsync(
			ISession session,
			int orderNumber,
			string customerName, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				Order ordersAlias = null;
				Order ordersAlias2 = null;
				var subquery =
				QueryOver
					.Of<Customer>()
					.JoinAlias(
						n => n.Orders,
						() => ordersAlias,
						JoinType.LeftOuterJoin,
						Restrictions.Eq("Number", orderNumber))
					.Select(n => n.Id);

				return
				session
					.QueryOver<Customer>()
					.JoinAlias(n => n.Orders, () => ordersAlias2, JoinType.LeftOuterJoin)
					.WithSubquery.WhereProperty(n => n.Id).In(subquery)
					.Where(Restrictions.Eq("Name", customerName))
					.TransformUsing(new DistinctRootEntityResultTransformer())
					.ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}

		protected override Task<IList<Customer>> GetAllCustomersAsync(ISession session, CancellationToken cancellationToken = default(CancellationToken))
		{
			try
			{
				return session.QueryOver<Customer>().ListAsync(cancellationToken);
			}
			catch (System.Exception ex)
			{
				return Task.FromException<IList<Customer>>(ex);
			}
		}
	}
}
