//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NUnit.Framework;
using NHibernate.Cfg;
using NHibernate.Event;

namespace NHibernate.Test.NHSpecificTest.GH1496
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private readonly AuditEventListener _auditEventListener = new AuditEventListener();
		private const string WORK_TYPENAME = "WORK";
		private const string HOME_TYPENAME = "HOME";
		private Person testPerson;
		private Employee testEmployee;
		
		protected override void Configure(Configuration configuration)
		{
			base.Configure(configuration);
			configuration.AppendListeners(ListenerType.PostUpdate, new[] { _auditEventListener });
		}

		protected override void OnSetUp()
		{
			SetupPerson();
			SetupEmployee();
		}

		private void SetupPerson()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					var address = new Address("Postal A", "State A", "Street A");
					var person = new Person(1, "Alex", address);
					session.Save(address);
					person.Address = address;
					session.Save(person);
					testPerson = person;

					address = new Address("Postal T", "State T", "Street T");
					person = new Person(2, "Tom", address);
					session.Save(address);
					person.Address = address;
					session.Save(person);

					session.Flush();
					transaction.Commit();
				}
			}
		}

		private void SetupEmployee()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					var employee = new Employee(1, "Alex");
					var contact = new Contact { Phone = "111-111-1111", ContactIdentifier = new ContactIdentifier(HOME_TYPENAME, "1") };
					session.Save(contact);
					employee.Contact = contact;
					session.Save(employee);
					testEmployee = employee;

					employee = new Employee(2, "Tom");
					contact = new Contact { Phone = "666-666-6666", ContactIdentifier = new ContactIdentifier(WORK_TYPENAME, "2") };
					session.Save(contact);
					employee.Contact = contact;
					session.Save(employee);

					session.Flush();
					transaction.Commit();
				}
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");
				session.Flush();
				transaction.Commit();
			}
		}

		[Test]
		public async Task EventListener_Entity_NoChangeAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var person = await (session.GetAsync<Person>(2));
					await (session.UpdateAsync(person));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(0), "Total 0 item changed");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_Entity_NoChangeAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					await (session.UpdateAsync(testPerson));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					},  "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_Entity_ChangePropertyAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var person = await (session.GetAsync<Person>(2));
					person.Name = "Steve";
					await (session.UpdateAsync(person));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.ToString() == "Steve"), Is.EqualTo(1), "Includes Modified Item 'Steve'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_Entity_ChangePropertyAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					testPerson.Name = "Mike";
					await (session.UpdateAsync(testPerson));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_EntityWithCompositeId_ChangePropertyAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var employee = await (session.GetAsync<Employee>(2));
					employee.Name = "Steve";
					await (session.UpdateAsync(employee));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.ToString() == "Steve"), Is.EqualTo(1), "Includes Modified Item 'Steve'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_EntityWithCompositeId_ChangePropertyAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					testEmployee.Name = "Mike";
					await (session.UpdateAsync(testEmployee));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_ManyToOne_ChangePropertyAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var person = await (session.GetAsync<Person>(2));
					person.Address.Street = "Street B";
					await (session.UpdateAsync(person));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.ToString() == "Street B"), Is.EqualTo(1), "Includes Modified Item 'Street B'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_ManyToOne_ChangePropertyAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					testPerson.Address.Street = "Street E";
					await (session.UpdateAsync(testPerson));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_Entity_SetNewManyToOneAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var person = await (session.GetAsync<Person>(2));
					var address = new Address("Postal B", "State B", "Street B");
					await (session.SaveAsync(address));
					person.Address = address;
					await (session.UpdateAsync(person));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.GetType().Name.Contains("Address")), Is.EqualTo(1), "Includes Modified Item type of Address'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_Entity_SetNewManyToOneAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					var address = new Address("Postal D", "State D", "Street D");
					await (session.SaveAsync(address));
					testPerson.Address = address;
					await (session.UpdateAsync(testPerson));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_ManyToOneWithCompositeId_ChangePropertyAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var employee = await (session.GetAsync<Employee>(2));
					employee.Contact.Phone = "333-333-3333";
					await (session.UpdateAsync(employee));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.ToString() == "333-333-3333"), Is.EqualTo(1), "Includes Modified Item '333-333-3333'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_ManyToOneWithCompositeId_ChangePropertyAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					testEmployee.Contact.Phone = "666-666-6666";
					await (session.UpdateAsync(testEmployee));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}

		[Test]
		public async Task EventListener_Entity_SetNewManyToOneWithCompositeIdAsync()
		{
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var employee = await (session.GetAsync<Employee>(2));
					var contact = employee.Contact;
					employee.Contact = null;
					await (session.DeleteAsync(contact));

					await (session.UpdateAsync(employee));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.OldState.GetType().Name.Contains("Contact")), Is.EqualTo(1), "Includes Modified Item type of Contact'");
					_auditEventListener.Stop();
				}
			}

			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					_auditEventListener.Start();
					var employee = await (session.GetAsync<Employee>(2));
					var contact = new Contact { Phone = "444-444-4444", ContactIdentifier = new ContactIdentifier(HOME_TYPENAME, "2") };
					await (session.SaveAsync(contact));
					employee.Contact = contact;
					await (session.UpdateAsync(employee));
					await (session.FlushAsync());
					await (transaction.CommitAsync());
					Assert.That(_auditEventListener.ModifiedItems.Count, Is.EqualTo(1), "Total 1 item changed");
					Assert.That(_auditEventListener.ModifiedItems.Count(x => x.State.GetType().Name.Contains("Contact")), Is.EqualTo(1), "Includes Modified Item type of Contact'");
					_auditEventListener.Stop();
				}
			}
		}

		[Test]
		public async Task SelectBeforeUpdate_Entity_SetNewManyToOneWithCompositeIdAsync()
		{
			_auditEventListener.Stop();
			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					var contact = testEmployee.Contact;
					testEmployee.Contact = null;
					await (session.DeleteAsync(contact));
					await (session.UpdateAsync(testEmployee));

					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}

			using (var session = OpenSession())
			{
				using (var transaction = session.BeginTransaction())
				{
					var contact = new Contact { Phone = "555-555-5555", ContactIdentifier = new ContactIdentifier(HOME_TYPENAME, "1") };
					await (session.SaveAsync(contact));
					testEmployee.Contact = contact;
					await (session.UpdateAsync(testEmployee));
					Assert.DoesNotThrowAsync(async () =>
					{
						await (session.FlushAsync());
						await (transaction.CommitAsync());
					}, "Saving data failed.");
				}
			}
		}
	}
}
