//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Cfg;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.SqlConverterAndMultiQuery
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private const string hqlQuery = "select a.Id from ClassA a";

		protected override void Configure(Configuration configuration)
		{
			configuration.DataBaseIntegration(x => x.ExceptionConverter<SqlConverter>());
		}

		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			// MsSqlCe throws InvalidOperationException instead of a DbException for these tests, preventing
			// the test SqlConverter to do its job.
			return !(Dialect is MsSqlCeDialect);
		}

		[Test]
		public void NormalHqlShouldThrowUserExceptionAsync()
		{
			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				s.Connection.Close();
				Assert.ThrowsAsync<UnitTestException>(() =>
												 s.CreateQuery(hqlQuery).ListAsync());
			}
		}

		[Test]
		public void MultiHqlShouldThrowUserExceptionAsync()
		{
			var driver = Sfi.ConnectionProvider.Driver;
			if (!driver.SupportsMultipleQueries)
				Assert.Ignore("Driver {0} does not support multi-queries", driver.GetType().FullName);

			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				var multi = s.CreateMultiQuery();
				multi.Add(hqlQuery);
				s.Connection.Close();
				Assert.ThrowsAsync<UnitTestException>(() => multi.ListAsync());
			}
		}

		[Test]
		public void NormalCriteriaShouldThrowUserExceptionAsync()
		{
			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				s.Connection.Close();
				Assert.ThrowsAsync<UnitTestException>(() =>
												 s.CreateCriteria(typeof (ClassA)).ListAsync());
			}
		}

		[Test]
		public void MultiCriteriaShouldThrowUserExceptionAsync()
		{
			var driver = Sfi.ConnectionProvider.Driver;
			if (!driver.SupportsMultipleQueries)
				Assert.Ignore("Driver {0} does not support multi-queries", driver.GetType().FullName);

			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				var multi = s.CreateMultiCriteria();
				multi.Add(s.CreateCriteria(typeof (ClassA)));
				s.Connection.Close();
				Assert.ThrowsAsync<UnitTestException>(() => multi.ListAsync());
			}
		}
	}
}
