//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3234
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private async Task EvictAsync(ISession session, GridWidget widget, CancellationToken cancellationToken = default(CancellationToken))
		{
			await (session.EvictAsync(widget, cancellationToken));
			await (Sfi.EvictAsync(widget.GetType(), cancellationToken));
		}

		private static async Task SaveAsync(ISession session, GridWidget widget, CancellationToken cancellationToken = default(CancellationToken))
		{
			if (widget.Id != Guid.Empty && !session.Contains(widget))
				widget = await (session.MergeAsync(widget, cancellationToken));

			await (session.SaveOrUpdateAsync(widget, cancellationToken));
			await (session.FlushAsync(cancellationToken));
		}

		protected override void OnTearDown()
		{
			using (var session=OpenSession())
			using (var tx = session.BeginTransaction())
			{
				session.Delete("from System.Object");
				tx.Commit();
			}
		}

		[Test]
		public async Task ShouldNotFailWhenAddingNewLevelsAsync()
		{
			using (var session = OpenSession())
			{
				var widget = new GridWidget
					{
						Levels =
							{
								new GridLevel(),
								new GridLevel()
							},
					};

				await (SaveAsync(session, widget));
				await (EvictAsync(session, widget));

				widget.Levels.Add(new GridLevel());

				await (SaveAsync(session, widget));
				await (EvictAsync(session, widget));

				var loaded = await (session.GetAsync<GridWidget>(widget.Id));

				Assert.That(loaded.Levels.Count, Is.EqualTo(3));
			}
		}

		[Test]
		public async Task ShouldNotFailWhenReplacingLevelsAsync()
		{
			using (var session = OpenSession())
			{
				var widget = new GridWidget
					{
						Levels =
							{
								new GridLevel(),
								new GridLevel()
							},
					};

				await (SaveAsync(session, widget));
				await (EvictAsync(session, widget));

				widget.Levels.Clear();
				widget.Levels.Add(new GridLevel());

				await (SaveAsync(session, widget));
				await (EvictAsync(session, widget));

				var loaded = await (session.GetAsync<GridWidget>(widget.Id));

				Assert.That(loaded.Levels.Count, Is.EqualTo(1));
			}
		}
	}
}
