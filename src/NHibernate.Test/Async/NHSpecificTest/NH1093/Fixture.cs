//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using log4net;
using NHibernate.Cfg;
using NUnit.Framework;
using log4net.Core;

namespace NHibernate.Test.NHSpecificTest.NH1093
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.CacheProvider, string.Empty);
			configuration.SetProperty(Environment.UseQueryCache, "true");
			configuration.SetProperty(Environment.UseSecondLevelCache, "true");
		}

		protected override string CacheConcurrencyStrategy
		{
			get { return null; }
		}

		private async Task CleanupAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (var s = OpenSession())
			using (var t = s.BeginTransaction())
			{
				await (s.CreateQuery("delete from SimpleCached").ExecuteUpdateAsync(cancellationToken));
				await (t.CommitAsync(cancellationToken));
			}
		}

		private async Task FillDbAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			{
				using (ITransaction tx = s.BeginTransaction())
				{
					await (s.SaveAsync(new SimpleCached {Description = "Simple 1"}, cancellationToken));
					await (s.SaveAsync(new SimpleCached {Description = "Simple 2"}, cancellationToken));
					await (tx.CommitAsync(cancellationToken));
				}
			}
		}

		[Test]
		[Description("Without configured cache, shouldn't throw exception")]
		public async Task NoExceptionAsync()
		{
			await (FillDbAsync());
			await (NormalListAsync());
			await (CriteriaQueryCacheAsync());
			await (HqlQueryCacheAsync());
			await (CleanupAsync());
		}

		private async Task HqlQueryCacheAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			{
				await (s.CreateQuery("from SimpleCached").SetCacheable(true).ListAsync<SimpleCached>(cancellationToken));
			}
		}

		private async Task CriteriaQueryCacheAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			{
				await (s.CreateCriteria<SimpleCached>().SetCacheable(true).ListAsync<SimpleCached>(cancellationToken));
			}
		}

		private async Task NormalListAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession s = OpenSession())
			{
				await (s.CreateCriteria<SimpleCached>().ListAsync<SimpleCached>(cancellationToken));
			}
		}

		protected override DebugSessionFactory BuildSessionFactory()
		{
			// Without configured cache, should log warn.
			using (var ls = new LogSpy(LogManager.GetLogger(typeof(FixtureAsync).Assembly, "NHibernate"), Level.Warn))
			{
				var factory = base.BuildSessionFactory();
				Assert.That(ls.GetWholeLog(), Does.Contain("Fake cache used"));
				return factory;
			}
		}
	}
}
