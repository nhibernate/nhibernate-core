//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.GH2067
{
	using System.Threading.Tasks;
	namespace BaseInterfaceAndDerivedClassProxies
	{
		using System.Threading.Tasks;

		[TestFixture]
		public class BaseInterfaceAndDerivedClassProxiesFixtureAsync : TestCaseMappingByCode
		{
			private Guid _id = Guid.NewGuid();

			protected override HbmMapping GetMappings()
			{
				var mapper = new ModelMapper();
				mapper.Class<BaseInterface>(
					rc =>
					{
						rc.Proxy(typeof(IBase));
						rc.Id(x => x.Id, m => m.Generator(Generators.GuidComb));
						rc.Property(x => x.BaseName);
					});

				mapper.JoinedSubclass<Derived1>(
					rc => { rc.Property(x => x.Derived1Name); });

				mapper.JoinedSubclass<Derived2>(
					rc => { rc.Property(x => x.Derived2Name); });

				return mapper.CompileMappingForAllExplicitlyAddedEntities();
			}

			[Test]
			public async Task ProxyForBaseAsync()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync(typeof(IBase), _id));
					Assert.That(((IBase) b).Id, Is.EqualTo(_id));
				}
			}

			[Test]
			public async Task ProxyForDerived1Async()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync(typeof(Derived1), _id));

					Assert.That(b, Is.InstanceOf(typeof(Derived1)));
					Assert.That(b, Is.InstanceOf(typeof(IBase)));
					Assert.That(((Derived1) b).Id, Is.EqualTo(_id));
				}
			}

			[Test]
			public async Task ProxyForDerived2Async()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync(typeof(Derived2), _id));

					Assert.That(b, Is.InstanceOf(typeof(Derived1)));
					Assert.That(b, Is.InstanceOf(typeof(Derived2)));
					Assert.That(b, Is.InstanceOf(typeof(IBase)));
					Assert.That(((Derived2) b).Id, Is.EqualTo(_id));
				}
			}
		}
	}
}
