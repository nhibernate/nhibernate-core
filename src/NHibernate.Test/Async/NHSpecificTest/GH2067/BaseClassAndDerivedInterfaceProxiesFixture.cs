//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.GH2067
{
	using System.Threading.Tasks;
	namespace BaseClassAndDerivedInterfaceProxies
	{
		using System.Threading.Tasks;

		[TestFixture]
		public class BaseClassAndDerivedInterfaceProxiesFixtureAsync : TestCaseMappingByCode
		{
			private Guid _id = Guid.NewGuid();

			protected override HbmMapping GetMappings()
			{
				var mapper = new ModelMapper();
				mapper.Class<Base>(
					rc =>
					{
						rc.Id(x => x.Id, m => m.Generator(Generators.GuidComb));
						rc.Property(x => x.BaseName);
					});

				mapper.JoinedSubclass<Derived1Interface>(
					rc =>
					{
						rc.Proxy(typeof(IDerived1));
						rc.Property(x => x.Derived1Name);
					});

				mapper.JoinedSubclass<Derived2Interface>(
					rc =>
					{
						rc.Proxy(typeof(IDerived2));
						rc.Property(x => x.Derived2Name);
					});

				return mapper.CompileMappingForAllExplicitlyAddedEntities();
			}

			[Test]
			public async Task ProxyForBaseClassAsync()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync<Base>(_id));
					Assert.That(b.Id, Is.EqualTo(_id));
				}
			}

			[Test]
			public async Task ProxyForDerived1InterfaceAsync()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync(typeof(Derived1Interface), _id));

					Assert.That(b, Is.InstanceOf(typeof(IDerived1)));
//					Assert.That(b, Is.InstanceOf(typeof(Base)));
					Assert.That(((IDerived1) b).Id, Is.EqualTo(_id));
				}
			}

			[Test]
			public async Task ProxyForDerived2InterfaceAsync()
			{
				using (var s = OpenSession())
				{
					var b = await (s.LoadAsync(typeof(Derived2Interface), _id));

					Assert.That(b, Is.InstanceOf(typeof(IDerived2)));
//					Assert.That(b, Is.InstanceOf(typeof(IDerived1)));
//					Assert.That(b, Is.InstanceOf(typeof(Base)));
					Assert.That(((IDerived2) b).Id, Is.EqualTo(_id));
				}
			}
		}
	}
}
