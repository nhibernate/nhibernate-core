//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1531
{
	using System.Threading.Tasks;
	using System.Threading;
	// This test is only an Example to show the wrong mapping in the original issue.

	[TestFixture]
	public class SampleTestAsync : BugTestCase
	{
		private async Task FillDbAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				var entity = new Parent {Id = 1};
				entity.AddNewChild();
				await (session.SaveAsync(entity, cancellationToken));

				var entity2 = new Parent {Id = 2};
				await (session.SaveAsync(entity2, cancellationToken));

				await (session.FlushAsync(cancellationToken));
			}
		}

		private async Task CleanDbAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				await (session.DeleteAsync("from Parent", cancellationToken));
				await (session.FlushAsync(cancellationToken));
			}
		}

		[Test]
		public async Task ReparentingShouldNotFailAsync()
		{
			await (FillDbAsync());
			using (ISession session = OpenSession())
			{
				var parent1 = await (session.GetAsync<Parent>(1));
				var parent2 = await (session.GetAsync<Parent>(2));

				Assert.AreEqual(1, parent1.Children.Count);
				Assert.AreEqual(0, parent2.Children.Count);

				Child p1Child = parent1.Children[0];

				Assert.IsNotNull(p1Child);

				parent1.DetachAllChildren();
				parent2.AttachNewChild(p1Child);

				await (session.SaveOrUpdateAsync(parent1));
				await (session.SaveOrUpdateAsync(parent2));

				// NHibernate.ObjectDeletedException : 
				// deleted object would be re-saved by cascade (remove deleted object from associations)[NHibernate.Test.NHSpecificTest.NH1531.Child#0]

				await (session.FlushAsync());
			}

			using (ISession session = OpenSession())
			{
				// should exist only one child
				var l = await (session.CreateQuery("from Child").ListAsync());
				Assert.That(l.Count, Is.EqualTo(1));
			}
			await (CleanDbAsync());
		}

		[Test]
		public async Task DeleteParentDeleteChildInCascadeAsync()
		{
			await (FillDbAsync());
			await (CleanDbAsync());

			// The TestCase is checking the empty db
		}
	}
}