//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using NHibernate.Dialect;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.NH3984
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			using (var tx = s.BeginTransaction())
			{
				s.CreateSQLQuery("delete from LogEntry").ExecuteUpdate();
				tx.Commit();
			}
		}

		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return dialect is MsSql2008Dialect;
		}

		[Test]
		public async Task ShouldBePossibleToReadMillisecondsFromDatetime2ViaCreateSQLQueryAsync()
		{
			var now = DateTime.UtcNow;

			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var entry = new LogEntry { Text = "Test", CreatedAt = now };
				await (session.SaveAsync(entry));

				await (session.FlushAsync());
				await (transaction.CommitAsync());
			}

			using (var session = OpenSession())
			{
				var datetimeViaQuery = await (session
					.Query<LogEntry>()
					.Select(x => x.CreatedAt)
					.SingleAsync());

				Assert.That(datetimeViaQuery.Millisecond, Is.EqualTo(now.Millisecond));

				var datetimeViaCreateSqlQuery = (await (session
					.CreateSQLQuery("SELECT CreatedAt FROM LogEntry")
					.ListAsync()))
					.Cast<DateTime>()
					.Single();

				Assert.That(datetimeViaCreateSqlQuery.Millisecond, Is.EqualTo(now.Millisecond));
			}
		}

		[Test]
		public async Task ShouldBePossibleToReadTicksFromDatetime2ViaCreateSQLQueryAsync()
		{
			var now = DateTime.Now;

			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var entry = new LogEntry { Text = "Test", CreatedAt = now };
				await (session.SaveAsync(entry));

				await (session.FlushAsync());
				await (transaction.CommitAsync());
			}

			using (var session = OpenSession())
			{
				var datetimeViaQuery = await (session
					.Query<LogEntry>()
					.Select(x => x.CreatedAt)
					.SingleAsync());

				Assert.That(datetimeViaQuery.Ticks, Is.EqualTo(now.Ticks));

				var datetimeViaCreateSqlQuery = (await (session
					.CreateSQLQuery("SELECT CreatedAt FROM LogEntry")
					.ListAsync()))
					.Cast<DateTime>()
					.Single();

				Assert.That(datetimeViaCreateSqlQuery.Ticks, Is.EqualTo(now.Ticks));
			}
		}
	}
}
