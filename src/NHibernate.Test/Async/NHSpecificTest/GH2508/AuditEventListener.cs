//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using NHibernate.Cfg;
using NHibernate.Event;
using NHibernate.Persister.Entity;

namespace NHibernate.Test.NHSpecificTest.GH2508
{
	public partial class AuditEventListener :  IPreCollectionUpdateEventListener
	{
		public Task OnPreUpdateCollectionAsync(PreCollectionUpdateEvent @event, CancellationToken cancellationToken)
		{
			try
			{
				var ownerEntity = @event.AffectedOwnerOrNull;
				var collectionEntry = @event.Session.PersistenceContext.GetCollectionEntry(@event.Collection);
				if (!collectionEntry.LoadedPersister.IsInverse)
					return Task.CompletedTask;

				var abstractCollectionPersister = collectionEntry.LoadedPersister as Persister.Collection.AbstractCollectionPersister;
				if (abstractCollectionPersister == null)
					return Task.CompletedTask;

				var ownerEntityPersister = abstractCollectionPersister.OwnerEntityPersister;
				ownerEntityPersister.GetPropertyValues(ownerEntity);
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}
	}
}
