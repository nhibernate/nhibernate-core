//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using log4net;
using NHibernate.Cfg;
using NHibernate.Event;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1332
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public partial class FixtureAsync : BugTestCase
	{
		private static readonly ILog log = LogManager.GetLogger(typeof(FixtureAsync));

		protected override void Configure(Configuration configuration)
		{
			configuration.SetProperty(Environment.UseSecondLevelCache, "false");
			configuration.SetProperty(Environment.UseQueryCache, "false");
			configuration.SetProperty(Environment.CacheProvider, null);
			configuration.SetListener(ListenerType.PostCommitDelete, new PostCommitDelete());
		}

		[Test]
		public async Task BugAsync()
		{
			A a = new A("NH1332");
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				await (s.SaveAsync(a));
				await (tx.CommitAsync());
			}
			using (LogSpy ls = new LogSpy(log))
			{
				using (ISession s = OpenSession())
				using (ITransaction tx = s.BeginTransaction())
				{
					await (s.DeleteAsync(a));
					await (tx.CommitAsync());
				}
				Assert.AreEqual(1, ls.Appender.GetEvents().Length);
				string logs = ls.Appender.GetEvents()[0].RenderedMessage;
				Assert.Greater(logs.IndexOf("PostCommitDelete fired."), -1);
			}
		}

		public partial class PostCommitDelete : IPostDeleteEventListener
		{
			public Task OnPostDeleteAsync(PostDeleteEvent @event, CancellationToken cancellationToken)
			{
				try
				{
					log.Debug("PostCommitDelete fired.");
					return Task.CompletedTask;
				}
				catch (System.Exception ex)
				{
					return Task.FromException<object>(ex);
				}
			}
			public void OnPostDelete(PostDeleteEvent @event)
			{
				log.Debug("PostCommitDelete fired.");
			}
		}
	}
	public partial class Fixture : BugTestCase
	{

		public partial class PostCommitDelete : IPostDeleteEventListener
		{
			public Task OnPostDeleteAsync(PostDeleteEvent @event, CancellationToken cancellationToken)
			{
				try
				{
					log.Debug("PostCommitDelete fired.");
					return Task.CompletedTask;
				}
				catch (System.Exception ex)
				{
					return Task.FromException<object>(ex);
				}
			}
		}
	}
}
