//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using NHibernate.Cache;

namespace NHibernate.Test.NHSpecificTest.NH2898
{
	using System.Threading.Tasks;
	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class BinaryFormatterCache : ICache
	{

		public Task<object> GetAsync(object key)
		{
			try
			{
				var entry = _hashtable[key] as byte[];
				if (entry == null)
					return Task.FromResult<object>(null);

				var fmt = new BinaryFormatter();
				using (var stream = new MemoryStream(entry))
				{
					return Task.FromResult<object>(fmt.Deserialize(stream));
				}
			}
			catch (System.Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task PutAsync(object key, object value)
		{
			try
			{
				var fmt = new BinaryFormatter();
				using (var stream = new MemoryStream())
				{
					fmt.Serialize(stream, value);
					_hashtable[key] = stream.ToArray();
				}
				return Task.CompletedTask;
			}
			catch (System.Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task RemoveAsync(object key)
		{
			try
			{
				_hashtable.Remove(key);
				return Task.CompletedTask;
			}
			catch (System.Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task ClearAsync()
		{
			try
			{
				_hashtable.Clear();
				return Task.CompletedTask;
			}
			catch (System.Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task LockAsync(object key)
		{
			return Task.CompletedTask;
			// local cache, so we use synchronization
		}

		public Task UnlockAsync(object key)
		{
			return Task.CompletedTask;
			// local cache, so we use synchronization
		}
	}
}