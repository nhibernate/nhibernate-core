//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.GH1170
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		// Only the set case is tested, because other cases were not affected:
		// - bags delete everything first.
		// - indexed collections use their index, which is currently not mappable as a composite index with nullable
		//   column. All index columns are forced to not-nullable by mapping implementation. When using a formula in
		//   index, they use the element, but its columns are also forced to not-nullable.

		[Test]
		public async Task DeleteComponentWithNullAsync()
		{
			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var parent = await (session.Query<Parent>().SingleAsync());
				Assert.That(
					parent.ChildComponents,
					Has.Count.EqualTo(2).And.One.Property(nameof(ChildComponent.SomeString)).Null);
				parent.ChildComponents.Remove(parent.ChildComponents.Single(c => c.SomeString == null));
				await (tx.CommitAsync());
			}

			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var parent = await (session.Query<Parent>().SingleAsync());
				Assert.That(
					parent.ChildComponents,
					Has.Count.EqualTo(1).And.None.Property(nameof(ChildComponent.SomeString)).Null);
				await (tx.CommitAsync());
			}
		}

		[Test]
		public async Task UpdateComponentWithNullAsync()
		{
			// Updates on set are indeed handled as delete/insert, so this test is not really needed.
			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var parent = await (session.Query<Parent>().SingleAsync());
				Assert.That(
					parent.ChildComponents,
					Has.Count.EqualTo(2).And.One.Property(nameof(ChildComponent.SomeString)).Null);
				parent.ChildComponents.Single(c => c.SomeString == null).SomeString = "no more null";
				await (tx.CommitAsync());
			}

			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var parent = await (session.Query<Parent>().SingleAsync());
				Assert.That(
					parent.ChildComponents,
					Has.Count.EqualTo(2).And.None.Property(nameof(ChildComponent.SomeString)).Null);
				await (tx.CommitAsync());
			}
		}

		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				var parent = new Parent();
				parent.ChildComponents.Add(new ChildComponent { SomeBool = true, SomeString = "something" });
				parent.ChildComponents.Add(new ChildComponent { SomeBool = false, SomeString = null });
				session.Save(parent);

				tx.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var tx = session.BeginTransaction())
			{
				session.Delete("from Parent");
				tx.Commit();
			}
		}
	}
}
