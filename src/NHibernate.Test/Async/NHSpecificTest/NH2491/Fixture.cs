//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH2491
{
	using System.Threading.Tasks;

	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			using (var tx = s.BeginTransaction())
			{
				s.Delete("from System.Object");
				tx.Commit();
			}
		}

		[Test]
		public async Task InheritanceSameColumnNameAsync()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var subClass = new SubClass();
				var referencing = new ReferencingClass() { SubClass = subClass };
				await (session.SaveAsync(subClass));
				await (session.SaveAsync(referencing));

				await (transaction.CommitAsync());
			}
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var referencing = await (session.CreateQuery("from ReferencingClass")
					.UniqueResultAsync<ReferencingClass>());

				// accessing a property of the base class to activate lazy loading
				// this line crashes because it tries to find the base class by
				// the wrong column name.
				BaseClass another;
				Assert.That(() => another = referencing.SubClass.Another, Throws.Nothing);

				await (transaction.CommitAsync());
			}
		}
	}
}
