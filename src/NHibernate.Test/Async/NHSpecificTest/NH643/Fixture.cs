//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH643
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		public override string BugNumber
		{
			get { return "NH643"; }
		}

		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return TestDialect.SupportsEmptyInsertsOrHasNonIdentityNativeGenerator;
		}

		private object parentId;

		[Test]
		public async Task CacheAndLazyCollectionsAsync()
		{
			await (PrepareDataAsync());
			try
			{
				await (AddChildAsync());
				await (CheckChildrenCountAsync(1));
				await (AddChildAsync());
				await (CheckChildrenCountAsync(2));
			}
			finally
			{
				await (CleanUpAsync());
			}
		}

		private async Task PrepareDataAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			using (ITransaction tx = session.BeginTransaction())
			{
				parentId = await (session.SaveAsync(new Parent(), cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}

		private async Task CleanUpAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			using (ITransaction tx = session.BeginTransaction())
			{
				await (session.DeleteAsync(await (session.GetAsync<Parent>(parentId, cancellationToken)), cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}

		private async Task AddChildAsync(CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			using (ITransaction tx = session.BeginTransaction())
			{
				var parent = await (session.GetAsync<Parent>(parentId, cancellationToken));
				Child child = new Child();
				parent.AddChild(child);
				await (NHibernateUtil.InitializeAsync(parent.Children, cancellationToken));
				await (tx.CommitAsync(cancellationToken));
			}
		}

		private async Task CheckChildrenCountAsync(int count, CancellationToken cancellationToken = default(CancellationToken))
		{
			using (ISession session = OpenSession())
			{
				var parent = await (session.GetAsync<Parent>(parentId, cancellationToken));
				Assert.AreEqual(count, parent.Children.Count);
			}
		}
	}
}
