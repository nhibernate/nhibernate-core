//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.GH1921
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return TestDialect.NativeGeneratorSupportsBulkInsertion;
		}

		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var e1 = new Entity {Name = "Bob"};
				session.Save(e1);

				var e2 = new Entity {Name = "Sally"};
				session.Save(e2);

				transaction.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.CreateQuery("delete from System.Object").ExecuteUpdate();

				transaction.Commit();
			}
		}

		[Theory]
		public async Task DmlInsertAsync(bool filtered)
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				if (filtered)
					session.EnableFilter("NameFilter").SetParameter("name", "Bob");
				var rowCount = await (session.CreateQuery("insert into Entity (Name) select e.Name from Entity e").ExecuteUpdateAsync());
				await (transaction.CommitAsync());

				// If the DML has to take the filter into account, then below Assert should be
				// Assert.That(rowCount, Is.EqualTo(filtered ? 1 : 2));
				Assert.That(rowCount, Is.EqualTo(2));
			}
		}

		[Theory]
		public async Task DmlUpdateAsync(bool filtered)
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				if (filtered)
					session.EnableFilter("NameFilter").SetParameter("name", "Bob");
				var rowCount = await (session.CreateQuery("update Entity e set Name = 'newName'").ExecuteUpdateAsync());
				await (transaction.CommitAsync());

				// If the DML has to take the filter into account, then below Assert should be
				// Assert.That(rowCount, Is.EqualTo(filtered ? 1 : 2));
				Assert.That(rowCount, Is.EqualTo(2));
			}
		}

		[Theory]
		public async Task DmlDeleteAsync(bool filtered)
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				if (filtered)
					session.EnableFilter("NameFilter").SetParameter("name", "Bob");
				var rowCount = await (session.CreateQuery("delete Entity").ExecuteUpdateAsync());
				await (transaction.CommitAsync());

				// If the DML has to take the filter into account, then below Assert should be
				// Assert.That(rowCount, Is.EqualTo(filtered ? 1 : 2));
				Assert.That(rowCount, Is.EqualTo(2));
			}
		}
	}
}
