//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Data.Common;
using NHibernate.Cache;
using NHibernate.Cache.Entry;
using NHibernate.Collection;
using NHibernate.Collection.Generic;
using NHibernate.Engine;
using NHibernate.Id;
using NHibernate.Metadata;
using NHibernate.Persister.Collection;
using NHibernate.Persister.Entity;
using NHibernate.Type;
using NUnit.Framework;
using System.Collections.Generic;

namespace NHibernate.Test.NHSpecificTest
{
	using System.Threading.Tasks;
	using System.Threading;
	internal partial class CollectionPersisterStub : ICollectionPersister
	{

		#region ICollectionPersister Members

		public Task InsertRowsAsync(IPersistentCollection collection, object key, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.InsertRows implementation
		}

		public Task UpdateRowsAsync(IPersistentCollection collection, object key, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.UpdateRows implementation
		}

		public Task DeleteRowsAsync(IPersistentCollection collection, object key, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.DeleteRows implementation
		}

		public Task RecreateAsync(IPersistentCollection collection, object key, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.Recreate implementation
		}

		public Task RemoveAsync(object id, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.Remove implementation
		}

		public Task<object> ReadElementAsync(DbDataReader rs, object owner, string[] aliases, ISessionImplementor session, CancellationToken cancellationToken)
		{
			// TODO:  Add CollectionPersisterStub.ReadElement implementation
			return Task.FromResult<object>(null);
		}

		public Task<object> ReadIndexAsync(DbDataReader rs, string[] aliases, ISessionImplementor session, CancellationToken cancellationToken)
		{
			// TODO:  Add CollectionPersisterStub.ReadIndex implementation
			return Task.FromResult<object>(null);
		}

		public Task InitializeAsync(object key, ISessionImplementor session, CancellationToken cancellationToken)
		{
			return Task.CompletedTask;
			// TODO:  Add CollectionPersisterStub.Initialize implementation
		}

		public Task<object> ReadKeyAsync(DbDataReader rs, string[] aliases, ISessionImplementor session, CancellationToken cancellationToken)
		{
			// TODO:  Add CollectionPersisterStub.ReadKey implementation
			return Task.FromResult<object>(null);
		}

		public Task<object> ReadIdentifierAsync(DbDataReader rs, string alias, ISessionImplementor session, CancellationToken cancellationToken)
		{
			// TODO:  Add CollectionPersisterStub.ReadIdentifier implementation
			return Task.FromResult<object>(null);
		}

		#endregion
	}

	[TestFixture]
	public class SetFixtureAsync: TestCase
	{
		[Test]
		public async Task DisassembleAndAssembleAsync()
		{
			using (ISession s = OpenSession())
			{
				ISessionImplementor si = (ISessionImplementor) s;
				var set = new PersistentGenericSet<int>(si, new HashSet<int>());

				set.Add(10);
				set.Add(20);

				CollectionPersisterStub collectionPersister = new CollectionPersisterStub();
				collectionPersister.ElementType = NHibernateUtil.Int32;

				object disassembled = await (set.DisassembleAsync(collectionPersister, CancellationToken.None));

				var assembledSet = new PersistentGenericSet<int>(si);
				await (assembledSet.InitializeFromCacheAsync(collectionPersister, disassembled, null, CancellationToken.None));

				Assert.AreEqual(2, assembledSet.Count);
				Assert.IsTrue(assembledSet.Contains(10));
				Assert.IsTrue(assembledSet.Contains(20));
			}
		}

		protected override string[] Mappings => Array.Empty<string>();
	}
}
