//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1235
{
	using System.Threading.Tasks;

	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(NHibernate.Dialect.Dialect dialect)
		{
			// Specific to MsSql2000Dialect. Does not apply to MsSql2005Dialect
			return dialect.GetType().Equals(typeof (MsSql2000Dialect));
		}

		protected override void OnTearDown()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				s.Delete("from SomeClass");
				tx.Commit();
			}
		}

		[Test]
		public async Task TestAsync()
		{
			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				SomeClass obj;

				for (int i = 0; i < 10; i++)
				{
					obj = new SomeClass();
					obj.Name = "someclass " + (i + 1).ToString();
					await (s.SaveAsync(obj));
				}

				await (tx.CommitAsync());
			}


			using (ISession s = OpenSession())
			using (ITransaction tx = s.BeginTransaction())
			{
				IQuery qry = s.CreateQuery("from SomeClass")
					.SetMaxResults(5);

				IList<SomeClass> list = await (qry.ListAsync<SomeClass>());

				Assert.AreEqual(5, list.Count, "Should have returned 5 entities");

				await (tx.CommitAsync());
			}
		}

	}
}
