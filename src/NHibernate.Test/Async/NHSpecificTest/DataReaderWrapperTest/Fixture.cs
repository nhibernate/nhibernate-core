//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using NUnit.Framework;
using NHibernate.Multi;

namespace NHibernate.Test.NHSpecificTest.DataReaderWrapperTest
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		private const int id = 1333;

		protected override bool AppliesTo(Engine.ISessionFactoryImplementor factory)
		{
			return factory.ConnectionProvider.Driver.SupportsMultipleQueries;
		}

		protected override void OnSetUp()
		{
			var ent = new TheEntity { TheValue = "Hola", Id = id };
			using (var s = OpenSession())
			using (var tx = s.BeginTransaction())
			{
				s.Save(ent);
				tx.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var s = OpenSession())
			using (var tx = s.BeginTransaction())
			{
				s.Delete("from System.Object");
				tx.Commit();
			}
		}

		[Test, Obsolete]
		public async Task CanUseDatareadersGetValueAsync()
		{
			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				var crit = s.CreateCriteria(typeof (TheEntity));
				var multi = s.CreateMultiCriteria();
				multi.Add(crit);
				var res = (IList) (await (multi.ListAsync()))[0];
				Assert.That(res.Count, Is.EqualTo(1));
			}
		}

		[Test]
		public async Task CanUseDatareadersGetValueWithQueryBatchAsync()
		{
			using (var s = OpenSession())
			using (s.BeginTransaction())
			{
				var crit = s.CreateCriteria(typeof (TheEntity));
				var multi = s.CreateQueryBatch();
				multi.Add<TheEntity>(crit);
				var res = await (multi.GetResultAsync<TheEntity>(0, CancellationToken.None));
				Assert.That(res.Count, Is.EqualTo(1));
			}
		}
	}
}
