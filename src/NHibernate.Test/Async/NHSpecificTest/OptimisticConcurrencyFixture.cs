//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using NHibernate.DomainModel;
using NHibernate.DomainModel.NHSpecific;
using NUnit.Framework;
using NUnit.Framework.Constraints;

namespace NHibernate.Test.NHSpecificTest
{
	using System.Threading.Tasks;
	[TestFixture]
	public class OptimisticConcurrencyFixtureAsync : TestCase
	{
		protected override string[] Mappings
		{
			get { return new string[] {"Multi.hbm.xml", "NHSpecific.Optimistic.hbm.xml"}; }
		}

		// NH-768
		[Test]
		public async Task DeleteOptimisticAsync()
		{
			using (ISession s = OpenSession())
			{
				Optimistic op = new Optimistic();
				op.Bag = new List<string> {"xyz"};

				await (s.SaveAsync(op));
			}

			using (ISession s = OpenSession())
			{
				await (s.DeleteAsync("from Optimistic"));
				await (s.FlushAsync());
			}
		}

		[Test]
		public async Task StaleObjectStateCheckWithNormalizedEntityPersisterAsync()
		{
			Top top = new Top();
			top.Name = "original name";

			try
			{
				using (ISession session = OpenSession())
				{
					await (session.SaveAsync(top));
					await (session.FlushAsync());

					using (ISession concurrentSession = OpenSession())
					{
						Top sameTop = (Top) await (concurrentSession.GetAsync(typeof(Top), top.Id));
						sameTop.Name = "another name";
						await (concurrentSession.FlushAsync());
					}

					top.Name = "new name";

					var expectedException = Sfi.Settings.IsBatchVersionedDataEnabled
						? (IResolveConstraint) Throws.InstanceOf<StaleStateException>().And.Message.Contains("UPDATE rootclass")
						: Throws.InstanceOf<StaleObjectStateException>();

					Assert.That(() => session.FlushAsync(), expectedException);
				}
			}
			finally
			{
				using (ISession session = OpenSession())
				{
					await (session.DeleteAsync("from Top"));
					await (session.FlushAsync());
				}
			}
		}

		[Test]
		public async Task StaleObjectStateCheckWithEntityPersisterAndOptimisticLockAsync()
		{
			Optimistic optimistic = new Optimistic();
			optimistic.String = "original string";

			try
			{
				using (ISession session = OpenSession())
				{
					await (session.SaveAsync(optimistic));
					await (session.FlushAsync());

					using (ISession concurrentSession = OpenSession())
					{
						Optimistic sameOptimistic = (Optimistic) await (concurrentSession.GetAsync(typeof(Optimistic), optimistic.Id));
						sameOptimistic.String = "another string";
						await (concurrentSession.FlushAsync());
					}

					optimistic.String = "new string";

					var expectedException = Sfi.Settings.IsBatchVersionedDataEnabled
						? (IResolveConstraint) Throws.InstanceOf<StaleStateException>().And.Message.Contains("UPDATE Optimistic")
						: Throws.InstanceOf<StaleObjectStateException>();

					Assert.That(() => session.FlushAsync(), expectedException);
				}
			}
			finally
			{
				using (ISession session = OpenSession())
				{
					await (session.DeleteAsync("from Optimistic"));
					await (session.FlushAsync());
				}
			}
		}
	}
}