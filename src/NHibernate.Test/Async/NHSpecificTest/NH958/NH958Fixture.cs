//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate;

using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH958
{
	using System.Threading.Tasks;
	[TestFixture]
    public class NH958FixtureAsync : BugTestCase
    {
		[Test]
		public async Task MergeWithAny1Async()
		{
			Person person;

			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				person = new Male("Test");

				for (int i = 0; i < 10; i++)
				{
					person.AddHobby(new Hobby("Hobby_" + i.ToString()));
				}

				await (session.SaveOrUpdateAsync(person));
				await (transaction.CommitAsync());
			}

			person.Hobbies.Clear();

			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				person = await (session.MergeAsync(person));
				await (transaction.CommitAsync());
			}

			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				await (session.DeleteAsync(person));
				await (transaction.CommitAsync());
			}
		}

		[Test]
		public async Task MergeWithAny2Async()
		{
			Person person;

			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				person = new Male("Test");
				await (session.SaveAsync(person));
				await (transaction.CommitAsync());
			}

			person.AddHobby(new Hobby("Hobby_1"));
			person.AddHobby(new Hobby("Hobby_2"));

			using (ISession session = OpenSession())
            using (ITransaction transaction = session.BeginTransaction())
            {
                // the transient hobby "test" is inserted and updated
                person = await (session.MergeAsync(person));
                await (transaction.CommitAsync());
            }

			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				await (session.DeleteAsync(person));
				await (transaction.CommitAsync());
			}
        }
    }
}
