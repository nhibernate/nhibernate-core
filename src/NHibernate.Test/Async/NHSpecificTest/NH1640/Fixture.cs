//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1640
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		[Test]
		public async Task FetchJoinShouldNotReturnProxyTestAsync()
		{
			int savedId;
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					var sub = new Entity {Id = 2, Name = "Child 2"};
					savedId = (int) await (session.SaveAsync(new Entity {Id = 1, Name = "Parent 1", Child = sub}));
					await (tx.CommitAsync());
				}
			}

			using (IStatelessSession session = Sfi.OpenStatelessSession())
			{
				var parent =
					await (session.CreateQuery("from Entity p join fetch p.Child where p.Id=:pId").SetInt32("pId", savedId).UniqueResultAsync						<Entity>());
				Assert.That(parent.Child,Is.TypeOf(typeof (Entity)));
			}

			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.DeleteAsync("from Entity"));
					await (tx.CommitAsync());
				}
			}
		}
	}
}