//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.GH2465
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return dialect.SupportsScalarSubSelects;
		}

		protected override void OnSetUp()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var applicant = new Entity {IdentityNames = {"name1", "name2"}};
				session.Save(applicant);

				transaction.Commit();
			}
		}

		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");
				transaction.Commit();
			}
		}

		[Test]
		public async Task ContainsInsideValueCollectionAsync()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var identityNames = new[] {"name1", "x"};
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.Any(n => identityNames.Contains(n)))
					.ToListAsync());
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.All(n => identityNames.Contains(n)))
					.ToListAsync());
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.FirstOrDefault(n => identityNames.Contains(n)) == "test")
					.ToListAsync());

				await (transaction.CommitAsync());
			}
		}

		[Test]
		public async Task EqualsInsideValueCollectionAsync()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var value = "test";
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.Any(n => n == value))
					.ToListAsync());
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.Any(n => (string) n == value))
					.ToListAsync());
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.All(n => n == value))
					.ToListAsync());
				await (session
					.Query<Entity>()
					.Where(a => a.IdentityNames.FirstOrDefault(n => n == "test") == "test")
					.ToListAsync());

				await (transaction.CommitAsync());
			}
		}
	}
}
