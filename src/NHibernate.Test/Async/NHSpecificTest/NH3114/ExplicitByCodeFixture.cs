//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Mapping.ByCode;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3114
{
	using System.Threading.Tasks;
	[TestFixture]
	public class ExplicitByCodeFixtureAsync : TestCaseMappingByCode
	{
		protected override HbmMapping GetMappings()
		{
			var mapper = new ModelMapper();
			mapper.Class<Entity>(rc =>
			{
				rc.Id(i => i.Id, m => m.Generator(Generators.GuidComb));
				rc.Component(p => p.FirstComponent,
					m =>
					{
						m.Set(c => c.ComponentCollection,
							c => c.Table("FirstTable"),
							c => c.Element());
						m.Property(p => p.ComponentProperty, p => p.Column("FirstProperty"));
					});
				rc.Component(p => p.SecondComponent,
					m =>
					{
						m.Set(c => c.ComponentCollection,
							c => c.Table("SecondTable"),
							c => c.Element());
						m.Property(p => p.ComponentProperty, p => p.Column("SecondProperty"));
					});
			});

			return mapper.CompileMappingForAllExplicitlyAddedEntities();
		}

		protected override void OnTearDown()
		{
			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				session.Delete("from Entity");

				session.Flush();
				transaction.Commit();
			}
		}

		[Test]
		public async Task Component_WithSameType_ButDifferentTables_IsStoredInTheCorrectTableAndCollectionAsync()
		{
			Guid previouslySavedId;
			using (var session = OpenSession())
			{
				var entity = new Entity();
				entity.FirstComponent = new Component();
				entity.FirstComponent.ComponentProperty = "First";
				entity.FirstComponent.ComponentCollection = new List<string> { "FirstOne", "FirstTwo", "FirstThree" };
				// not setting entity.SecondComponent; it must not contain the contents of entity.FirstComponent later
				await (session.SaveOrUpdateAsync(entity));
				await (session.FlushAsync());
				previouslySavedId = entity.Id;
			}

			using (var session = OpenSession())
			{
				var entity = await (session.GetAsync<Entity>(previouslySavedId));
				Assert.IsNotNull(entity);
				Assert.IsNotNull(entity.FirstComponent);
				Assert.AreEqual("First", entity.FirstComponent.ComponentProperty);
				CollectionAssert.AreEquivalent(new[] { "FirstOne", "FirstTwo", "FirstThree" }, entity.FirstComponent.ComponentCollection);
				//Assert.IsNull(entity.SecondComponent); // cannot check SecondComponent for null, since components are apparently always initialized
				Assert.AreNotEqual("First", entity.SecondComponent.ComponentProperty);
				CollectionAssert.IsEmpty(entity.SecondComponent.ComponentCollection);
			}
		}
	}
}
