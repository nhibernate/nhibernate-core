//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1898
{
	using System.Threading.Tasks;
	[TestFixture]
	public class SampleTestAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return dialect as MsSql2005Dialect != null;
		}

		[Test]
		public async Task TypeOfParametersShouldBeSetCorrectlyAsync()
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					var entity = new DomainClass {Id = 1, Data = "some oldValue data"};
					await (session.SaveAsync(entity));
					await (tx.CommitAsync());
				}
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction tx = session.BeginTransaction())
				{
					await (session.GetNamedQuery("replaceQuery").SetString("old", "oldValue").SetString("new", "newValue").ExecuteUpdateAsync());
					await (tx.CommitAsync());
				}
				using (ITransaction tx = session.BeginTransaction())
				{
					var entity = await (session.GetAsync<DomainClass>(1));

					Assert.AreEqual("some newValue data", entity.Data);
					await (session.DeleteAsync(entity));
					await (tx.CommitAsync());
				}
			}
		}
	}
}
