//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Globalization;
using System.Linq;
using NHibernate.Linq;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH3961
{
	using System.Threading.Tasks;
	[TestFixture]
	public class DateParametersComparedToAsync : BugTestCase
	{
		private DateTime _testDate;
		private CultureInfo _backupCulture;
		private CultureInfo _backupUICulture;
		private readonly CultureInfo _testCulture = CultureInfo.GetCultureInfo("fr-FR");

		protected override void OnSetUp()
		{
			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				// day > 12 for ensuring a mdy/dmy mix-up would cause a failure.
				_testDate = new DateTime(2017, 03, 15);
				var e1 = new Entity { Name = "Bob", NullableDateTime = _testDate, NonNullableDateTime = _testDate };
				session.Save(e1);

				var e2 = new Entity { Name = "Sally", NullableDateTime = _testDate.AddDays(1), NonNullableDateTime = _testDate.AddDays(1) };
				session.Save(e2);

				session.Flush();
				transaction.Commit();
			}

			_backupCulture = CultureInfo.CurrentCulture;
			_backupUICulture = CultureInfo.CurrentUICulture;
			// "CultureInfo.CurrentCulture =": Fx 4.6 only; affect trough Thread.CurrentThread instead if in need of supporting a previous Fx.
			// This test needs a culture using a dmy date format. If the test system does not support fr-FR, try find another one...
			// This test assumes the SQL user language is set as English, otherwise it may not showcase the failure.
			CultureInfo.CurrentCulture = _testCulture;
			CultureInfo.CurrentUICulture = _testCulture;
		}

		protected override void OnTearDown()
		{
			using (ISession session = OpenSession())
			using (ITransaction transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");

				session.Flush();
				transaction.Commit();
			}
			CultureInfo.CurrentCulture = _backupCulture;
			CultureInfo.CurrentUICulture = _backupUICulture;
		}

		// Non-reg test case
		[Test]
		public async Task NonNullableShouldBeCultureAgnosticAsync()
		{
			using (ISession session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>()
					.Where(e => e.NonNullableDateTime == _testDate)
					.ToListAsync());

				Assert.AreEqual(1, result.Count);
				Assert.AreEqual("Bob", result[0].Name);
			}
		}

		// Non-reg test case
		[Test]
		public async Task NullableShouldBeCultureAgnosticAsync()
		{
			using (ISession session = OpenSession())
			using (session.BeginTransaction())
			{
				var result = await (session.Query<Entity>()
					.Where(e => e.NullableDateTime == _testDate)
					.ToListAsync());

				Assert.AreEqual(1, result.Count);
				Assert.AreEqual("Bob", result[0].Name);
			}
		}
	}
}
