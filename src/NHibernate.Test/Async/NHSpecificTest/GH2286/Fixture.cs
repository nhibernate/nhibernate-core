//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using NUnit.Framework;
using NHibernate.Linq;

namespace NHibernate.Test.NHSpecificTest.GH2286
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override void OnTearDown()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				session.Delete("from System.Object");

				session.Flush();
				transaction.Commit();
			}
		}

		[Test]
		public async Task FilterOnJoinedSubclassKeyAsync()
		{
			using (var session = OpenSession())
			using (var transaction = session.BeginTransaction())
			{
				var c1 = new IndividualCustomer {Id = 2, Name = "2"};
				var c2 = new IndividualCustomer {Id = 4, Name = "4"};
				await (session.SaveAsync(c1));
				await (session.SaveAsync(c2));

				await (session.FlushAsync());
				await (transaction.CommitAsync());
			}

			using (var s = OpenSession())
			{
				var count = (await (s.Query<IndividualCustomer>().Select(c => c.Id).ToListAsync())).Count;
				s.EnableFilter("filterName");
				var countFiltered = (await (s.Query<IndividualCustomer>().Select(c => c.Id).ToListAsync())).Count;

				Assert.AreEqual(2, count);
				Assert.AreEqual(1, countFiltered);
			}
		}
	}
}
