//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using NHibernate.Dialect;
using NHibernate.Event;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1714
{
	using System.Threading.Tasks;
	using System.Threading;
	[TestFixture]
	public class UseCaseDemonstrationFixtureAsync : BugTestCase
	{
		protected override void OnSetUp()
		{
			base.OnSetUp();
			var listener = new IPreInsertEventListener[this.cfg.EventListeners.PreInsertEventListeners.Length + 1];
			this.cfg.EventListeners.PreInsertEventListeners.CopyTo(listener, 0);
			listener[listener.Length - 1] = new MyCustomEventListener();

			this.cfg.EventListeners.PreInsertEventListeners = listener;
		}

		protected override bool AppliesTo(NHibernate.Dialect.Dialect dialect)
		{
			return dialect as MsSql2005Dialect != null;
		}

		[Test]
		public async Task DbCommandsFromEventListenerShouldBeEnlistedInRunningTransactionAsync()
		{
			using (ISession session = this.OpenSession())
			{
				using (var tx = session.BeginTransaction())
				{
					var entity = new DomainClass();
					await (session.SaveAsync(entity));

					await (tx.CommitAsync());
				}
			}

			using (ISession session = this.OpenSession())
			{
				using (var tx = session.BeginTransaction())
				{
					await (session.DeleteAsync("from DomainClass"));
					await (session.DeleteAsync("from LogClass"));
					await (tx.CommitAsync());
				}
			}
		}
	}

	/// <content>
	/// Contains generated async methods
	/// </content>
	public partial class MyCustomEventListener : IPreInsertEventListener
	{
		public async Task<bool> OnPreInsertAsync(PreInsertEvent e, CancellationToken cancellationToken)
		{
			if(e.Entity is DomainClass == false)
				return false;

			// this will join into the parent's transaction
			using (var session = e.Session.SessionWithOptions().Connection().OpenSession())
			{
				//should insert log record here
				await (session.SaveAsync(new LogClass(), cancellationToken));
				await (session.FlushAsync(cancellationToken));
			}

			return false;
		}
	}
}