//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections.Generic;
using NHibernate.Dialect;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH1756
{
	using System.Threading.Tasks;
	[TestFixture]
	public class FixtureAsync : BugTestCase
	{
		protected override bool AppliesTo(Dialect.Dialect dialect)
		{
			return dialect is MsSql2000Dialect;
		}

		[Test]
		public async Task SaveTransient_Then_Update_OkAsync()
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					var book = new BookNotGenerated {Name = "test book", Pages = new List<Page>(),};
					await (session.SaveAsync(book));
					book.Name = "modified test book";
					await (transaction.CommitAsync());
				}
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					await (session.CreateQuery("delete from BookNotGenerated").ExecuteUpdateAsync());
					await (transaction.CommitAsync());
				}
			}
		}

		[Test]
		[Description("Work with AutoFlush on commit")]
		public async Task SaveTransient_Then_UpdateAsync()
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					var book = new Book { Name = "test book", Pages = new List<Page>(), };
					await (session.SaveAsync(book));
					book.Name = "modified test book";
					await (transaction.CommitAsync());
				}
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					await (session.CreateQuery("delete from Book").ExecuteUpdateAsync());
					await (transaction.CommitAsync());
				}
			}
		}

		[Test]
		public async Task SaveTransient_Then_Update_BugAsync()
		{
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					var book = new Book {Name = "test book", Pages = new List<Page>(),};
					await (session.SaveAsync(book));
					book.Name = "modified test book";
					await (session.FlushAsync());
					await (transaction.CommitAsync());
				}
			}
			using (ISession session = OpenSession())
			{
				using (ITransaction transaction = session.BeginTransaction())
				{
					await (session.CreateQuery("delete from Book").ExecuteUpdateAsync());
					await (transaction.CommitAsync());
				}
			}
		}
	}
}