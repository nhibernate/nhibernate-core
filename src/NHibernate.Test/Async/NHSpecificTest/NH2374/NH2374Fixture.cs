//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Collections;
using NUnit.Framework;

namespace NHibernate.Test.NHSpecificTest.NH2374
{
	using System.Threading.Tasks;
	[TestFixture]
	public class NH2374FixtureAsync : BugTestCase
	{
		[Test]
		public async Task OneToOne_with_EntityMode_MapAsync()
		{
			int id;

			using (ISession sroot = OpenSession())
			{
				using (ISession s = sroot.SessionWithOptions().Connection().OpenSession())
				{
					using (ITransaction t = s.BeginTransaction())
					{
						var parent = new Hashtable();
						var child = new Hashtable
						            	{
						            		{"Parent", parent}
						            	};

						parent["Child"] = child;

						id = (int) await (s.SaveAsync("Parent", parent));
						await (s.FlushAsync());

						await (t.CommitAsync());
					}
				}
			}

			using (ISession s = OpenSession())
			{
				using (ITransaction t = s.BeginTransaction())
				{
					var p = await (s.GetAsync("Parent", id)) as IDictionary;

					Assert.That(p["Child"], Is.Not.Null);

					await (s.DeleteAsync("Parent", p));

					await (t.CommitAsync());
				}
			}
		}

		[Test]
		public async Task OneToOne_with_EntityMode_PocoAsync()
		{
			int id;

			using (ISession s = OpenSession())
			{
				using (ITransaction t = s.BeginTransaction())
				{
					var parent = new Hashtable();
					var child = new Hashtable
					            	{
					            		{"Parent", parent}
					            	};

					parent["Child"] = child;

					id = (int) await (s.SaveAsync("Parent", parent));
					await (s.FlushAsync());

					await (t.CommitAsync());
				}
			}

			using (ISession s = OpenSession())
			{
				using (ITransaction t = s.BeginTransaction())
				{
					var p = await (s.GetAsync("Parent", id)) as IDictionary;

					Assert.That(p["Child"], Is.Not.Null);

					await (s.DeleteAsync("Parent", p));

					await (t.CommitAsync());
				}
			}
		}
	}
}