<Tests>
   <TestGroup Name="Misc">
      <Description></Description>
      <Test>
         <Query><![CDATA[select foo from foo in class NHibernate.DomainModel.Foo, baz in class NHibernate.DomainModel.Baz where foo in baz.FooArray.elements and 3 = some baz.IntArray.elements and 4 > all baz.IntArray.indices]]></Query>
         <Result><![CDATA[Exception unexpected token: . near line 1, column 149]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="ArrayExpr">
      <Description></Description>
      <Test>
         <Query><![CDATA[from Order ord where ord.items[0].id = 1234]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( = ( . ( [ ( . ord items ) 0 ) id ) 1234 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="ComplexConstructor">
      <Description></Description>
      <Test>
         <Query><![CDATA[select new Foo(count(bar)) from bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE bar ) ) ( select ( ( Foo ( count bar ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Foo(count(bar),(select count(*) from doofus d where d.gob = 'fat' )) from bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE bar ) ) ( select ( ( Foo ( count bar ) ( query ( SELECT_FROM ( from ( RANGE doofus d ) ) ( select ( count * ) ) ) ( where ( = ( . d gob ) 'fat' ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesAggregateFunctions">
      <Description></Description>
      <Test>
         <Query><![CDATA[select avg(cat.weight), sum(cat.weight), max(cat.weight), count(cat) from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( avg ( . cat weight ) ) ( sum ( . cat weight ) ) ( max ( . cat weight ) ) ( count cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cat, count( elements(cat.kittens) )  from eg.Cat cat group by cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select cat ( count ( elements ( . cat kittens ) ) ) ) ) ( group cat ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct cat.name from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select distinct ( . cat name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(distinct cat.name), count(cat) from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( count distinct ( . cat name ) ) ( count cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select avg(cat.weight), sum(cat.weight), max(cat.weight), count(cat) from Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Cat cat ) ) ( select ( avg ( . cat weight ) ) ( sum ( . cat weight ) ) ( max ( . cat weight ) ) ( count cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select cat.weight + sum(kitten.weight)
        from Cat cat
        join cat.kittens kitten
        group by cat.id, cat.weight
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Cat cat ) ( join ( . cat kittens ) kitten ) ) ( select ( + ( . cat weight ) ( sum ( . kitten weight ) ) ) ) ) ( group ( . cat id ) ( . cat weight ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select firstName||' '||initial||' '||upper(lastName) from Person]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Person ) ) ( select ( || concat ( concatList firstName ' ' initial ' ' ( ( upper ( exprList lastName ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct cat.name from Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Cat cat ) ) ( select distinct ( . cat name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(distinct cat.name), count(cat) from Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Cat cat ) ) ( select ( count distinct ( . cat name ) ) ( count cat ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesAssociationsAndJoins">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.Cat as cat inner join cat.mate as mate left outer join cat.kittens as kitten]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner ( . cat mate ) mate ) ( join left outer ( . cat kittens ) kitten ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat left join cat.mate.kittens as kittens]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join left ( . ( . cat mate ) kittens ) kittens ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Formula form full join form.parameter param]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Formula form ) ( join full ( . form parameter ) param ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat join cat.mate as mate left join cat.kittens as kitten]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join ( . cat mate ) mate ) ( join left ( . cat kittens ) kitten ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat inner join fetch cat.mate left join fetch cat.kittens]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner fetch ( . cat mate ) ) ( join left fetch ( . cat kittens ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesExpressions">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where cat.name between 'A' and 'B']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( between ( . cat name ) 'A' 'B' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where cat.name in ( 'Foo', 'Bar', 'Baz' )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( in ( . cat name ) ( inList 'Foo' 'Bar' 'Baz' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where cat.name not between 'A' and 'B']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not between ( . cat name ) 'A' 'B' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where cat.name not in ( 'Foo', 'Bar', 'Baz' )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not in ( . cat name ) ( inList 'Foo' 'Bar' 'Baz' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where cat.kittens.size > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( > ( . ( . cat kittens ) size ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where size(cat.kittens) > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( > ( ( size ( exprList ( . cat kittens ) ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Calendar cal where cal.holidays.maxElement > current_date]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Calendar cal ) ) ) ( where ( > ( . ( . cal holidays ) maxElement ) current_date ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order where maxindex(order.items) > 100]]></Query>
         <Result><![CDATA[Exception unexpected token: order near line 1, column 33]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order where minelement(order.items) > 10000]]></Query>
         <Result><![CDATA[Exception unexpected token: order near line 1, column 35]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order ord where maxindex(ord.items) > 100]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( > ( ( maxindex ( exprList ( . ord items ) ) ) 100 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order ord where minelement(ord.items) > 10000]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( > ( ( minelement ( exprList ( . ord items ) ) ) 10000 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select mother from eg.Cat as mother, eg.Cat as kit where kit in elements(foo.kittens)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) mother ) ( RANGE ( . eg Cat ) kit ) ) ( select mother ) ) ( where ( in kit ( inList ( elements ( . foo kittens ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select p from eg.NameList list, eg.Person p where p.name = some elements(list.names)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg NameList ) list ) ( RANGE ( . eg Person ) p ) ) ( select p ) ) ( where ( = ( . p name ) ( some ( elements ( . list names ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where exists elements(cat.kittens)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( exists ( elements ( . cat kittens ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Player p where 3 > all elements(p.scores)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Player ) p ) ) ) ( where ( > 3 ( all ( elements ( . p scores ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Show show where 'fizard' in indices(show.acts)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Show ) show ) ) ) ( where ( in 'fizard' ( inList ( indices ( . show acts ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order where order.items[0].id = 1234]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) ( where ( = ( . ( [ ( . order items ) 0 ) id ) 1234 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select person from Person person, Calendar calendar
        where calendar.holidays['national day'] = person.birthDay
        and person.nationality.calendar = calendar
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Person person ) ( RANGE Calendar calendar ) ) ( select person ) ) ( where ( and ( = ( [ ( . calendar holidays ) 'national day' ) ( . person birthDay ) ) ( = ( . ( . person nationality ) calendar ) calendar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select item from Item item, Order order
        where order.items[ order.deliveredItemIndices[0] ] = item and order.id = 11
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order order ) ) ( select item ) ) ( where ( and ( = ( [ ( . order items ) ( [ ( . order deliveredItemIndices ) 0 ) ) item ) ( = ( . order id ) 11 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select item from Item item, Order order
        where order.items[ maxindex(order.items) ] = item and order.id = 11
      ]]></Query>
         <Result><![CDATA[Exception unexpected token: order near line 3, column 37]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order ord where ord.items[0].id = 1234]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ) ) ( where ( = ( . ( [ ( . ord items ) 0 ) id ) 1234 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select person from Person person, Calendar calendar
        where calendar.holidays['national day'] = person.birthDay
        and person.nationality.calendar = calendar
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Person person ) ( RANGE Calendar calendar ) ) ( select person ) ) ( where ( and ( = ( [ ( . calendar holidays ) 'national day' ) ( . person birthDay ) ) ( = ( . ( . person nationality ) calendar ) calendar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select item from Item item, Order ord
        where ord.items[ ord.deliveredItemIndices[0] ] = item and ord.id = 11
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( and ( = ( [ ( . ord items ) ( [ ( . ord deliveredItemIndices ) 0 ) ) item ) ( = ( . ord id ) 11 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select item from Item item, Order ord where ord.items[ maxindex(ord.items) ] = item and ord.id = 11]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( and ( = ( [ ( . ord items ) ( ( maxindex ( exprList ( . ord items ) ) ) ) item ) ( = ( . ord id ) 11 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select item from Item item, Order ord where ord.items[ size(ord.items) - 1 ] = item]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Item item ) ( RANGE Order ord ) ) ( select item ) ) ( where ( = ( [ ( . ord items ) ( - ( ( size ( exprList ( . ord items ) ) ) 1 ) ) item ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where upper(cat.name) like 'FRI%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( like ( ( upper ( exprList ( . cat name ) ) ) 'FRI%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select cust from Product prod, Store store
        inner join store.customers cust
        where prod.name = 'widget'
        and store.location.name in ( 'Melbourne', 'Sydney' )
        and prod = all elements(cust.currentOrder.lineItems)
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Product prod ) ( RANGE Store store ) ( join inner ( . store customers ) cust ) ) ( select cust ) ) ( where ( and ( and ( = ( . prod name ) 'widget' ) ( in ( . ( . store location ) name ) ( inList 'Melbourne' 'Sydney' ) ) ) ( = prod ( all ( elements ( . ( . cust currentOrder ) lineItems ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesFromClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.Cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Formula, Parameter]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Formula ) ( RANGE Parameter ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Formula as form, Parameter as param]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Formula form ) ( RANGE Parameter param ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesGroupByClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[
        select cat.color, sum(cat.weight), count(cat)
        from eg.Cat cat group by cat.color
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat color ) ( sum ( . cat weight ) ) ( count cat ) ) ) ( group ( . cat color ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select foo.id, avg( elements(foo.names) ), max( indices(foo.names) )
        from eg.Foo foo group by foo.id
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Foo ) foo ) ) ( select ( . foo id ) ( avg ( elements ( . foo names ) ) ) ( max ( indices ( . foo names ) ) ) ) ) ( group ( . foo id ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select cat.color, sum(cat.weight), count(cat) from eg.Cat cat group by cat.color
        having cat.color in (eg.Color.TABBY, eg.Color.BLACK)
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat color ) ( sum ( . cat weight ) ) ( count cat ) ) ) ( group ( . cat color ) ) ( having ( in ( . cat color ) ( inList ( . ( . eg Color ) TABBY ) ( . ( . eg Color ) BLACK ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select cat from eg.Cat cat join cat.kittens kitten group by cat having avg(kitten.weight) > 100
        order by count(kitten) asc, sum(kitten.weight) desc
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join ( . cat kittens ) kitten ) ) ( select cat ) ) ( group cat ) ( having ( > ( avg ( . kitten weight ) ) 100 ) ) ( order ( count kitten ) asc ( sum ( . kitten weight ) ) desc ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesHqlExamples">
      <Description></Description>
      <Test>
         <Query><![CDATA[
        select ord.id, sum(price.amount), count(item) from Order as ord join ord.lineItems as item
        join item.product as product, Catalog as catalog join catalog.prices as price
        where ord.paid = false and ord.customer = :customer and price.product = product
        and catalog.effectiveDate < sysdate and catalog.effectiveDate >= all (
        select cat.effectiveDate from Catalog as cat where cat.effectiveDate < sysdate) group by ord
        having sum(price.amount) > :minAmount order by sum(price.amount) desc
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ( join ( . ord lineItems ) item ) ( join ( . item product ) product ) ( RANGE Catalog catalog ) ( join ( . catalog prices ) price ) ) ( select ( . ord id ) ( sum ( . price amount ) ) ( count item ) ) ) ( where ( and ( and ( and ( and ( = ( . ord paid ) false ) ( = ( . ord customer ) ( : customer ) ) ) ( = ( . price product ) product ) ) ( < ( . catalog effectiveDate ) sysdate ) ) ( >= ( . catalog effectiveDate ) ( all ( query ( SELECT_FROM ( from ( RANGE Catalog cat ) ) ( select ( . cat effectiveDate ) ) ) ( where ( < ( . cat effectiveDate ) sysdate ) ) ) ) ) ) ) ( group ord ) ( having ( > ( sum ( . price amount ) ) ( : minAmount ) ) ) ( order ( sum ( . price amount ) ) desc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select ord.id, sum(price.amount), count(item)
        from Order as ord join ord.lineItems as item join item.product as product,
        Catalog as catalog join catalog.prices as price where ord.paid = false and ord.customer = :customer
        and price.product = product and catalog = :currentCatalog
        group by ord having sum(price.amount) > :minAmount order by sum(price.amount) desc
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order ord ) ( join ( . ord lineItems ) item ) ( join ( . item product ) product ) ( RANGE Catalog catalog ) ( join ( . catalog prices ) price ) ) ( select ( . ord id ) ( sum ( . price amount ) ) ( count item ) ) ) ( where ( and ( and ( and ( = ( . ord paid ) false ) ( = ( . ord customer ) ( : customer ) ) ) ( = ( . price product ) product ) ) ( = catalog ( : currentCatalog ) ) ) ) ( group ord ) ( having ( > ( sum ( . price amount ) ) ( : minAmount ) ) ) ( order ( sum ( . price amount ) ) desc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select count(payment), status.name  from Payment as payment
        join payment.currentStatus as status     join payment.statusChanges as statusChange
        where payment.status.name <> PaymentStatus.AWAITING_APPROVAL     or (
        statusChange.timeStamp = (              select max(change.timeStamp)
        from PaymentStatusChange change              where change.payment = payment
        )         and statusChange.user <> :currentUser     )
        group by status.name, status.sortOrder order by status.sortOrder
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Payment payment ) ( join ( . payment currentStatus ) status ) ( join ( . payment statusChanges ) statusChange ) ) ( select ( count payment ) ( . status name ) ) ) ( where ( or ( <> ( . ( . payment status ) name ) ( . PaymentStatus AWAITING_APPROVAL ) ) ( and ( = ( . statusChange timeStamp ) ( query ( SELECT_FROM ( from ( RANGE PaymentStatusChange change ) ) ( select ( max ( . change timeStamp ) ) ) ) ( where ( = ( . change payment ) payment ) ) ) ) ( <> ( . statusChange user ) ( : currentUser ) ) ) ) ) ( group ( . status name ) ( . status sortOrder ) ) ( order ( . status sortOrder ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select count(payment), status.name  from Payment as payment
        join payment.currentStatus as status
        where payment.status.name <> PaymentStatus.AWAITING_APPROVAL
        or payment.statusChanges[ maxIndex(payment.statusChanges) ].user <> :currentUser
        group by status.name, status.sortOrder order by status.sortOrder
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Payment payment ) ( join ( . payment currentStatus ) status ) ) ( select ( count payment ) ( . status name ) ) ) ( where ( or ( <> ( . ( . payment status ) name ) ( . PaymentStatus AWAITING_APPROVAL ) ) ( <> ( . ( [ ( . payment statusChanges ) ( ( maxIndex ( exprList ( . payment statusChanges ) ) ) ) user ) ( : currentUser ) ) ) ) ( group ( . status name ) ( . status sortOrder ) ) ( order ( . status sortOrder ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select account, payment from Account as account     left outer join account.payments as payment
        where :currentUser in elements(account.holder.users)
        and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
        order by account.type.sortOrder, account.accountNumber, payment.dueDate
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Account account ) ( join left outer ( . account payments ) payment ) ) ( select account payment ) ) ( where ( and ( in ( : currentUser ) ( inList ( elements ( . ( . account holder ) users ) ) ) ) ( = ( . PaymentStatus UNPAID ) ( ( isNull ( exprList ( . ( . payment currentStatus ) name ) ( . PaymentStatus UNPAID ) ) ) ) ) ) ( order ( . ( . account type ) sortOrder ) ( . account accountNumber ) ( . payment dueDate ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select account, payment from Account as account     join account.holder.users as user
        left outer join account.payments as payment where :currentUser = user
        and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
        order by account.type.sortOrder, account.accountNumber, payment.dueDate
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Account account ) ( join ( . ( . account holder ) users ) user ) ( join left outer ( . account payments ) payment ) ) ( select account payment ) ) ( where ( and ( = ( : currentUser ) user ) ( = ( . PaymentStatus UNPAID ) ( ( isNull ( exprList ( . ( . payment currentStatus ) name ) ( . PaymentStatus UNPAID ) ) ) ) ) ) ( order ( . ( . account type ) sortOrder ) ( . account accountNumber ) ( . payment dueDate ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesOrderByClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat order by cat.name asc, cat.weight desc, cat.birthdate]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( order ( . cat name ) asc ( . cat weight ) desc ( . cat birthdate ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesPolymorphicQueries">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.Cat as cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from System.Object o]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . System Object ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Named n, eg.Named m where n.name = m.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Named ) n ) ( RANGE ( . eg Named ) m ) ) ) ( where ( = ( . n name ) ( . m name ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesSelectClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[select mate from eg.Cat as cat inner join cat.mate as mate]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( join inner ( . cat mate ) mate ) ) ( select mate ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cat.mate from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( . cat mate ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(cat.kittens) from eg.Cat cat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ( select ( elements ( . cat kittens ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cat.name from eg.DomesticCat cat where cat.name like 'fri%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ( select ( . cat name ) ) ) ( where ( like ( . cat name ) 'fri%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cust.name.firstName from Customer as cust]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Customer cust ) ) ( select ( . ( . cust name ) firstName ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select mother, offspr, mate.name from eg.DomesticCat
        as mother inner join mother.mate as mate left outer join mother.kittens as offspr
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) mother ) ( join inner ( . mother mate ) mate ) ( join left outer ( . mother kittens ) offspr ) ) ( select mother offspr ( . mate name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select new Family(mother, mate, offspr) from eg.DomesticCat as mother join mother.mate as mate
        left join mother.kittens as offspr
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) mother ) ( join ( . mother mate ) mate ) ( join left ( . mother kittens ) offspr ) ) ( select ( ( Family mother mate offspr ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesSubqueries">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.Cat as fatcat where fatcat.weight > ( select avg(cat.weight) from eg.DomesticCat cat)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) fatcat ) ) ) ( where ( > ( . fatcat weight ) ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ( select ( avg ( . cat weight ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat as cat where cat.name = some ( select name.nickName from eg.Name as name)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( = ( . cat name ) ( some ( query ( SELECT_FROM ( from ( RANGE ( . eg Name ) name ) ) ( select ( . name nickName ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat where not exists ( from eg.Cat as mate where mate.mate = cat)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( not ( exists ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) mate ) ) ) ( where ( = ( . mate mate ) cat ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat as cat where cat.name not in ( select name.nickName from eg.Name as name)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( not in ( . cat name ) ( inList ( query ( SELECT_FROM ( from ( RANGE ( . eg Name ) name ) ) ( select ( . name nickName ) ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DocExamplesWhereClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[from eg.Cat as cat where cat.name='Fritz']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat name ) 'Fritz' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from eg.Foo foo, eg.Bar bar where foo.startDate = bar.date ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Foo ) foo ) ( RANGE ( . eg Bar ) bar ) ) ( select foo ) ) ( where ( = ( . foo startDate ) ( . bar date ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where cat.mate.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( is not null ( . ( . cat mate ) name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat, eg.Cat rival where cat.mate = rival.mate]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( RANGE ( . eg Cat ) rival ) ) ) ( where ( = ( . cat mate ) ( . rival mate ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cat, mate from eg.Cat cat, eg.Cat mate where cat.mate = mate]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ( RANGE ( . eg Cat ) mate ) ) ( select cat mate ) ) ( where ( = ( . cat mate ) mate ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat where cat.id = 123]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat id ) 123 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as cat where cat.mate.id = 69]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . ( . cat mate ) id ) 69 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bank.Person person where person.id.country = 'AU' and person.id.medicareNumber = 123456]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . bank Person ) person ) ) ) ( where ( and ( = ( . ( . person id ) country ) 'AU' ) ( = ( . ( . person id ) medicareNumber ) 123456 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from bank.Account account where account.owner.id.country = 'AU'
        and account.owner.id.medicareNumber = 123456
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . bank Account ) account ) ) ) ( where ( and ( = ( . ( . ( . account owner ) id ) country ) 'AU' ) ( = ( . ( . ( . account owner ) id ) medicareNumber ) 123456 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where cat.class = eg.DomesticCat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( = ( . cat class ) ( . eg DomesticCat ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from eg.AuditLog log, eg.Payment payment
        where log.item.class = 'eg.Payment' and log.item.id = payment.id
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg AuditLog ) log ) ( RANGE ( . eg Payment ) payment ) ) ) ( where ( and ( = ( . ( . log item ) class ) 'eg.Payment' ) ( = ( . ( . log item ) id ) ( . payment id ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DoubleLiteral">
      <Description></Description>
      <Test>
         <Query><![CDATA[
        from eg.Cat as tinycat where fatcat.weight < 3.1415
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) tinycat ) ) ) ( where ( < ( . fatcat weight ) 3.1415 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat as enormouscat where fatcat.weight > 3.1415e3]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) enormouscat ) ) ) ( where ( > ( . fatcat weight ) 3.1415e3 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="Examples1">
      <Description></Description>
      <Test>
         <Query><![CDATA[select new org.hibernate.test.S(s.count, s.address) from s in class Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( ( . ( . ( . org hibernate ) test ) S ) ( . s count ) ( . s address ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.name, sysdate, trunc(s.pay), round(s.pay) from s in class Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( . s name ) sysdate ( ( trunc ( exprList ( . s pay ) ) ) ( ( round ( exprList ( . s pay ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select round(s.pay, 2) from s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE s ) ) ( select ( ( round ( exprList ( . s pay ) 2 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select abs(round(s.pay)) from s in class Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( abs ( exprList ( ( round ( exprList ( . s pay ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select trunc(round(sysdate)) from s in class Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Simple s ) ) ( select ( ( trunc ( exprList ( ( round ( exprList sysdate ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="FromWithJoin">
      <Description></Description>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat, com.toadstool.Foo f join net.sf.blurb.Blurb]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat  left join com.multijoin.JoinORama , com.toadstool.Foo f join net.sf.blurb.Blurb]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( join left ( . ( . com multijoin ) JoinORama ) ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="GroupBy">
      <Description></Description>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat group by qat.breed]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( group ( . qat breed ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat group by qat.breed, qat.eyecolor]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( group ( . qat breed ) ( . qat eyecolor ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="InNotIn">
      <Description></Description>
      <Test>
         <Query><![CDATA[from foo where foo.bar in ('a' , 'b', 'c')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( in ( . foo bar ) ( inList 'a' 'b' 'c' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo where foo.bar not in ('a' , 'b', 'c')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( not in ( . foo bar ) ( inList 'a' 'b' 'c' ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="MultipleActualParameters">
      <Description></Description>
      <Test>
         <Query><![CDATA[select round(s.pay, 2) from s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE s ) ) ( select ( ( round ( exprList ( . s pay ) 2 ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="MultipleFromClasses">
      <Description></Description>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat, com.toadstool.Foo f]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat, org.jabberwocky.Dipstick]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . org jabberwocky ) Dipstick ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="OperatorPrecedence">
      <Description></Description>
      <Test>
         <Query><![CDATA[from foo where foo.bar = 123 + foo.baz * foo.not]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( = ( . foo bar ) ( + 123 ( * ( . foo baz ) ( . foo not ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo where foo.bar like 'testzzz' || foo.baz or foo.bar in ('duh', 'gob')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE foo ) ) ) ( where ( or ( like ( . foo bar ) ( || concat ( concatList 'testzzz' ( . foo baz ) ) ) ) ( in ( . foo bar ) ( inList 'duh' 'gob' ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="OrderBy">
      <Description></Description>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat order by avg(qat.toes)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( order ( avg ( . qat toes ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal an order by sqrt(an.bodyWeight)/2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( order ( / ( ( sqrt ( exprList ( . an bodyWeight ) ) ) 2 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="Select">
      <Description></Description>
      <Test>
         <Query><![CDATA[SELECT f FROM eg.mypackage.Cat qat, com.toadstool.Foo f join net.sf.blurb.Blurb]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ( RANGE ( . ( . com toadstool ) Foo ) f ) ( join ( . ( . ( . net sf ) blurb ) Blurb ) ) ) ( SELECT f ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT count(*) FROM eg.mypackage.Cat qat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ( SELECT ( count * ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT avg(qat.weight) FROM eg.mypackage.Cat qat]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ( SELECT ( avg ( . qat weight ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="Where">
      <Description></Description>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat where qat.name like '%fluffy%' or qat.toes > 5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( or ( like ( . qat name ) '%fluffy%' ) ( > ( . qat toes ) 5 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat where not qat.name like '%fluffy%' or qat.toes > 5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( or ( {not}like ( . qat name ) '%fluffy%' ) ( > ( . qat toes ) 5 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat where not qat.name not like '%fluffy%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( {not}not like ( . qat name ) '%fluffy%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat where qat.name in ('crater','bean','fluffy')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( in ( . qat name ) ( inList 'crater' 'bean' 'fluffy' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM eg.mypackage.Cat qat where qat.name not in ('crater','bean','fluffy')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . eg mypackage ) Cat ) qat ) ) ) ( where ( not in ( . qat name ) ( inList 'crater' 'bean' 'fluffy' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal an where sqrt(an.bodyWeight)/2 > 10]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( > ( / ( ( sqrt ( exprList ( . an bodyWeight ) ) ) 2 ) 10 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from Animal an where (an.bodyWeight > 10 and an.bodyWeight < 100) or an.bodyWeight is null
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( or ( and ( > ( . an bodyWeight ) 10 ) ( < ( . an bodyWeight ) 100 ) ) ( is null ( . an bodyWeight ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="UnitTestHql">
      <Description></Description>
      <Test>
         <Query><![CDATA[select foo from foo in class org.hibernate.test.Foo, fee in class org.hibernate.test.Fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ( select foo ) ) ( where ( = ( . foo dependent ) fee ) ) ( order ( . foo string ) desc ( . ( . foo component ) count ) asc ( . fee id ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo, foo.dependent from foo in class org.hibernate.test.Foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ( . foo dependent ) ) ) ( order ( . ( . foo foo ) string ) desc ( . ( . foo component ) count ) asc ( . ( . foo dependent ) id ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from foo in class org.hibernate.test.Foo order by foo.dependent.id, foo.dependent.fi]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) ( order ( . ( . foo dependent ) id ) ( . ( . foo dependent ) fi ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT one FROM one IN CLASS org.hibernate.test.One ORDER BY one.value ASC]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( SELECT one ) ) ( ORDER ( . one value ) ASC ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT many.one FROM many IN CLASS org.hibernate.test.Many ORDER BY many.one.value ASC, many.one.id]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Many ) many ) ) ( SELECT ( . many one ) ) ) ( ORDER ( . ( . many one ) value ) ASC ( . ( . many one ) id ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.id from org.hibernate.test.Foo foo where foo.joinedProp = 'foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo id ) ) ) ( where ( = ( . foo joinedProp ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo inner join fetch foo.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join inner fetch ( . foo foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left outer join fetch baz.fooToGlarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left outer fetch ( . baz fooToGlarch ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo = 'bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . foo foo ) foo ) string ) ) ) ( where ( = ( . foo foo ) 'bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo = 'bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . ( . foo foo ) foo ) foo ) string ) ) ) ( where ( = ( . ( . foo foo ) foo ) 'bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo.foo.string = 'bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . ( . foo foo ) foo ) string ) ) ) ( where ( = ( . ( . ( . ( . foo foo ) foo ) foo ) string ) 'bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo = 'bar' and foo.foo.foo.foo = 'baz']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo string ) ) ) ( where ( and ( = ( . ( . foo foo ) foo ) 'bar' ) ( = ( . ( . ( . foo foo ) foo ) foo ) 'baz' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.string from foo in class org.hibernate.test.Foo where foo.foo.foo.foo.string = 'a' and foo.foo.string = 'b']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo string ) ) ) ( where ( and ( = ( . ( . ( . ( . foo foo ) foo ) foo ) string ) 'a' ) ( = ( . ( . foo foo ) string ) 'b' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo as foo where foo.component.glarch.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is not null ( . ( . ( . foo component ) glarch ) name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo as foo left outer join foo.component.glarch as glarch where glarch.name = 'foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . ( . foo component ) glarch ) glarch ) ) ) ( where ( = ( . glarch name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo left outer join foo.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . foo foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo, org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join baz.fooToGlarch, org.hibernate.test.Bar bar join bar.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join baz.fooToGlarch join baz.fooSet]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join ( . baz fooSet ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join baz.fooToGlarch join fetch baz.fooSet foo left join fetch foo.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join fetch ( . baz fooSet ) foo ) ( join left fetch ( . foo foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( and ( = ( . foo string ) 'osama bin laden' ) ( = ( . foo boolean ) true ) ) ) ( order ( . foo string ) asc ( . ( . foo component ) count ) desc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'osama bin laden' ) ) ( order ( . foo string ) asc ( . ( . foo component ) count ) desc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.component.count is null order by foo.component.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is null ( . ( . foo component ) count ) ) ) ( order ( . ( . foo component ) count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.component.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct foo.component.name, foo.component.name from foo in class org.hibernate.test.Foo where foo.component.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct ( . ( . foo component ) name ) ( . ( . foo component ) name ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct foo.component.name, foo.id from foo in class org.hibernate.test.Foo where foo.component.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct ( . ( . foo component ) name ) ( . foo id ) ) ) ( where ( = ( . ( . foo component ) name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.key=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo key ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo from foo in class org.hibernate.test.Foo where foo.string='fizard']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( = ( . foo string ) 'fizard' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.component.subcomponent.name='bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . ( . foo component ) subcomponent ) name ) 'bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo from foo in class org.hibernate.test.Foo where foo.foo.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( = ( . ( . foo foo ) id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.foo = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo foo ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar where bar.string='a string' or bar.string='a string']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( or ( = ( . bar string ) 'a string' ) ( = ( . bar string ) 'a string' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.component.name, elements(foo.component.importantDates) from foo in class org.hibernate.test.Foo where foo.foo.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo component ) name ) ( elements ( . ( . foo component ) importantDates ) ) ) ) ( where ( = ( . ( . foo foo ) id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(elements(foo.component.importantDates)) from foo in class org.hibernate.test.Foo group by foo.id]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( max ( elements ( . ( . foo component ) importantDates ) ) ) ) ) ( group ( . foo id ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.foo.foo from foo in class org.hibernate.test.Foo, foo2 in class org.hibernate.test.Foo where foo = foo2.foo and not not ( not foo.string='fizard' ) and foo2.string between 'a' and (foo.foo.string) and ( foo2.string in ( 'fiz', 'blah') or 1=1 )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo2 ) ) ( select ( . ( . ( . foo foo ) foo ) foo ) ) ) ( where ( and ( and ( and ( = foo ( . foo2 foo ) ) ( {not}{not}{not}= ( . foo string ) 'fizard' ) ) ( between ( . foo2 string ) 'a' ( . ( . foo foo ) string ) ) ) ( or ( in ( . foo2 string ) ( inList 'fiz' 'blah' ) ) ( = 1 1 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'from BoogieDown  -tinsel town  =!@#$^&*())' ) ) )]]></Result>
      </Test>
      <Test>
         <Description>Added quote quote is an escape</Description>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where not foo.string='foo''bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( {not}= ( . foo string ) 'foo''bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.component.glarch.next is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is null ( . ( . ( . foo component ) glarch ) next ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[ from bar in class org.hibernate.test.Bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( and ( = ( . ( . bar baz ) count ) 667 ) ( != ( . ( . bar baz ) count ) 123 ) ) ( {not}= ( . ( . bar baz ) name ) '1-E-1' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[ from i in class org.hibernate.test.Bar where i.baz.name='Bazza']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) i ) ) ) ( where ( = ( . ( . i baz ) name ) 'Bazza' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(distinct foo.foo) from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count distinct ( . foo foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(foo.foo.boolean) from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count ( . ( . foo foo ) boolean ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*), foo.int from foo in class org.hibernate.test.Foo group by foo.int]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ( . foo int ) ) ) ( group ( . foo int ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select sum(foo.foo.int) from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( sum ( . ( . foo foo ) int ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(foo) from foo in class org.hibernate.test.Foo where foo.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count foo ) ) ) ( where ( = ( . foo id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.boolean = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo boolean ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Foo(fo.x) from org.hibernate.test.Fo fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) fo ) ) ( select ( ( Foo ( . fo x ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Foo(fo.integer) from org.hibernate.test.Foo fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) fo ) ) ( select ( ( Foo ( . fo integer ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Foo(fo.x) from org.hibernate.test.Foo fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) fo ) ) ( select ( ( Foo ( . fo x ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.long, foo.component.name, foo, foo.foo from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo long ) ( . ( . foo component ) name ) foo ( . foo foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select avg(foo.float), max(foo.component.name), count(distinct foo.id) from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( avg ( . foo float ) ) ( max ( . ( . foo component ) name ) ) ( count distinct ( . foo id ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.long, foo.component, foo, foo.foo from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo long ) ( . foo component ) foo ( . foo foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Y]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fumm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.X]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Location]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Vetoer]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Sortable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Contained]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Stuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Immutable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Holder where n.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) ( where ( is not null ( . n name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Baz where n.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) ( where ( is not null ( . n name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Bar where n.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) ( where ( is not null ( . n name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Glarch where n.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) ( where ( is not null ( . n name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Holder where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Holder where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Holder where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Holder where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Baz where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Baz where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Baz where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Baz where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Bar where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Bar where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Bar where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Bar where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Holder, n1 in class org.hibernate.test.Glarch where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Baz, n1 in class org.hibernate.test.Glarch where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Bar, n1 in class org.hibernate.test.Glarch where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n0 in class org.hibernate.test.Glarch, n1 in class org.hibernate.test.Glarch where n0.name = n1.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n0 ) ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) n1 ) ) ) ( where ( = ( . n0 name ) ( . n1 name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from n in class org.hibernate.test.Holder where n.name = :name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) n ) ) ) ( where ( = ( . n name ) ( : name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Y]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fumm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.X]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Location]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Vetoer]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Sortable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Contained]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Stuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Immutable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.code, min(baz.count) from baz in class org.hibernate.test.Baz group by baz.code]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( . baz code ) ( min ( . baz count ) ) ) ) ( group ( . baz code ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[selecT baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( selecT baz ) ) ( where ( or ( is not null ( [ ( . baz stringDateMap ) 'foo' ) ) ( = ( [ ( . baz stringDateMap ) 'bar' ) ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['now'] is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( where ( is not null ( [ ( . baz stringDateMap ) 'now' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select baz from baz in class org.hibernate.test.Baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( where ( and ( is not null ( [ ( . baz stringDateMap ) 'now' ) ) ( < ( [ ( . baz stringDateMap ) 'big bang' ) ( [ ( . baz stringDateMap ) 'now' ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select index(date) from org.hibernate.test.Baz baz join baz.stringDateMap date]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringDateMap ) date ) ) ( select ( ( index ( exprList date ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from foo in class org.hibernate.test.Foo where foo.integer not between 1 and 5 and foo.string not in ('cde', 'abc') and foo.string is not null and foo.integer<=3
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( and ( and ( and ( not between ( . foo integer ) 1 5 ) ( not in ( . foo string ) ( inList 'cde' 'abc' ) ) ) ( is not null ( . foo string ) ) ) ( <= ( . foo integer ) 3 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz inner join baz.collectionComponent.nested.foos foo where foo.string is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . ( . ( . baz collectionComponent ) nested ) foos ) foo ) ) ) ( where ( is null ( . foo string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooSet ) ) ) ) ( where ( in '1' ( inList ( query ( SELECT_FROM ( from ( RANGE ( . baz fooSet ) foo ) ) ) ( where ( is not null ( . foo string ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( where ( and ( in 'a' ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) foos ) ) ) ) ( in 1.0 ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) floats ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo join foo.foo where foo.foo in ('1','2','3')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join ( . foo foo ) ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo from org.hibernate.test.Foo foo where foo.foo in ('1','2','3')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo foo ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.string from org.hibernate.test.Foo foo where foo.foo in ('1','2','3')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) string ) ) ) ( where ( in ( . foo foo ) ( inList '1' '2' '3' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.string from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) string ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.foo.long from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3')]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . ( . foo foo ) long ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3') or foo.foo.long in (1,2,3)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ) ) ( where ( or ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ( in ( . ( . foo foo ) long ) ( inList 1 2 3 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from org.hibernate.test.Foo foo where foo.foo.string in ('1','2','3') group by foo.foo.long]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( count * ) ) ) ( where ( in ( . ( . foo foo ) string ) ( inList '1' '2' '3' ) ) ) ( group ( . ( . foo foo ) long ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo1 left join foo1.foo foo2 left join foo2.foo where foo1.string is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . foo1 foo ) foo2 ) ( join left ( . foo2 foo ) ) ) ) ( where ( is not null ( . foo1 string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo1 left join foo1.foo.foo where foo1.string is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . ( . foo1 foo ) foo ) ) ) ) ( where ( is not null ( . foo1 string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo1 left join foo1.foo foo2 left join foo1.foo.foo foo3 where foo1.string is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo1 ) ( join left ( . foo1 foo ) foo2 ) ( join left ( . ( . foo1 foo ) foo ) foo3 ) ) ) ( where ( is not null ( . foo1 string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.formula from org.hibernate.test.Foo foo where foo.formula > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( . foo formula ) ) ) ( where ( > ( . foo formula ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from org.hibernate.test.Foo as foo join foo.foo as foo2 where foo2.id >'a' or foo2.id <'a'
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join ( . foo foo ) foo2 ) ) ) ( where ( or ( > ( . foo2 id ) 'a' ) ( < ( . foo2 id ) 'a' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left outer join fetch baz.manyToAny]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left outer fetch ( . baz manyToAny ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.manyToAny]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz manyToAny ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz from org.hibernate.test.Baz baz join baz.manyToAny a where index(a) = 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz manyToAny ) a ) ) ( select baz ) ) ( where ( = ( ( index ( exprList a ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar from org.hibernate.test.Bar bar where bar.baz.stringDateMap['now'] is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( is not null ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select bar from org.hibernate.test.Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar baz ) b ) ) ( select bar ) ) ( where ( and ( < ( [ ( . b stringDateMap ) 'big bang' ) ( [ ( . b stringDateMap ) 'now' ) ) ( is not null ( [ ( . b stringDateMap ) 'now' ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select bar from org.hibernate.test.Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( and ( < ( [ ( . ( . bar baz ) stringDateMap ) 'big bang' ) ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ( is not null ( [ ( . ( . bar baz ) stringDateMap ) 'now' ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.string, foo.component, foo.id from org.hibernate.test.Bar foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) foo ) ) ( select ( . foo string ) ( . foo component ) ( . foo id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.components) from org.hibernate.test.Baz baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz components ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bc.name from org.hibernate.test.Baz baz join baz.components bc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz components ) bc ) ) ( select ( . bc name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from org.hibernate.test.Foo foo where foo.integer < 10 order by foo.string
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( < ( . foo integer ) 10 ) ) ( order ( . foo string ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Holder h join h.otherHolder oh where h.otherHolder.name = 'bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) h ) ( join ( . h otherHolder ) oh ) ) ) ( where ( = ( . ( . h otherHolder ) name ) 'bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.fooSet foo join foo.foo.foo foo2 where foo2.string = 'foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooSet ) foo ) ( join ( . ( . foo foo ) foo ) foo2 ) ) ) ( where ( = ( . foo2 string ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.fooArray foo join foo.foo.foo foo2 where foo2.string = 'foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ( join ( . ( . foo foo ) foo ) foo2 ) ) ) ( where ( = ( . foo2 string ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.stringDateMap date where index(date) = 'foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringDateMap ) date ) ) ) ( where ( = ( ( index ( exprList date ) ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.topGlarchez g where index(g) = 'A']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz topGlarchez ) g ) ) ) ( where ( = ( ( index ( exprList g ) ) 'A' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select index(g) from org.hibernate.test.Baz baz join baz.topGlarchez g]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz topGlarchez ) g ) ) ( select ( ( index ( exprList g ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join baz.stringSet]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz stringSet ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.stringSet str where str='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringSet ) str ) ) ) ( where ( = str 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join fetch baz.stringSet]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz stringSet ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.stringSet string where string='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz stringSet ) string ) ) ) ( where ( = string 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz inner join baz.components comp where comp.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz components ) comp ) ) ) ( where ( = ( . comp name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch g inner join g.fooComponents comp where comp.fee is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ) ) ( where ( is not null ( . comp fee ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch g inner join g.fooComponents comp join comp.fee fee where fee.count > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ( join ( . comp fee ) fee ) ) ) ( where ( > ( . fee count ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch g inner join g.fooComponents comp where comp.fee.count is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ( join inner ( . g fooComponents ) comp ) ) ) ( where ( is not null ( . ( . comp fee ) count ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join fetch baz.fooBag]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz fooBag ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join fetch baz.sortablez order by baz.name asc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz sortablez ) ) ) ) ( order ( . baz name ) asc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz order by baz.name asc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( order ( . baz name ) asc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo, org.hibernate.test.Baz baz left join fetch baz.fees]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left fetch ( . baz fees ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo, org.hibernate.test.Bar bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo, org.hibernate.test.Bar bar, org.hibernate.test.Bar bar2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.X x]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) x ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct foo from org.hibernate.test.Foo foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select distinct foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch g where g.multiple.glarch=g and g.multiple.count=12]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( and ( = ( . ( . g multiple ) glarch ) g ) ( = ( . ( . g multiple ) count ) 12 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar %']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ) ( where ( like ( . bar name ) 'Bar %' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like 'Bar%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( like ( . bar name ) 'Bar%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where ( bar.name in (:nameList0_, :nameList1_, :nameList2_) or bar.name in (:nameList0_, :nameList1_, :nameList2_) ) and bar.string = :stringVal]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( and ( or ( in ( . bar name ) ( inList ( : nameList0_ ) ( : nameList1_ ) ( : nameList2_ ) ) ) ( in ( . bar name ) ( inList ( : nameList0_ ) ( : nameList1_ ) ( : nameList2_ ) ) ) ) ( = ( . bar string ) ( : stringVal ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar, b from org.hibernate.test.Bar bar inner join bar.baz baz inner join baz.cascadingBars b where bar.name like 'Bar%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( like ( . bar name ) 'Bar%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar, b from org.hibernate.test.Bar bar left join bar.baz baz left join baz.cascadingBars b where bar.name like :name and b.name like :name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz cascadingBars ) b ) ) ( select bar b ) ) ( where ( and ( like ( . bar name ) ( : name ) ) ( like ( . b name ) ( : name ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar from org.hibernate.test.Bar as bar where bar.x > ? or bar.short = 1 or bar.string = 'ff ? bb']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( or ( or ( > ( . bar x ) ? ) ( = ( . bar short ) 1 ) ) ( = ( . bar string ) 'ff ? bb' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar from org.hibernate.test.Bar as bar where bar.string = ' ? ' or bar.string = '?']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( where ( or ( = ( . bar string ) ' ? ' ) ( = ( . bar string ) '?' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz, baz.fooArray foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( RANGE ( . baz fooArray ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Stuff where s.foo.id = ? and s.id.id = ? and s.moreStuff.id.intId = ? and s.moreStuff.id.stringId = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( and ( and ( and ( = ( . ( . s foo ) id ) ? ) ( = ( . ( . s id ) id ) ? ) ) ( = ( . ( . ( . s moreStuff ) id ) intId ) ? ) ) ( = ( . ( . ( . s moreStuff ) id ) stringId ) ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Stuff where s.foo.id = ? and s.id.id = ? and s.moreStuff.name = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( and ( and ( = ( . ( . s foo ) id ) ? ) ( = ( . ( . s id ) id ) ? ) ) ( = ( . ( . s moreStuff ) name ) ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Stuff where s.foo.string is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( is not null ( . ( . s foo ) string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Stuff where s.foo > '0' order by s.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) s ) ) ) ( where ( > ( . s foo ) '0' ) ) ( order ( . s foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ms in class org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) ms ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fee in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Result(foo.string, foo.long, foo.integer) from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select ( ( Result ( . foo string ) ( . foo long ) ( . foo integer ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Result( baz.name, foo.long, count(elements(baz.fooArray)) ) from org.hibernate.test.Baz baz join baz.fooArray foo group by baz.name, foo.long]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ) ( select ( ( Result ( . baz name ) ( . foo long ) ( count ( elements ( . baz fooArray ) ) ) ) ) ) ( group ( . baz name ) ( . foo long ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Result( baz.name, max(foo.long), count(foo) ) from org.hibernate.test.Baz baz join baz.fooArray foo group by baz.name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz fooArray ) foo ) ) ( select ( ( Result ( . baz name ) ( max ( . foo long ) ) ( count foo ) ) ) ) ( group ( . baz name ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max( elements(bar.baz.fooArray) ) from org.hibernate.test.Bar as bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select ( max ( elements ( . ( . bar baz ) fooArray ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz left join baz.fooToGlarch join fetch baz.fooArray foo left join fetch foo.foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join left ( . baz fooToGlarch ) ) ( join fetch ( . baz fooArray ) foo ) ( join left fetch ( . foo foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.name from org.hibernate.test.Bar bar inner join bar.baz baz inner join baz.fooSet foo where baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT baz.name FROM org.hibernate.test.Bar AS bar INNER JOIN bar.baz AS baz INNER JOIN baz.fooSet AS foo WHERE baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( JOIN INNER ( . bar baz ) baz ) ( JOIN INNER ( . baz fooSet ) foo ) ) ( SELECT ( . baz name ) ) ) ( WHERE ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.name from org.hibernate.test.Bar bar join bar.baz baz left outer join baz.fooSet foo where baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . bar baz ) baz ) ( join left outer ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.name from org.hibernate.test.Bar bar, bar.baz baz, baz.fooSet foo where baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT baz.name FROM org.hibernate.test.Bar AS bar, bar.baz AS baz, baz.fooSet AS foo WHERE baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( SELECT ( . baz name ) ) ) ( WHERE ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.name from org.hibernate.test.Bar bar left join bar.baz baz left join baz.fooSet foo where baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz fooSet ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.string from org.hibernate.test.Bar bar left join bar.baz.fooSet foo where bar.string = foo.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . ( . bar baz ) fooSet ) foo ) ) ( select ( . foo string ) ) ) ( where ( = ( . bar string ) ( . foo string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz.name from org.hibernate.test.Bar bar left join bar.baz baz left join baz.fooArray foo where baz.name = bar.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . bar baz ) baz ) ( join left ( . baz fooArray ) foo ) ) ( select ( . baz name ) ) ) ( where ( = ( . baz name ) ( . bar string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo.string from org.hibernate.test.Bar bar left join bar.baz.fooArray foo where bar.string = foo.string]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join left ( . ( . bar baz ) fooArray ) foo ) ) ( select ( . foo string ) ) ) ( where ( = ( . bar string ) ( . foo string ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from bar in class org.hibernate.test.Bar inner join bar.baz as baz inner join baz.fooSet as foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . bar baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from bar in class org.hibernate.test.Bar inner join bar.baz.fooSet as foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooSet ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from bar in class org.hibernate.test.Bar, bar.baz as baz, baz.fooSet as foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . bar baz ) baz ) ( RANGE ( . baz fooSet ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from bar in class org.hibernate.test.Bar, bar.baz.fooSet as foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . bar baz ) fooSet ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar join bar.baz.fooArray foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join ( . ( . bar baz ) fooArray ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar, foo in elements( bar.baz.fooArray )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooArray ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select one.id, elements(one.manies) from one in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select ( . one id ) ( elements ( . one manies ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max( elements(one.manies) ) from one in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select ( max ( elements ( . one manies ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select one, elements(one.manies) from one in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select one ( elements ( . one manies ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select one, max(elements(one.manies)) from one in class org.hibernate.test.One group by one]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ) ( select one ( max ( elements ( . one manies ) ) ) ) ) ( group one ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select indices(baz.fooArray) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( indices ( . baz fooArray ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz, max(elements(baz.timeArray)) from baz in class org.hibernate.test.Baz group by baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ( max ( elements ( . baz timeArray ) ) ) ) ) ( group baz ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz, baz.stringSet.size, count(distinct elements(baz.stringSet)), max(elements(baz.stringSet)) from baz in class org.hibernate.test.Baz group by baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ( . ( . baz stringSet ) size ) ( count distinct ( elements ( . baz stringSet ) ) ) ( max ( elements ( . baz stringSet ) ) ) ) ) ( group baz ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max( elements(baz.timeArray) ) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( max ( elements ( . baz timeArray ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(elements(baz.stringSet)) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( max ( elements ( . baz stringSet ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select size(baz.stringSet) from baz in class org.hibernate.test.Baz where baz.id=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( ( size ( exprList ( . baz stringSet ) ) ) ) ) ( where ( = ( . baz id ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo where foo.component.glarch.id is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( is not null ( . ( . ( . foo component ) glarch ) id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.stringArray) from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringArray ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.stringList) from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringList ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) ) ) ( select ( count * ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from b in class org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) b ) ) ( select ( count * ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from g in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz, baz from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz baz ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select baz from baz in class org.hibernate.test.Baz order by baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select baz ) ) ( order baz ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from g in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from f in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) f ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from q in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from foo in class org.hibernate.test.Foo where foo.string='foo bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) ( where ( = ( . foo string ) 'foo bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo order by foo.string, foo.date]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( order ( . foo string ) ( . foo date ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.class='B']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo class ) 'B' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.class=Bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo class ) Bar ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bar from bar in class org.hibernate.test.Bar, foo in class org.hibernate.test.Foo where bar.string = foo.string and not bar=foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select bar ) ) ( where ( and ( = ( . bar string ) ( . foo string ) ) ( {not}= bar foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.string='foo bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) 'foo bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar where bar.barString='bar bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( = ( . bar barString ) 'bar bar' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from t in class org.hibernate.test.Trivial]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Trivial ) t ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.date = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo date ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Y]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Y ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fumm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.X]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Location]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Vetoer]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Sortable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Contained]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Stuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Immutable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from q in class org.hibernate.test.Qux where q.stuff is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) ( where ( is null ( . q stuff ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from q in class org.hibernate.test.Qux where q.stuff=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) ( where ( = ( . q stuff ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from q in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) q ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from g in class org.hibernate.test.Glarch where g.version=2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( = ( . g version ) 2 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from g in class org.hibernate.test.Glarch where g.next is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( where ( is not null ( . g next ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from g in class org.hibernate.test.Glarch order by g.order asc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) ( order ( . g order ) asc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo order by foo.string asc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( order ( . foo string ) asc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select parent, child from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select parent child ) ) ( where ( = ( . parent foo ) child ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(distinct child.id), count(distinct parent.id) from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( count distinct ( . child id ) ) ( count distinct ( . parent id ) ) ) ) ( where ( = ( . parent foo ) child ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select child.id, parent.id, child.long from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( . child id ) ( . parent id ) ( . child long ) ) ) ( where ( = ( . parent foo ) child ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select child.id, parent.id, child.long, child, parent.foo from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select ( . child id ) ( . parent id ) ( . child long ) child ( . parent foo ) ) ) ( where ( = ( . parent foo ) child ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select parent, child from parent in class org.hibernate.test.Foo, child in class org.hibernate.test.Foo where parent.foo = child and parent.string='a string']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) parent ) ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) child ) ) ( select parent child ) ) ( where ( and ( = ( . parent foo ) child ) ( = ( . parent string ) 'a string' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fee in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) fee ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo foo where foo.custom.s1 = 'one']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . foo custom ) s1 ) 'one' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from im in class org.hibernate.test.Immutable where im = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) im ) ) ) ( where ( = im ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.char='X']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo char ) 'X' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.stringArray) from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz stringArray ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct elements(baz.stringArray) from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select distinct ( elements ( . baz stringArray ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(baz.fooArray) from baz in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ( select ( elements ( . baz fooArray ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.dependent.qux.foo.string = 'foo2']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . ( . ( . ( . foo dependent ) qux ) foo ) string ) 'foo2' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar where bar.object.id = ? and bar.object.class = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( = ( . ( . bar object ) id ) ? ) ( = ( . ( . bar object ) class ) ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select one from org.hibernate.test.One one, org.hibernate.test.Bar bar where bar.object.id = one.id and bar.object.class = 'O']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select one ) ) ( where ( and ( = ( . ( . bar object ) id ) ( . one id ) ) ( = ( . ( . bar object ) class ) 'O' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from l in class org.hibernate.test.Location where l.countryCode = 'AU' and l.description='foo bar']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Location ) l ) ) ) ( where ( and ( = ( . l countryCode ) 'AU' ) ( = ( . l description ) 'foo bar' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[From org.hibernate.test.Bar bar]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( From ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[From org.hibernate.test.Foo foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( From ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from f in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) f ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select fum.id from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ( select ( . fum id ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select fum.id from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ( select ( . fum id ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fum in class org.hibernate.test.Fum where not fum.fum='FRIEND']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum ) ) ) ( where ( {not}= ( . fum fum ) 'FRIEND' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fo in class org.hibernate.test.Fo where fo.id.string like 'an instance of fo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) fo ) ) ) ( where ( like ( . ( . fo id ) string ) 'an instance of fo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Inner]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer o where o.id.detailId = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . o id ) detailId ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer o where o.id.master.id.sup.dudu is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( is not null ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer o where o.id.master.id.sup.id.akey is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( is not null ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select o.id.master.id.sup.dudu from org.hibernate.test.Outer o where o.id.master.id.sup.dudu is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ( select ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) ( where ( is not null ( . ( . ( . ( . ( . o id ) master ) id ) sup ) dudu ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select o.id.master.id.sup.id.akey from org.hibernate.test.Outer o where o.id.master.id.sup.id.akey is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ( select ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) ( where ( is not null ( . ( . ( . ( . ( . ( . o id ) master ) id ) sup ) id ) akey ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer o where o.id.master.bla = '']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . ( . o id ) master ) bla ) '' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer o where o.id.master.id.one = '']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ) ) ( where ( = ( . ( . ( . ( . o id ) master ) id ) one ) '' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Inner inn where inn.id.bkey is not null and inn.backOut.id.master.id.sup.id.akey > 'a']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) inn ) ) ) ( where ( and ( is not null ( . ( . inn id ) bkey ) ) ( > ( . ( . ( . ( . ( . ( . ( . inn backOut ) id ) master ) id ) sup ) id ) akey ) 'a' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer as o left join o.id.master m left join m.id.sup where o.bubu is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . o id ) master ) m ) ( join left ( . ( . m id ) sup ) ) ) ) ( where ( is not null ( . o bubu ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer as o left join o.id.master.id.sup s where o.bubu is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . ( . ( . o id ) master ) id ) sup ) s ) ) ) ( where ( is not null ( . o bubu ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Outer as o left join o.id.master m left join o.id.master.id.sup s where o.bubu is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Outer ) o ) ( join left ( . ( . o id ) master ) m ) ( join left ( . ( . ( . ( . o id ) master ) id ) sup ) s ) ) ) ( where ( is not null ( . o bubu ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select fum1.fo from fum1 in class org.hibernate.test.Fum where fum1.fo.fum is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ( select ( . fum1 fo ) ) ) ( where ( is not null ( . ( . fum1 fo ) fum ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fum1 in class org.hibernate.test.Fum where fum1.fo.fum is not null order by fum1.fo.fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ) ( where ( is not null ( . ( . fum1 fo ) fum ) ) ) ( order ( . ( . fum1 fo ) fum ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(fum1.friends) from fum1 in class org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ) ( select ( elements ( . fum1 friends ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from fum1 in class org.hibernate.test.Fum, fr in elements( fum1.friends )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) fum1 ) ( join inner ( . fum1 friends ) fr ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new Jay(eye) from org.hibernate.test.Eye eye]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Eye ) eye ) ) ( select ( ( Jay eye ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Category cat where cat.name='new foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) cat ) ) ) ( where ( = ( . cat name ) 'new foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Category cat where cat.name='new sub']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) cat ) ) ) ( where ( = ( . cat name ) 'new sub' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Up up order by up.id2 asc]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Up ) up ) ) ) ( order ( . up id2 ) asc ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Down down]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Down ) down ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Up up]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Up ) up ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Master]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Several]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Several ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Single]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Single ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from d in class
        org.hibernate.test.Detail
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Detail ) d ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from c in class org.hibernate.test.Category where c.name = org.hibernate.test.Category.ROOT_CATEGORY]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) c ) ) ) ( where ( = ( . c name ) ( . ( . ( . ( . org hibernate ) test ) Category ) ROOT_CATEGORY ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where c.oneToMany[2] = s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = ( [ ( . c oneToMany ) 2 ) s ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where c.manyToMany[2] = s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = ( [ ( . c manyToMany ) 2 ) s ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where s = c.oneToMany[2]]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = s ( [ ( . c oneToMany ) 2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container, s in class org.hibernate.test.Simple where s = c.manyToMany[2]]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select c ) ) ( where ( = s ( [ ( . c manyToMany ) 2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where c.oneToMany[0].name = 's']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c oneToMany ) 0 ) name ) 's' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where c.manyToMany[0].name = 's']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) 0 ) name ) 's' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where 's' = c.oneToMany[2 - 2].name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = 's' ( . ( [ ( . c oneToMany ) ( - 2 2 ) ) name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where 's' = c.manyToMany[(3+1)/4-1].name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = 's' ( . ( [ ( . c manyToMany ) ( - ( / ( + 3 1 ) 4 ) 1 ) ) name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Description>TODO: "count" is reserved</Description>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where c.manyToMany[ maxindex(c.manyToMany) ].count = 2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) ( ( maxindex ( exprList ( . c manyToMany ) ) ) ) count ) 2 ) ) )]]></Result>
      </Test>
      <Test>
         <Description>TODO: "count" is reserved</Description>
         <Query><![CDATA[select c from c in class org.hibernate.test.Container where c.oneToMany[ c.manyToMany[0].count ].name = 's']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c oneToMany ) ( . ( [ ( . c manyToMany ) 0 ) count ) ) name ) 's' ) ) )]]></Result>
      </Test>
      <Test>
         <Description>TODO: "count" is reserved</Description>
         <Query><![CDATA[select c from org.hibernate.test.Container c where c.manyToMany[ c.oneToMany[0].count ].name = 's']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ( select c ) ) ( where ( = ( . ( [ ( . c manyToMany ) ( . ( [ ( . c oneToMany ) 0 ) count ) ) name ) 's' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(comp.name) from org.hibernate.test.Container c join c.components comp]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) comp ) ) ( select ( count ( . comp name ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Parent p left join fetch p.child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join left fetch ( . p child ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Parent p join p.child c where c.x > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join ( . p child ) c ) ) ) ( where ( > ( . c x ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Child c join c.parent p where p.x > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ( join ( . c parent ) p ) ) ) ( where ( > ( . p x ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fumm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Parent]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Vetoer]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Sortable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Contained]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Circular]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Circular ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Stuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Immutable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Glarch g]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) g ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz join baz.parts]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join ( . baz parts ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from c in class org.hibernate.test.Child where c.parent.count=66]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ) ( where ( = ( . ( . c parent ) count ) 66 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Parent p join p.child c where p.count=66]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ( join ( . p child ) c ) ) ) ( where ( = ( . p count ) 66 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c, c.parent from c in class org.hibernate.test.Child order by c.parent.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ) ) ( order ( . ( . c parent ) count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c, c.parent from c in class org.hibernate.test.Child where c.parent.count=66 order by c.parent.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ) ) ( where ( = ( . ( . c parent ) count ) 66 ) ) ( order ( . ( . c parent ) count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c, c.parent, c.parent.count from c in class org.hibernate.test.Child order by c.parent.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) c ) ) ( select c ( . c parent ) ( . ( . c parent ) count ) ) ) ( order ( . ( . c parent ) count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM p IN CLASS org.hibernate.test.Parent WHERE p.count = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) p ) ) ) ( WHERE ( = ( . p count ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from org.hibernate.test.Container as c join c.components as ce join ce.simple as s where ce.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) ce ) ( join ( . ce simple ) s ) ) ( select ( count * ) ) ) ( where ( = ( . ce name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select c, s from org.hibernate.test.Container as c join c.components as ce join ce.simple as s where ce.name='foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ( join ( . c components ) ce ) ( join ( . ce simple ) s ) ) ( select c s ) ) ( where ( = ( . ce name ) 'foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) m ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from c in class org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) c ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Child]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Child ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.MoreStuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) MoreStuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Many]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Many ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fee]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fee ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Qux]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Qux ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fumm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fumm ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Parent]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Parent ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Holder]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Holder ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Part]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Part ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Baz]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Vetoer]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Vetoer ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Sortable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Sortable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Contained]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Contained ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Circular]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Circular ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Stuff]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Stuff ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Immutable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Immutable ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Container]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Container ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.One]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fo ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Glarch]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Glarch ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Fum]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Fum ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from c in class org.hibernate.test.C2 where 1=1 or 1=1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C2 ) c ) ) ) ( where ( or ( = 1 1 ) ( = 1 1 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from b in class org.hibernate.test.B]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) b ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from a in class org.hibernate.test.A]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) A ) a ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from b in class org.hibernate.test.B]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) b ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.E e join e.reverse as b where b.count=1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join ( . e reverse ) b ) ) ) ( where ( = ( . b count ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.E e join e.as as b where b.count=1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join ( . e as ) b ) ) ) ( where ( = ( . b count ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.B]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) B ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.C1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C1 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.C2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) C2 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.E e, org.hibernate.test.A a where e.reverse = a.forward and a = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( RANGE ( . ( . ( . org hibernate ) test ) A ) a ) ) ) ( where ( and ( = ( . e reverse ) ( . a forward ) ) ( = a ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.E e join fetch e.reverse]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ( join fetch ( . e reverse ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.E e]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) E ) e ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(s.count) from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( max ( . s count ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select new org.hibernate.test.S(s.count, s.address) from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( ( ( . ( . ( . org hibernate ) test ) S ) ( . s count ) ( . s address ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(s.count) from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( max ( . s count ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( count * ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name=:name and s.count=:count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( = ( . s name ) ( : name ) ) ( = ( . s count ) ( : count ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name in (:several0_, :several1_)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( in ( . s name ) ( inList ( : several0_ ) ( : several1_ ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name in (:stuff0_, :stuff1_)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( in ( . s name ) ( inList ( : stuff0_ ) ( : stuff1_ ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple s where s.name=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple s where s.name=:name]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ( : name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where upper( s.name ) ='SIMPLE 1']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( upper ( exprList ( . s name ) ) ) 'SIMPLE 1' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( {and} ( {and} ( {and} ( {and} ( {not}= ( ( upper ( exprList ( . s name ) ) ) 'yada' ) ( {not}= 1 2 ) ) ( {not}= 'foo' 'bar' ) ) ( {not}{not}= 'foo' 'foo' ) ) ( {not}like 'foo' 'bar' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where lower( s.name || ' foo' ) ='simple 1 foo']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( lower ( exprList ( || concat ( concatList ( . s name ) ' foo' ) ) ) ) 'simple 1 foo' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where upper( s.other.name ) ='SIMPLE 2']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( ( upper ( exprList ( . ( . s other ) name ) ) ) 'SIMPLE 2' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where not ( upper( s.other.name ) ='SIMPLE 2' )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( {not}= ( ( upper ( exprList ( . ( . s other ) name ) ) ) 'SIMPLE 2' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct s from s in class org.hibernate.test.Simple where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select distinct s ) ) ( where ( or ( and ( = ( + ( . ( . s other ) count ) 3 ) ( / ( * 15 2 ) 2 ) ) ( = ( . s count ) 69 ) ) ( = ( / ( + ( . ( . s other ) count ) 2 ) 7 ) 2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s from s in class org.hibernate.test.Simple where ( ( s.other.count + 3 ) = (15*2)/2 and s.count = 69) or ( ( s.other.count + 2 ) / 7 ) = 2 order by s.other.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select s ) ) ( where ( or ( and ( = ( + ( . ( . s other ) count ) 3 ) ( / ( * 15 2 ) 2 ) ) ( = ( . s count ) 69 ) ) ( = ( / ( + ( . ( . s other ) count ) 2 ) 7 ) 2 ) ) ) ( order ( . ( . s other ) count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select sum(s.count) from s in class org.hibernate.test.Simple group by s.count having sum(s.count) > 10]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( sum ( . s count ) ) ) ) ( group ( . s count ) ) ( having ( > ( sum ( . s count ) ) 10 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.count from s in class org.hibernate.test.Simple group by s.count having s.count = 12]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( . s count ) ) ) ( group ( . s count ) ) ( having ( = ( . s count ) 12 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.id, s.count, count(t), max(t.date) from s in class org.hibernate.test.Simple, t in class org.hibernate.test.Simple where s.count = t.count group by s.id, s.count order by s.count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) t ) ) ( select ( . s id ) ( . s count ) ( count t ) ( max ( . t date ) ) ) ) ( where ( = ( . s count ) ( . t count ) ) ) ( group ( . s id ) ( . s count ) ) ( order ( . s count ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( = ( . s name ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name = ? and upper(s.name) = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( = ( . s name ) ? ) ( = ( ( upper ( exprList ( . s name ) ) ) ? ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name = :foo and upper(s.name) = :bar or s.count=:count or s.count=:count + 1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( or ( or ( and ( = ( . s name ) ( : foo ) ) ( = ( ( upper ( exprList ( . s name ) ) ) ( : bar ) ) ) ( = ( . s count ) ( : count ) ) ) ( = ( . s count ) ( + ( : count ) 1 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.id from s in class org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( . s id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select all s, s.other from s in class org.hibernate.test.Simple where s = :s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( all s ) ( . s other ) ) ) ( where ( = s ( : s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Simple where s.name in (:name_list0_, :name_list1_) and s.count > :count]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) ( where ( and ( in ( . s name ) ( inList ( : name_list0_ ) ( : name_list1_ ) ) ) ( > ( . s count ) ( : count ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Assignable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Assignable ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Category]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Category ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Simple]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.A]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) A ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo where foo.string=?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) ( where ( = ( . foo string ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from foo in class org.hibernate.test.Foo]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Po po, org.hibernate.test.Lower low where low.mypo = po]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) low ) ) ) ( where ( = ( . low mypo ) po ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Po po join po.set as sm where sm.amount > 0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po set ) sm ) ) ) ( where ( > ( . sm amount ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Po po join po.top as low where low.foo = 'po']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po top ) low ) ) ) ( where ( = ( . low foo ) 'po' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.SubMulti sm join sm.children smc where smc.name > 'a']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) smc ) ) ) ( where ( > ( . smc name ) 'a' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s, ya from org.hibernate.test.Lower s join s.yetanother ya]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join ( . s yetanother ) ya ) ) ( select s ya ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Lower s1 join s1.bag s2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s1 ) ( join ( . s1 bag ) s2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Lower s1 left join s1.bag s2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s1 ) ( join left ( . s1 bag ) s2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s, a from org.hibernate.test.Lower s join s.another a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join ( . s another ) a ) ) ( select s a ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s, a from org.hibernate.test.Lower s left join s.another a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ( join left ( . s another ) a ) ) ( select s a ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Top s, org.hibernate.test.Lower ls]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Lower ls join ls.set s where s.name > 'a']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join ( . ls set ) s ) ) ) ( where ( > ( . s name ) 'a' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Po po join po.list sm where sm.name > 'a']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) po ) ( join ( . po list ) sm ) ) ) ( where ( > ( . sm name ) 'a' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Lower ls inner join ls.another s where s.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls another ) s ) ) ) ( where ( is not null ( . s name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Lower ls where ls.other.another.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) ( where ( is not null ( . ( . ( . ls other ) another ) name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Multi m where m.derived like 'F%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( like ( . m derived ) 'F%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.SubMulti m where m.derived like 'F%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) m ) ) ) ( where ( like ( . m derived ) 'F%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s from org.hibernate.test.SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) s ) ) ( select s ) ) ( where ( and ( > ( . s amount ) ( - 1 ) ) ( is null ( . s name ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(sm.children) from org.hibernate.test.SubMulti as sm]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ) ( select ( elements ( . sm children ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select distinct sm from org.hibernate.test.SubMulti as sm join sm.children as s where s.amount>-1 and s.name is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ( join ( . sm children ) s ) ) ( select distinct sm ) ) ( where ( and ( > ( . s amount ) ( - 1 ) ) ( is null ( . s name ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select distinct s from s in class org.hibernate.test.SubMulti where s.moreChildren[1].amount < 1.0
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) s ) ) ( select distinct s ) ) ( where ( < ( . ( [ ( . s moreChildren ) 1 ) amount ) 1.0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.TrivialClass where s.id = 2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) TrivialClass ) s ) ) ) ( where ( = ( . s id ) 2 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.count from s in class org.hibernate.test.Top]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ( select ( . s count ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Lower where s.another.name='name']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( = ( . ( . s another ) name ) 'name' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Lower where s.yetanother.name='name']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( = ( . ( . s yetanother ) name ) 'name' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Lower where s.yetanother.name='name' and s.yetanother.foo is null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) ( where ( and ( = ( . ( . s yetanother ) name ) 'name' ) ( is null ( . ( . s yetanother ) foo ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Top where s.count=1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) ( where ( = ( . s count ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select s.count from s in class org.hibernate.test.Top, ls in class org.hibernate.test.Lower where ls.another=s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ( select ( . s count ) ) ) ( where ( = ( . ls another ) s ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select elements(ls.bag), elements(ls.set) from ls in class org.hibernate.test.Lower]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ( select ( elements ( . ls bag ) ) ( elements ( . ls set ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Lower]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Top]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from sm in class org.hibernate.test.SubMulti]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) sm ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select

        s from s in class org.hibernate.test.Top where s.count>0
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ( select s ) ) ( where ( > ( . s count ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Multi where m.count>0 and m.extraProp is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( and ( > ( . m count ) 0 ) ( is not null ( . m extraProp ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Top where m.count>0 and m.name is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) m ) ) ) ( where ( and ( > ( . m count ) 0 ) ( is not null ( . m name ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Lower where m.other is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) m ) ) ) ( where ( is not null ( . m other ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Multi where m.other.id = 1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( = ( . ( . m other ) id ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.SubMulti where m.amount > 0.0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) SubMulti ) m ) ) ) ( where ( > ( . m amount ) 0.0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Multi]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Multi where m.class = SubMulti]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Multi ) m ) ) ) ( where ( = ( . m class ) SubMulti ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from m in class org.hibernate.test.Top where m.class = Multi]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) m ) ) ) ( where ( = ( . m class ) Multi ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from s in class org.hibernate.test.Top]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) s ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ls in class org.hibernate.test.Lower]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ls in class org.hibernate.test.Lower, s in elements(ls.bag) where s.id is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls bag ) s ) ) ) ( where ( is not null ( . s id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ls in class org.hibernate.test.Lower, s in elements(ls.set) where s.id is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Lower ) ls ) ( join inner ( . ls set ) s ) ) ) ( where ( is not null ( . s id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Top]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Top ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.Po]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Po ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ChildMap cm where cm.parent is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ChildMap cm ) ) ) ( where ( is not null ( . cm parent ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from ParentMap cm where cm.child is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ParentMap cm ) ) ) ( where ( is not null ( . cm child ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Componentizable]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Componentizable ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="UnnamedParameter">
      <Description></Description>
      <Test>
         <Description>Added '?' as a valid expression.</Description>
         <Query><![CDATA[select foo, bar from org.hibernate.test.Foo foo left outer join foo.foo bar where foo = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) foo ) ( join left outer ( . foo foo ) bar ) ) ( select foo bar ) ) ( where ( = foo ? ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="InElements">
      <Description></Description>
      <Test>
         <Description>Added collectionExpr as a valid 'in' clause.</Description>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar, foo in elements(bar.baz.fooArray)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooArray ) foo ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="DotElements">
      <Description></Description>
      <Test>
         <Query><![CDATA[select distinct foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooArray)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooArray ) foo ) ) ( select distinct foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooSet)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooSet ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select foo from baz in class org.hibernate.test.Baz, foo in elements(baz.fooArray)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ( join inner ( . baz fooArray ) foo ) ) ( select foo ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Baz ) baz ) ) ) ( where ( and ( in 'b' ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) foos ) ) ) ) ( in 1.0 ( inList ( elements ( . ( . ( . baz collectionComponent ) nested ) floats ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="SelectAll">
      <Description></Description>
      <Test>
         <Query><![CDATA[select all s, s.other from s in class org.hibernate.test.Simple where s = :s]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Simple ) s ) ) ( select ( all s ) ( . s other ) ) ) ( where ( = s ( : s ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="Not">
      <Description>Cover NOT optimization in HqlParser</Description>
      <Test>
         <Query><![CDATA[
        from eg.Cat cat where not ( cat.kittens.size < 1 )
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}< ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where not ( cat.kittens.size > 1 )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}> ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.Cat cat where not ( cat.kittens.size >= 1 )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}>= ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from eg.Cat cat where not ( cat.kittens.size <= 1 )
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}<= ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where not ( cat.name between 'A' and 'B' ) ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( {not}between ( . cat name ) 'A' 'B' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from eg.DomesticCat cat where not ( cat.name not between 'A' and 'B' ) ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg DomesticCat ) cat ) ) ) ( where ( {not}not between ( . cat name ) 'A' 'B' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        from eg.Cat cat where not ( not cat.kittens.size <= 1 )
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}{not}<= ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Description>double "NOT"</Description>
         <Query><![CDATA[
        from eg.Cat cat where not  not ( not cat.kittens.size <= 1 )
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . eg Cat ) cat ) ) ) ( where ( {not}{not}{not}<= ( . ( . cat kittens ) size ) 1 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="OtherSyntax">
      <Description></Description>
      <Test>
         <Query><![CDATA[select bar from org.hibernate.test.Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ( select bar ) ) ( order ( * ( - ( . bar x ) ( : valueX ) ) ( - ( . bar x ) ( : valueX ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from bar in class org.hibernate.test.Bar, foo in elements(bar.baz.fooSet)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ( join inner ( . ( . bar baz ) fooSet ) foo ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from one in class org.hibernate.test.One, many in elements(one.manies) where one.id = 1 and many.id = 1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) One ) one ) ( join inner ( . one manies ) many ) ) ) ( where ( and ( = ( . one id ) 1 ) ( = ( . many id ) 1 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Inner _inner join _inner.middles middle]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Inner ) _inner ) ( join ( . _inner middles ) middle ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM m IN CLASS org.hibernate.test.Master WHERE NOT EXISTS ( FROM d IN elements(m.details) WHERE NOT d.i=5 )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) ( WHERE ( not ( EXISTS ( query ( SELECT_FROM ( FROM ( join inner ( . m details ) d ) ) ) ( WHERE ( {not}= ( . d i ) 5 ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[FROM m IN CLASS org.hibernate.test.Master WHERE NOT 5 IN ( SELECT d.i FROM d IN elements(m.details) )]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ) ) ( WHERE ( {not}in 5 ( inList ( query ( SELECT_FROM ( FROM ( join inner ( . m details ) d ) ) ( SELECT ( . d i ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT m FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT m ) ) ( WHERE ( = ( . d i ) 5 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT m FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT m ) ) ( WHERE ( = ( . d i ) 5 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[SELECT m.id FROM m IN CLASS org.hibernate.test.Master, d IN elements(m.details) WHERE d.i=5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( FROM ( RANGE ( . ( . ( . org hibernate ) test ) Master ) m ) ( join inner ( . m details ) d ) ) ( SELECT ( . m id ) ) ) ( WHERE ( = ( . d i ) 5 ) ) )]]></Result>
      </Test>
      <Test Ignore="true">
         <Description>from h3.2.6 I'm not sure about these... [jsd]</Description>
         <Query><![CDATA[select bar.string, foo.string from bar in class org.hibernate.test.Bar inner join bar.baz as baz inner join elements(baz.fooSet) as foo where baz.name = 'name']]></Query>
         <Result><![CDATA[Exception unexpected token: elements near line 1, column 109]]></Result>
      </Test>
      <Test Ignore="true">
         <Description>from h3.2.6 I'm not sure about these... [jsd]</Description>
         <Query><![CDATA[select bar.string, foo.string from bar in class org.hibernate.test.Bar, bar.baz as baz, elements(baz.fooSet) as foo where baz.name = 'name']]></Query>
         <Result><![CDATA[Exception unexpected token: elements near line 1, column 89]]></Result>
      </Test>
      <Test Ignore="true">
         <Description>from h3.2.6 I'm not sure about these... [jsd]</Description>
         <Query><![CDATA[select count(*) where this.amount>-1 and this.name is null]]></Query>
         <Result><![CDATA[Exception FROM expected (non-filter queries must contain a FROM clause)]]></Result>
      </Test>
      <Test>
         <Description>from h3.2.6 I'm not sure about these... [jsd]</Description>
         <Query><![CDATA[from sm in class org.hibernate.test.SubMulti where exists sm.children.elements]]></Query>
         <Result><![CDATA[Exception unexpected token: . near line 1, column 61]]></Result>
      </Test>
      <Test>
         <Description>from h3.2.6 I'm not sure about these... [jsd]</Description>
         <Query><![CDATA[from foo in class NHibernate.DomainModel.Foo where 111 in foo.Bytes.elements]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . NHibernate DomainModel ) Foo ) foo ) ) ) ( where ( in 111 ( inList ( . ( . foo Bytes ) elements ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="EjbqlExtensions">
      <Description></Description>
      <Test>
         <Query><![CDATA[select object(a) from Animal a where a.mother member of a.offspring]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( in ( . a mother ) ( inList ( QUERY ( SELECT_FROM ( from ( RANGE ( . a offspring ) ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select object(a) from Animal a where a.mother member a.offspring]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( in ( . a mother ) ( inList ( QUERY ( SELECT_FROM ( from ( RANGE ( . a offspring ) ) ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Description>no member of</Description>
         <Query><![CDATA[select object(a) from Animal a where a.offspring is empty]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( object a ) ) ) ( where ( not ( exists ( QUERY ( SELECT_FROM ( from ( RANGE ( . a offspring ) ) ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HB1042">
      <Description></Description>
      <Test>
         <Query><![CDATA[select x from fmc_web.pool.Pool x left join x.containers c0 where (upper(x.name) = upper(':') and c0.id = 1)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . fmc_web pool ) Pool ) x ) ( join left ( . x containers ) c0 ) ) ( select x ) ) ( where ( and ( = ( ( upper ( exprList ( . x name ) ) ) ( ( upper ( exprList ':' ) ) ) ( = ( . c0 id ) 1 ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="KeywordInPath">
      <Description></Description>
      <Test>
         <Description>The keyword 'order' used as a property name.</Description>
         <Query><![CDATA[from Customer c where c.order.status = 'argh']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ) ( where ( = ( . ( . c order ) status ) 'argh' ) ) )]]></Result>
      </Test>
      <Test>
         <Description>The keyword 'order' and 'count' used as a property name.</Description>
         <Query><![CDATA[from Customer c where c.order.count > 3]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ) ( where ( > ( . ( . c order ) count ) 3 ) ) )]]></Result>
      </Test>
      <Test>
         <Description>The keywords 'where', 'order' and 'count' used as a property name.</Description>
         <Query><![CDATA[select c.where from Customer c where c.order.count > 3]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Customer c ) ) ( select ( . c where ) ) ) ( where ( > ( . ( . c order ) count ) 3 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Interval i where i.end <:end]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Interval i ) ) ) ( where ( < ( . i end ) ( : end ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Letter l where l.case = :case]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Letter l ) ) ) ( where ( = ( . l case ) ( : case ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="PathologicalKeywordAsIdentifier">
      <Description>Super evil badness... a legitimate keyword!</Description>
      <Test>
         <Query><![CDATA[from Order order]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order join order.group]]></Query>
         <Result><![CDATA[Exception unexpected token: order near line 1, column 23]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from X x order by x.group.by.from]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE X x ) ) ) ( order ( . ( . ( . x group ) by ) from ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order x order by x.order.group.by.from]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order x ) ) ) ( order ( . ( . ( . ( . x order ) group ) by ) from ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select order.id from Order order]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ( select ( . order id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select order from Order order]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ( select order ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order where order.group.by.from is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) ( where ( is not null ( . ( . ( . order group ) by ) from ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Order order order by order.group.by.from]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Order order ) ) ) ( order ( . ( . ( . order group ) by ) from ) ) )]]></Result>
      </Test>
      <Test>
         <Description>Okay, now this is getting silly.</Description>
         <Query><![CDATA[from Group as group group by group.by.from]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Group group ) ) ) ( group ( . ( . group by ) from ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HHH354">
      <Description></Description>
      <Test>
         <Query><![CDATA[from Foo f where f.full = 'yep']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Foo f ) ) ) ( where ( = ( . f full ) 'yep' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="WhereAsIdentifier">
      <Description>'where' as a package name</Description>
      <Test>
         <Query><![CDATA[from where.Order]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . where Order ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="EjbqlKeywordsAsIdentifier">
      <Description></Description>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar where bar.object.id = ? and bar.object.class = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( and ( = ( . ( . bar object ) id ) ? ) ( = ( . ( . bar object ) class ) ? ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="ConstructorIn">
      <Description></Description>
      <Test>
         <Query><![CDATA[from org.hibernate.test.Bar bar where (b.x, b.y, b.z) in (select foo, bar, baz from org.hibernate.test.Foo)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Bar ) bar ) ) ) ( where ( in ( {vector} ( . b x ) ( . b y ) ( . b z ) ) ( inList ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) Foo ) ) ) ( select foo bar baz ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="MultiByteCharacters">
      <Description></Description>
      <Test>
         <Query><![CDATA[
        from User user where user.name like '%nn\u4e2dnn%'
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE User user ) ) ) ( where ( like ( . user name ) '%nn\u4e2dnn%' ) ) )]]></Result>
      </Test>
      <Test>
         <Description>TODO support .NET identifier NH-685; won't fix ?</Description>
         <Query><![CDATA[from ОдинТип ОснованиеTипа where ОснованиеTипа.Количество like '%\u4e2d%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ОдинТип ОснованиеTипа ) ) ) ( where ( like ( . ОснованиеTипа Количество ) '%\u4e2d%' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HHH719">
      <Description>TODO Some SQLs have function names with package qualifiers.</Description>
      <Test>
         <Query><![CDATA[from Foo f order by com.fooco.SpecialFunction(f.id)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Foo f ) ) ) ( order ( ( ( . ( . com fooco ) SpecialFunction ) ( exprList ( . f id ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HHH1107">
      <Description></Description>
      <Test>
         <Query><![CDATA[from Animal where zoo.address.street = '123 Bogus St.']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ) ( where ( = ( . ( . zoo address ) street ) '123 Bogus St.' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HHH1247">
      <Description>won't fix</Description>
      <Test>
         <Query><![CDATA[select distinct user.party from com.itf.iceclaims.domain.party.user.UserImpl user inner join user.party.$RelatedWorkgroups relatedWorkgroups where relatedWorkgroups.workgroup.id = :workgroup and relatedWorkgroups.effectiveTime.start <= :datesnow and relatedWorkgroups.effectiveTime.end > :dateenow ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . ( . ( . ( . com itf ) iceclaims ) domain ) party ) user ) UserImpl ) user ) ( join inner ( . ( . user party ) $RelatedWorkgroups ) relatedWorkgroups ) ) ( select distinct ( . user party ) ) ) ( where ( and ( and ( = ( . ( . relatedWorkgroups workgroup ) id ) ( : workgroup ) ) ( <= ( . ( . relatedWorkgroups effectiveTime ) start ) ( : datesnow ) ) ) ( > ( . ( . relatedWorkgroups effectiveTime ) end ) ( : dateenow ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="WithClause">
      <Description></Description>
      <Test>
         <Query><![CDATA[from Animal a inner join fetch a.offspring as o with o.bodyWeight = :someLimit]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ( join inner fetch ( . a offspring ) o ( with ( = ( . o bodyWeight ) ( : someLimit ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h inner join h.friends as f with f.bodyWeight < :someLimit]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ( join inner ( . h friends ) f ( with ( < ( . f bodyWeight ) ( : someLimit ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a inner join a.offspring o inner join o.mother as m inner join m.father as f with o.bodyWeight > 1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ( join inner ( . a offspring ) o ) ( join inner ( . o mother ) m ) ( join inner ( . m father ) f ( with ( > ( . o bodyWeight ) 1 ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h inner join h.offspring o with o.mother.father = :cousin]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ( join inner ( . h offspring ) o ( with ( = ( . ( . o mother ) father ) ( : cousin ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h inner join h.offspring as o with o.bodyWeight < :someLimit]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ( join inner ( . h offspring ) o ( with ( < ( . o bodyWeight ) ( : someLimit ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a inner join a.mother as m with m.bodyWeight < :someLimit]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ( join inner ( . a mother ) m ( with ( < ( . m bodyWeight ) ( : someLimit ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h inner join h.friends as f with f.nickName like 'bubba']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ( join inner ( . h friends ) f ( with ( like ( . f nickName ) 'bubba' ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h where exists(from h.friends)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ) ( where ( exists ( query ( SELECT_FROM ( from ( RANGE ( . h friends ) ) ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="ExecutableQueries">
      <Description></Description>
      <Test>
         <Query><![CDATA[update NonExistentEntity e set e.someProp = ?]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE NonExistentEntity e ) ) ( set ( = ( . e someProp ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete from Vehicle]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Vehicle ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete from Car]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Car ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update BooleanLiteralEntity set yesNoBoolean = :b1, trueFalseBoolean = :b2, zeroOneBoolean = :b3]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE BooleanLiteralEntity ) ) ( set ( = yesNoBoolean ( : b1 ) ) ( = trueFalseBoolean ( : b2 ) ) ( = zeroOneBoolean ( : b3 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update BooleanLiteralEntity set yesNoBoolean = true, trueFalseBoolean = true, zeroOneBoolean = true]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE BooleanLiteralEntity ) ) ( set ( = yesNoBoolean true ) ( = trueFalseBoolean true ) ( = zeroOneBoolean true ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Pickup (id, vin, owner) select id, vin, owner from Car]]></Query>
         <Result><![CDATA[ ( insert ( into Pickup ( column-spec id vin owner ) ) ( query ( SELECT_FROM ( from ( RANGE Car ) ) ( select id vin owner ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Vehicle]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Vehicle ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Animal (description, bodyWeight, mother) select description, bodyWeight, mother from Human]]></Query>
         <Result><![CDATA[ ( insert ( into Animal ( column-spec description bodyWeight mother ) ) ( query ( SELECT_FROM ( from ( RANGE Human ) ) ( select description bodyWeight mother ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Pickup (owner, vin, id) select id, vin, owner from Car]]></Query>
         <Result><![CDATA[ ( insert ( into Pickup ( column-spec owner vin id ) ) ( query ( SELECT_FROM ( from ( RANGE Car ) ) ( select id vin owner ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Human (id, bodyWeight) select id, bodyWeight from Lizard]]></Query>
         <Result><![CDATA[ ( insert ( into Human ( column-spec id bodyWeight ) ) ( query ( SELECT_FROM ( from ( RANGE Lizard ) ) ( select id bodyWeight ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Animal where mother is not null]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Animal ) ) ( where ( is not null mother ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Animal where father is not null]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Animal ) ) ( where ( is not null father ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Animal]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Animal ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Joiner (name, joinedName) select vin, owner from Car]]></Query>
         <Result><![CDATA[ ( insert ( into Joiner ( column-spec name joinedName ) ) ( query ( SELECT_FROM ( from ( RANGE Car ) ) ( select vin owner ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Joiner]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Joiner ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into PettingZoo (name) select name from Zoo]]></Query>
         <Result><![CDATA[ ( insert ( into PettingZoo ( column-spec name ) ) ( query ( SELECT_FROM ( from ( RANGE Zoo ) ) ( select name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into IntegerVersioned ( name ) select name from IntegerVersioned]]></Query>
         <Result><![CDATA[ ( insert ( into IntegerVersioned ( column-spec name ) ) ( query ( SELECT_FROM ( from ( RANGE IntegerVersioned ) ) ( select name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete IntegerVersioned]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE IntegerVersioned ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into TimestampVersioned ( name ) select name from TimestampVersioned]]></Query>
         <Result><![CDATA[ ( insert ( into TimestampVersioned ( column-spec name ) ) ( query ( SELECT_FROM ( from ( RANGE TimestampVersioned ) ) ( select name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[insert into Animal (description, bodyWeight) select h.description, h.bodyWeight from Human h where h.mother.mother is not null]]></Query>
         <Result><![CDATA[ ( insert ( into Animal ( column-spec description bodyWeight ) ) ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ( select ( . h description ) ( . h bodyWeight ) ) ) ( where ( is not null ( . ( . h mother ) mother ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Human set Human.description = 'xyz' where Human.id = 1 and Human.description is null]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Human ) ) ( set ( = ( . Human description ) 'xyz' ) ) ( where ( and ( = ( . Human id ) 1 ) ( is null ( . Human description ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        update Human h
        set h.description = 'updated'
        where exists (
        select f.id
        from h.friends f
        where f.name.last = 'Public'
        )
      ]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Human h ) ) ( set ( = ( . h description ) 'updated' ) ) ( where ( exists ( query ( SELECT_FROM ( from ( RANGE ( . h friends ) f ) ) ( select ( . f id ) ) ) ( where ( = ( . ( . f name ) last ) 'Public' ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        update SimpleEntityWithAssociation e
        set e.name = 'updated'
        where exists (
        select a.id
        from e.associatedEntities a
        where a.name = 'one-to-many-association'
        )
      ]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE SimpleEntityWithAssociation e ) ) ( set ( = ( . e name ) 'updated' ) ) ( where ( exists ( query ( SELECT_FROM ( from ( RANGE ( . e associatedEntities ) a ) ) ( select ( . a id ) ) ) ( where ( = ( . a name ) 'one-to-many-association' ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        update SimpleEntityWithAssociation e
        set e.name = 'updated'
        where exists (
        select a.id
        from e.manyToManyAssociatedEntities a
        where a.name = 'many-to-many-association'
        )
      ]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE SimpleEntityWithAssociation e ) ) ( set ( = ( . e name ) 'updated' ) ) ( where ( exists ( query ( SELECT_FROM ( from ( RANGE ( . e manyToManyAssociatedEntities ) a ) ) ( select ( . a id ) ) ) ( where ( = ( . a name ) 'many-to-many-association' ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update versioned IntegerVersioned set name = name]]></Query>
         <Result><![CDATA[ ( update versioned ( FROM ( RANGE IntegerVersioned ) ) ( set ( = name name ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Human set name.first = :correction where id = :id]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Human ) ) ( set ( = ( . name first ) ( : correction ) ) ) ( where ( = id ( : id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Animal a set a.mother = null where a.id = 2]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Animal a ) ) ( set ( = ( . a mother ) null ) ) ( where ( = ( . a id ) 2 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Human set mother.name.initial = :initial]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Human ) ) ( set ( = ( . ( . mother name ) initial ) ( : initial ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Human where mother is not null]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Human ) ) ( where ( is not null mother ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update PettingZoo set name = name]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE PettingZoo ) ) ( set ( = name name ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update PettingZoo pz set pz.name = pz.name where pz.id = :id]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE PettingZoo pz ) ) ( set ( = ( . pz name ) ( . pz name ) ) ) ( where ( = ( . pz id ) ( : id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Zoo as z set z.name = z.name]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Zoo z ) ) ( set ( = ( . z name ) ( . z name ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Zoo as z set name = name where id = :id]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Zoo z ) ) ( set ( = name name ) ) ( where ( = id ( : id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Animal set description = description where description = :desc]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Animal ) ) ( set ( = description description ) ) ( where ( = description ( : desc ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Animal set description = :newDesc where description = :desc]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Animal ) ) ( set ( = description ( : newDesc ) ) ) ( where ( = description ( : desc ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Animal set bodyWeight = bodyWeight + :w1 + :w2]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Animal ) ) ( set ( = bodyWeight ( + ( + bodyWeight ( : w1 ) ) ( : w2 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Mammal set description = description]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Mammal ) ) ( set ( = description description ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Mammal set bodyWeight = 25]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Mammal ) ) ( set ( = bodyWeight 25 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Mammal set bodyWeight = ( select max(bodyWeight) from Animal )]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Mammal ) ) ( set ( = bodyWeight ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ( select ( max bodyWeight ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Vehicle set owner = 'Steve']]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Vehicle ) ) ( set ( = owner 'Steve' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Vehicle set owner = null where owner = 'Steve']]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Vehicle ) ) ( set ( = owner null ) ) ( where ( = owner 'Steve' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Vehicle where owner is null]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Vehicle ) ) ( where ( is null owner ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update PettingZoo set address.city = null]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE PettingZoo ) ) ( set ( = ( . address city ) null ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Zoo where address.city is null]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Zoo ) ) ( where ( is null ( . address city ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[update Mammal set bodyWeight = null]]></Query>
         <Result><![CDATA[ ( update ( FROM ( RANGE Mammal ) ) ( set ( = bodyWeight null ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete SimpleEntityWithAssociation e where size( e.associatedEntities ) = 0 and e.name like '%']]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE SimpleEntityWithAssociation e ) ) ( where ( and ( = ( ( size ( exprList ( . e associatedEntities ) ) ) 0 ) ( like ( . e name ) '%' ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete from Animal as a where a.id = :id]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Animal a ) ) ( where ( = ( . a id ) ( : id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete Animal where id = :id]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE Animal ) ) ( where ( = id ( : id ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete from User u where u not in (select u from User u)]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE User u ) ) ( where ( not in u ( inList ( query ( SELECT_FROM ( from ( RANGE User u ) ) ( select u ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete EntityWithCrazyCompositeKey where id.id = 1 and id.otherId = 2]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE EntityWithCrazyCompositeKey ) ) ( where ( and ( = ( . id id ) 1 ) ( = ( . id otherId ) 2 ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[delete from EntityWithCrazyCompositeKey e where e.id.id = 1 and e.id.otherId = 2]]></Query>
         <Result><![CDATA[ ( delete ( FROM ( RANGE EntityWithCrazyCompositeKey e ) ) ( where ( and ( = ( . ( . e id ) id ) 1 ) ( = ( . ( . e id ) otherId ) 2 ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="LikeWithEscape">
      <Description></Description>
      <Test>
         <Query><![CDATA[from Animal a where a.description like 'x%ax%' escape 'x']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( like ( . a description ) 'x%ax%' ( escape 'x' ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="InnerClass">
      <Description>
      TODO InnerClass but for NET
      the problem with inner class is that in .NET the "separator" is '+' and
      Path+Identifier is a valid MathAddExpression
      because this is a special case and the use of entity-name is a valid workaroud we can wait
      to support it or we can choose another character to query inner-classes (the same of JAVA '$' is a valid choice)
    </Description>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.X$XX]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X$XX ) o ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from o in class org.hibernate.test.X$XX]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE ( . ( . ( . org hibernate ) test ) X$XX ) o ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="SupportUnicodeInStringLiteral">
      <Description>TODO Support Unicode in StringLiteral</Description>
      <Test>
         <Query><![CDATA[from User where User.Strange like '%ОдинТип ОснованиеTипа%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE User ) ) ) ( where ( like ( . User Strange ) '%ОдинТип ОснованиеTипа%' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Aggregates">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select count(distinct a.id) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( count distinct ( . a id ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(*) from Animal]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ( select ( count * ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select count(a.id) from Animal a having count(a.id)>1]]></Query>
         <Result><![CDATA[Exception unexpected token: having near line 1, column 34]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select avg(a.BodyWeight) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( avg ( . a BodyWeight ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select avg(a.BodyWeight) from Animal a having avg(a.BodyWeight)>0]]></Query>
         <Result><![CDATA[Exception unexpected token: having near line 1, column 40]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(a.BodyWeight) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( max ( . a BodyWeight ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select max(a.BodyWeight) from Animal a having max(a.BodyWeight)>0]]></Query>
         <Result><![CDATA[Exception unexpected token: having near line 1, column 40]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select min(a.BodyWeight) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( min ( . a BodyWeight ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select min(a.BodyWeight) from Animal a having min(a.BodyWeight)>0]]></Query>
         <Result><![CDATA[Exception unexpected token: having near line 1, column 40]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select sum(a.BodyWeight) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( sum ( . a BodyWeight ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select sum(a.BodyWeight) from Animal a having sum(a.BodyWeight)>0]]></Query>
         <Result><![CDATA[Exception unexpected token: having near line 1, column 40]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Substring">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select substring(a.Description, 3) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( substring ( exprList ( . a Description ) 3 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where substring(a.Description, 2, 3) = 'bcd']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( substring ( exprList ( . a Description ) 2 3 ) ) 'bcd' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where substring(a.Description, 2, 3) = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( substring ( exprList ( . a Description ) 2 3 ) ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where substring(a.Description, 2, ?) = 'bcd']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( substring ( exprList ( . a Description ) 2 ? ) ) 'bcd' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where substring(a.Description, ?, ?) = ?]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( substring ( exprList ( . a Description ) ? ? ) ) ? ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select substring(a.Description, ?, ?) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( substring ( exprList ( . a Description ) ? ? ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where substring(a.Description, 4) = 'def']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( substring ( exprList ( . a Description ) 4 ) ) 'def' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Locate">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select locate('bc', a.Description, 2) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( locate ( exprList 'bc' ( . a Description ) 2 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where locate('bc', a.Description) = 2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( locate ( exprList 'bc' ( . a Description ) ) ) 2 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Trim">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select trim(a.Description) from Animal a where a.Description='   def']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( trim ( exprList ( . a Description ) ) ) ) ) ( where ( = ( . a Description ) '   def' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select trim(trailing from a.Description) from Animal a where a.Description= 'abc   ']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( trim ( exprList trailing from ( . a Description ) ) ) ) ) ( where ( = ( . a Description ) 'abc   ' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select trim(leading from a.Description) from Animal a where a.Description='   def']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( trim ( exprList leading from ( . a Description ) ) ) ) ) ( where ( = ( . a Description ) '   def' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where trim(a.Description) = 'abc']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( trim ( exprList ( . a Description ) ) ) 'abc' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where trim('_' from a.Description) = 'def']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( trim ( exprList '_' from ( . a Description ) ) ) 'def' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where trim(trailing from a.Description) = 'abc']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( trim ( exprList trailing from ( . a Description ) ) ) 'abc' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where trim(leading from a.Description) = 'def']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( trim ( exprList leading from ( . a Description ) ) ) 'def' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where trim(both from a.Description) = 'abc']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( trim ( exprList both from ( . a Description ) ) ) 'abc' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Length">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select length(a.Description) from Animal a where a.Description = '1234']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( length ( exprList ( . a Description ) ) ) ) ) ( where ( = ( . a Description ) '1234' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where length(a.Description) = 5]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( length ( exprList ( . a Description ) ) ) 5 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Bit_length">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[from Animal a where bit_length(a.Description) = 24]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( bit_length ( exprList ( . a Description ) ) ) 24 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select bit_length(a.Description) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( bit_length ( exprList ( . a Description ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Coalesce">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select coalesce(h.NickName, h.Name.First, h.Name.Last) from Human h]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ( select ( ( coalesce ( exprList ( . h NickName ) ( . ( . h Name ) First ) ( . ( . h Name ) Last ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h where coalesce(h.NickName, h.Name.First, h.Name.Last) = 'max']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ) ( where ( = ( ( coalesce ( exprList ( . h NickName ) ( . ( . h Name ) First ) ( . ( . h Name ) Last ) ) ) 'max' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Nullif">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select nullif(h.NickName, '1e1') from Human h]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ( select ( ( nullif ( exprList ( . h NickName ) '1e1' ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Human h where nullif(h.NickName, '1e1') is not null]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ) ( where ( is not null ( ( nullif ( exprList ( . h NickName ) '1e1' ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Abs">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select abs(a.BodyWeight*-1) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( abs ( exprList ( * ( . a BodyWeight ) ( - 1 ) ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where abs(a.BodyWeight*-1)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( > ( ( abs ( exprList ( * ( . a BodyWeight ) ( - 1 ) ) ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select abs(a.BodyWeight*-1) from Animal a group by abs(a.BodyWeight*-1) having abs(a.BodyWeight*-1)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( abs ( exprList ( * ( . a BodyWeight ) ( - 1 ) ) ) ) ) ) ( group ( ( abs ( exprList ( * ( . a BodyWeight ) ( - 1 ) ) ) ) ) ( having ( > ( ( abs ( exprList ( * ( . a BodyWeight ) ( - 1 ) ) ) ) 0 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Mod">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select mod(cast(a.BodyWeight as int), 3) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( mod ( exprList ( ( cast ( exprList ( . a BodyWeight ) int ) ) 3 ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where mod(20, 3) = 2]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( mod ( exprList 20 3 ) ) 2 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where mod(cast(a.BodyWeight as int), 4)=0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( mod ( exprList ( ( cast ( exprList ( . a BodyWeight ) int ) ) 4 ) ) 0 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Sqrt">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select sqrt(an.BodyWeight) from Animal an]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ( select ( ( sqrt ( exprList ( . an BodyWeight ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal an where sqrt(an.BodyWeight)/2 > 10]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( > ( / ( ( sqrt ( exprList ( . an BodyWeight ) ) ) 2 ) 10 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Upper">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select upper(an.Description) from Animal an]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ( select ( ( upper ( exprList ( . an Description ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal an where upper(an.Description)='ABCDEF']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( = ( ( upper ( exprList ( . an Description ) ) ) 'ABCDEF' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select upper(an.Description) from Animal an group by upper(an.Description) having upper(an.Description)='ABCDEF']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ( select ( ( upper ( exprList ( . an Description ) ) ) ) ) ( group ( ( upper ( exprList ( . an Description ) ) ) ) ( having ( = ( ( upper ( exprList ( . an Description ) ) ) 'ABCDEF' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Lower">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select lower(an.Description) from Animal an]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ( select ( ( lower ( exprList ( . an Description ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal an where lower(an.Description)='abcdef']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ) ( where ( = ( ( lower ( exprList ( . an Description ) ) ) 'abcdef' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[
        select lower(an.Description) from Animal an group by lower(an.Description) having lower(an.Description)='abcdef'
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal an ) ) ( select ( ( lower ( exprList ( . an Description ) ) ) ) ) ( group ( ( lower ( exprList ( . an Description ) ) ) ) ( having ( = ( ( lower ( exprList ( . an Description ) ) ) 'abcdef' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Cast">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select cast(a.BodyWeight as Double) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(7+123-5*a.BodyWeight as Double) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( - ( + 7 123 ) ( * 5 ( . a BodyWeight ) ) ) Double ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(cast(a.BodyWeight as string) as Double) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( ( cast ( exprList ( . a BodyWeight ) string ) ) Double ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where cast(a.BodyWeight as string) like '1.%']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( like ( ( cast ( exprList ( . a BodyWeight ) string ) ) '1.%' ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where cast(7+123-2*a.BodyWeight as Double)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( > ( ( cast ( exprList ( - ( + 7 123 ) ( * 2 ( . a BodyWeight ) ) ) Double ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where cast(:aParam+a.BodyWeight as Double)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( > ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) Double ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where cast(cast(cast(a.BodyWeight as string) as double) as int) = 1]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( cast ( exprList ( ( cast ( exprList ( ( cast ( exprList ( . a BodyWeight ) string ) ) double ) ) int ) ) 1 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(a.BodyWeight as Double) from Animal a group by cast(a.BodyWeight as Double)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) ) ( group ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(7+123-5*a.BodyWeight as Double) from Animal a group by cast(7+123-5*a.BodyWeight as Double)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( - ( + 7 123 ) ( * 5 ( . a BodyWeight ) ) ) Double ) ) ) ) ( group ( ( cast ( exprList ( - ( + 7 123 ) ( * 5 ( . a BodyWeight ) ) ) Double ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(cast(a.BodyWeight as string) as Double) from Animal a group by cast(cast(a.BodyWeight as string) as Double)]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( ( cast ( exprList ( . a BodyWeight ) string ) ) Double ) ) ) ) ( group ( ( cast ( exprList ( ( cast ( exprList ( . a BodyWeight ) string ) ) Double ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(a.BodyWeight as Double) from Animal a group by cast(a.BodyWeight as Double) having cast(a.BodyWeight as Double)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) ) ( group ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) ( having ( > ( ( cast ( exprList ( . a BodyWeight ) Double ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(7+123.3-1*a.BodyWeight as int) from Animal a group by cast(7+123.3-1*a.BodyWeight as int) having cast(7+123.3-1*a.BodyWeight as int)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( - ( + 7 123.3 ) ( * 1 ( . a BodyWeight ) ) ) int ) ) ) ) ( group ( ( cast ( exprList ( - ( + 7 123.3 ) ( * 1 ( . a BodyWeight ) ) ) int ) ) ) ( having ( > ( ( cast ( exprList ( - ( + 7 123.3 ) ( * 1 ( . a BodyWeight ) ) ) int ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(:aParam+a.BodyWeight as int) from Animal a group by cast(:aParam+a.BodyWeight as int) having cast(:aParam+a.BodyWeight as int)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) int ) ) ) ) ( group ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) int ) ) ) ( having ( > ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) int ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(cast(cast(a.BodyWeight as string) as double) as int from Animal a group by cast(cast(cast(a.BodyWeight as string) as double) as int having cast(cast(cast(a.BodyWeight as string) as double) as int = 1]]></Query>
         <Result><![CDATA[Exception expecting CLOSE, found 'from' near line 1, column 65]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(a.BodyWeight As Double) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( . a BodyWeight ) Double ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Current_TimeStamp">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select current_timestamp() from Animal]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ( select ( ( current_timestamp exprList ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Extract">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select extract(second from current_timestamp()), extract(minute from current_timestamp()), extract(hour from current_timestamp()) from Animal]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ( select ( ( extract ( exprList second from ( ( current_timestamp exprList ) ) ) ( ( extract ( exprList minute from ( ( current_timestamp exprList ) ) ) ( ( extract ( exprList hour from ( ( current_timestamp exprList ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal where extract(day from cast(current_timestamp() as Date))>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ) ( where ( > ( ( extract ( exprList day from ( ( cast ( exprList ( ( current_timestamp exprList ) Date ) ) ) ) 0 ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Concat">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select concat(a.Description,'zzz') from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( concat ( exprList ( . a Description ) 'zzz' ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where a.Description = concat('a', concat('b','c'), 'd'||'e')||'f']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( . a Description ) ( || concat ( concatList ( ( concat ( exprList 'a' ( ( concat ( exprList 'b' 'c' ) ) ( || concat ( concatList 'd' 'e' ) ) ) ) 'f' ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - HourMinuteSecond">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select second(current_timestamp()), minute(current_timestamp()), hour(current_timestamp()) from Animal]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal ) ) ( select ( ( second ( exprList ( ( current_timestamp exprList ) ) ) ( ( minute ( exprList ( ( current_timestamp exprList ) ) ) ( ( hour ( exprList ( ( current_timestamp exprList ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - DayMonthYear">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select day(h.Birthdate), month(h.Birthdate), year(h.Birthdate) from Human h]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Human h ) ) ( select ( ( day ( exprList ( . h Birthdate ) ) ) ( ( month ( exprList ( . h Birthdate ) ) ) ( ( year ( exprList ( . h Birthdate ) ) ) ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Str">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[select str(a.BodyWeight) from Animal a]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( str ( exprList ( . a BodyWeight ) ) ) ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where str(123) = '123']]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( = ( ( str ( exprList 123 ) ) '123' ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - iif">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[
        select mr.Description,
        sum(iif(mr.State= 0,1,0)),
        sum(iif(mr.State= 1,1,0)),
        sum(iif(mr.State= 2,1,0))
        from MaterialResource mr
        group by mr.Description
      ]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE MaterialResource mr ) ) ( select ( . mr Description ) ( sum ( ( iif ( exprList ( = ( . mr State ) 0 ) 1 0 ) ) ) ( sum ( ( iif ( exprList ( = ( . mr State ) 1 ) 1 0 ) ) ) ( sum ( ( iif ( exprList ( = ( . mr State ) 2 ) 1 0 ) ) ) ) ) ( group ( . mr Description ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from MaterialResource mr where iif(mr.State=2,true,false)=true]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE MaterialResource mr ) ) ) ( where ( = ( ( iif ( exprList ( = ( . mr State ) 2 ) true false ) ) true ) ) )]]></Result>
      </Test>
   </TestGroup>
   <TestGroup Name="HQLFuctions - Parameter as Argument">
      <Description>from NHibernate tests</Description>
      <Test>
         <Query><![CDATA[from Animal a where cast(:aParam as Double)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( > ( ( cast ( exprList ( : aParam ) Double ) ) 0 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[from Animal a where cast(:aParam+a.BodyWeight as Double)>3]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ) ( where ( > ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) Double ) ) 3 ) ) )]]></Result>
      </Test>
      <Test>
         <Query><![CDATA[select cast(:aParam+a.BodyWeight as int) from Animal a group by cast(:aParam+a.BodyWeight as int) having cast(:aParam+a.BodyWeight as Double)>0]]></Query>
         <Result><![CDATA[ ( query ( SELECT_FROM ( from ( RANGE Animal a ) ) ( select ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) int ) ) ) ) ( group ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) int ) ) ) ( having ( > ( ( cast ( exprList ( + ( : aParam ) ( . a BodyWeight ) ) Double ) ) 0 ) ) )]]></Result>
      </Test>
   </TestGroup>
</Tests>
