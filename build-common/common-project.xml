<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd">

  <description>
		<![CDATA[
		This file contains common tasks tailored specifically for the NHibernate
		build process. The goal was to define all the actions in this file, so
		that actual project build files only have to configure a few variables
		and call tasks in this file.

		Usage

		<property name="root.dir" value="../.." />;
		<include buildfile="${root.dir}/build-common/common-project.xml" />;

		These lines should be placed at the top level under the <project>
		element. Property root.dir defines a relative path to the root of the
		distribution, that is, NHibernate directory.

		After including the file, a target should be defined to initialize
		configuration variables according to the project being built.
		The standard name of this target is init (but any other name can be chosen).
		The init target should depend on (or call) target common.init defined
		in this file.

		Other predefined targets are:

			- common.compile-tests
				compile NUnit tests and copy App.config file to the output directory,
				if it exists.

			- common.compile-dll
				compile a DLL, generating the documentation file (.xml)

			- common.generate-assemblyinfo
				generate an AssemblyInfo.cs file from assembly.* NAnt properties.

			- common.run-tests
				run compiled NUnit tests.

		All compile/run targets put the output in bin.dir. Common.compile*
		targets use source fileset with id="project.sources", assembly fileset
		with id="project.references" and resource fileset with id="project.resources"
		to compile the project. The source and resource filesets are optional and
		default to **/*.cs files and no files respectively.
		]]>
	</description>

	<include buildfile="common.xml" />

  <target name="common.compile-tests" depends="common.compile-all" />
  <target name="common.compile-tests-vb" depends="common.compile-all" />
  <target name="common.compile-dll" depends="common.compile-all" />
  <target name="common.compile-exe" depends="common.compile-all" />

  <target name="common.compile-all">
    <if test="${file::exists(bin.dir + '/msbuild.lock')}">
      <echo>msbuild.lock found : already compiled</echo>
    </if>
    <if test="${not file::exists(bin.dir + '/msbuild.lock')}">
      <echo>msbuild.lock not found : start compiling</echo>

      <property name="msbuild.cmd.sln" value="${root.dir}/src/NHibernate.sln" />
      <property name="msbuild.cmd.out" value="/p:OutputPath=${bin.dir}" />
      <property name="msbuild.cmd.debug" value="/p:DebugType=pdbonly" if="${build.debug == 'pdbonly'}" />
      <property name="msbuild.cmd.debug" value="/p:DebugType=full" if="${build.debug != 'pdbonly'}" />
      <property name="msbuild.cmd.optimize" value="/p:Optimize=${build.release}" />
      <property name="msbuild.cmd.sign" value="/p:SignAssembly=${sign} /p:AssemblyOriginatorKeyFile=${key.file}" />
      <property name="msbuild.cmd.doc" value="/p:GenerateDocumentation=true" />

      <exec
       program="${framework::get-framework-directory(framework::get-target-framework())}\msbuild.exe"
       verbose="true">
        <arg value="${msbuild.cmd.sln}" />
        <arg value="${msbuild.cmd.out}" />
        <arg value="${msbuild.cmd.debug}" />
        <arg value="${msbuild.cmd.optimize}" />
        <arg value="${msbuild.cmd.sign}" />
        <arg value="${msbuild.cmd.doc}" />
        <arg value="/p:NoWarn=1591" />
        <arg value="/t:Rebuild" if="${build.release}"/>
        <arg value="/v:n" />
        <arg value="/m" />
      </exec>

      <copy todir="${bin.dir}/unmerged/">
        <fileset basedir="${bin.dir}">
          <include name="NHibernate.*" />
          <exclude name="NHibernate.*.*" />
        </fileset>
      </copy>
    
      <touch file="${bin.dir}/msbuild.lock" />
    </if>
  </target>
  
	<target name="common.set-assembly-attribute-values">
		<property overwrite="false" name="assembly.version" value="${project.default-assembly-version}" />
		<property overwrite="false" name="assembly.version.informational" value="${project.version}" />
		<property overwrite="false" name="assembly.version.file" value="${project.version.numeric}" />
	</target>

	<target name="common.generate-assemblyinfo"
		depends="common.init common.set-assembly-attribute-values"
		description="Generate SharedAssemblyInfo.cs using assembly.* properties."
	>
		<asminfo output="${root.dir}/src/SharedAssemblyInfo.cs" language="CSharp">
			<imports>
				<import namespace="System" />
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.CompilerServices" />
			</imports>
			<attributes>
				<attribute type="AssemblyVersionAttribute" value="${assembly.version}" />
				<attribute type="AssemblyInformationalVersionAttribute" value="${assembly.version.informational}" />
				<attribute type="AssemblyFileVersionAttribute" value="${assembly.version.file}" />
			</attributes>
		</asminfo>
	</target>

	<target name="common.run-tests"
		description="Run NUnit tests">
		<call target="common.find-nunit" unless="${property::exists('nunit.found')}" />
		<property name="common.run-tests.failonerror" value="${not property::exists(project::get-name() + '.IgnoreFail')}"/>
		<exec program="${nunit-console}" failonerror="${common.run-tests.failonerror}">
			<arg line="${bin.dir}/${project::get-name()}.dll /xml:${testresults.dir}/${project::get-name()}.dll-results.xml /framework:${framework::get-target-framework()}" />
		</exec>

		<!--<nunit2>
			<formatter 
				type="Xml" 
				usefile="true" 
				extension=".xml" 
				outputdir="${bin.dir}"
			/>
			<test
				assemblyname="${bin.dir}/${project::get-name()}.dll"
				appconfig="${bin.dir}/${project::get-name()}.dll.config" />
		</nunit2>-->

	</target>

	<target name="common.run-database-tests"
		depends="common.put-connection-settings-into-app-config common.run-tests common.remove-connection-settings-from-app-config" />

	<target name="common.put-connection-settings-into-app-config">
		<property name="app.config" value="${bin.dir}/${project::get-name()}.dll.config" />
		<call target="common.put-connection-settings-into-defined-app-config" />
	</target>

	<target name="common.put-connection-settings-into-defined-app-config">

		<!-- make sure the config file is writable -->
		<attrib file="${app.config}" readonly="false" />

		<!-- 
			Tell nhibernate how to connect to the test database.
		-->
		<xmlpoke file="${app.config}"
			xpath="//*/hbm:property[@name='dialect']"
			value="${nhibernate.dialect}">
			<namespaces>
				<namespace prefix="hbm" uri="urn:nhibernate-configuration-2.2" />
			</namespaces>
		</xmlpoke>

		<xmlpoke file="${app.config}"
			xpath="//*/hbm:property[@name='command_timeout']"
			value="${nhibernate.command_timeout}">
			<namespaces>
				<namespace prefix="hbm" uri="urn:nhibernate-configuration-2.2" />
			</namespaces>
		</xmlpoke>

		<xmlpoke file="${app.config}"
			xpath="//*/hbm:property[@name='connection.driver_class']"
			value="${nhibernate.connection.driver_class}">
			<namespaces>
				<namespace prefix="hbm" uri="urn:nhibernate-configuration-2.2" />
			</namespaces>
		</xmlpoke>
		<xmlpoke file="${app.config}"
			xpath="//*/hbm:property[@name='connection.connection_string']"
			value="${nhibernate.connection.connection_string}">
			<namespaces>
				<namespace prefix="hbm" uri="urn:nhibernate-configuration-2.2" />
			</namespaces>
		</xmlpoke>
	</target>

	<target name="common.remove-connection-settings-from-app-config">
		<property name="app.config" value="${bin.dir}/${project::get-name()}.dll.config" />

		<xmlpoke
			file="${app.config}"
			xpath="/configuration/nhibernate/add[@key='hibernate.connection.connection_string']/@value"
			value="conn string here" 
		/>
	</target>

</project>
